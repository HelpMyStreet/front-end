@model HelpMyStreetFE.Models.Account.AccountViewModel;
@using HelpMyStreetFE.Enums.Account;
@using HelpMyStreet.Utils.Enums;
@using HelpMyStreet.Utils.Utils;
@using HelpMyStreetFE.Models.Community;

<nav class="account__nav">
    <ul class="account__nav__list m-0 p-0">
        <li class="account__nav__item">
            <a href="/account/open-requests" class="@(Model.CurrentPage == MenuPage.OpenRequests ? "selected" : string.Empty)">
                Open Requests
                @await Component.InvokeAsync("AccountNavBadge", new
                {
                    CssClass = "bg-green",
                    User = Model.UserDetails.User,
                    MenuPage = MenuPage.OpenRequests
                })
            </a>
        </li>

        <li class="account__nav__item">
            <a href="/account/accepted-requests" class="@(Model.CurrentPage == MenuPage.AcceptedRequests ? "selected" : string.Empty)">
                My Accepted Requests
                @await Component.InvokeAsync("AccountNavBadge", new
                   {
                       CssClass = "bg-green",
                       User = Model.UserDetails.User,
                       MenuPage = MenuPage.AcceptedRequests
                   })
            </a>
        </li>

        <li class="account__nav__item">
            <a href="/account/completed-requests" class="@(Model.CurrentPage == MenuPage.CompletedRequests ? "selected" : string.Empty)">
                My Completed Requests
                @await Component.InvokeAsync("AccountNavBadge", new
                   {
                       CssClass = "bg-gray-8",
                       User = Model.UserDetails.User,
                       MenuPage = MenuPage.CompletedRequests
                   })
            </a>
        </li>

        <li class="account__nav__item">
            <a href="/account/open-shifts" class="@(Model.CurrentPage == MenuPage.OpenShifts ? "selected" : string.Empty)">
                Open Shifts
                @await Component.InvokeAsync("AccountNavBadge", new
                   {
                       CssClass = "bg-green",
                       User = Model.UserDetails.User,
                       MenuPage = MenuPage.OpenShifts
                   })
            </a>
        </li>

        <li class="account__nav__item">
            <a href="/account/my-shifts" class="@(Model.CurrentPage == MenuPage.MyShifts ? "selected" : string.Empty)">
                My Shifts
                @await Component.InvokeAsync("AccountNavBadge", new
                   {
                       CssClass = "bg-green",
                       User = Model.UserDetails.User,
                       MenuPage = MenuPage.MyShifts
                   })
            </a>
        </li>

        <li class="account__nav__item">
            <a href="/account/profile" class="@(Model.CurrentPage == MenuPage.UserDetails ? "selected" : string.Empty)">My Profile</a>
        </li>
        @foreach (var userGroup in Model.UserGroups)
        {
            var adminRoles = new List<GroupRoles> { GroupRoles.TaskAdmin, GroupRoles.UserAdmin, GroupRoles.UserAdmin_ReadOnly, GroupRoles.RequestSubmitter };
            @if (userGroup.UserRoles.Any(userRole => adminRoles.Contains(userRole)))
            {
                <li class="account__nav__item submenu__container">
                    <a href=@($"/account/g/{userGroup.GroupKey}") class="@(Model.CurrentGroup?.GroupKey == userGroup.GroupKey ? "selected" : string.Empty)">
                        @userGroup.GroupName
                        @if (userGroup.UserRoles.Contains(GroupRoles.TaskAdmin))
                        {
                            @await Component.InvokeAsync("AccountNavBadge", new
                               {
                                   CssClass = "bg-green",
                                   User = Model.UserDetails.User,
                                   MenuPage = MenuPage.Group,
                                   GroupKey = userGroup.GroupKey
                               })
                        }
                    </a>
                    <ul>
                        @if (userGroup.UserRoles.Contains(GroupRoles.TaskAdmin))
                        {
                            <li class="account__nav__item">
                                <a href=@($"/account/g/{userGroup.GroupKey}/requests") class="@(Model.CurrentGroup?.GroupKey == userGroup.GroupKey && Model.CurrentPage == MenuPage.GroupRequests ? "selected" : string.Empty)">
                                    Requests
                                    @await Component.InvokeAsync("AccountNavBadge", new
                                       {
                                           CssClass = "bg-green",
                                           User = Model.UserDetails.User,
                                           MenuPage = MenuPage.GroupRequests,
                                           GroupKey = userGroup.GroupKey
                                       })
                                </a>
                            </li>

                            @if (userGroup.ShiftsEnabled)
                            {
                                <li class="account__nav__item">
                                    <a href=@($"/account/g/{userGroup.GroupKey}/shifts") class="@(Model.CurrentGroup?.GroupKey == userGroup.GroupKey && Model.CurrentPage == MenuPage.GroupShifts ? "selected" : string.Empty)">
                                        Shifts
                                        @await Component.InvokeAsync("AccountNavBadge", new
                                           {
                                               CssClass = "bg-green",
                                               User = Model.UserDetails.User,
                                               MenuPage = MenuPage.GroupShifts,
                                               GroupKey = userGroup.GroupKey
                                           })
                                    </a>
                                </li>
                            }
                        }
                        @if (userGroup.UserRoles.Contains(GroupRoles.UserAdmin) || userGroup.UserRoles.Contains(GroupRoles.UserAdmin_ReadOnly))
                        {
                            <li class="account__nav__item">
                                <a href=@($"/account/g/{userGroup.GroupKey}/volunteers") class="@(Model.CurrentGroup?.GroupKey == userGroup.GroupKey && Model.CurrentPage == MenuPage.GroupVolunteers ? "selected" : string.Empty)">Volunteers</a>
                            </li>
                        }
                        @if (userGroup.UserRoles.Contains(GroupRoles.RequestSubmitter))
                        {
                            <li class="account__nav__item">
                                <a href=@($"/request-help/{Base64Utils.Base64Encode(userGroup.GroupId)}/a") class="">Submit Request</a>
                            </li>
                        }
                    </ul>
                </li>
            }
        }

        @{
            var myGroups = Model.UserGroups.Where(g => g.GroupId != (int)Groups.Generic && g.UserRoles.Contains(GroupRoles.Member));
        }
        @if (myGroups.Count() > 0)
        {
            <li class="account__nav__item my-groups">
                <span class="my-groups__header">
                    My Group Pages
                </span>
                <ul>
                    @foreach (var userGroup in myGroups.OrderByDescending(g => g.UserRoles.Count()))
                    {
                        <li class="account__nav__item group-link">
                            <a href="/community/@userGroup.GroupKey">
                                <partial name="_GroupLogo" model="new GroupLogoViewModel { GroupId = userGroup.GroupId }" />
                            </a>
                        </li>
                    }
                </ul>
            </li>
        }
    </ul>
</nav>
