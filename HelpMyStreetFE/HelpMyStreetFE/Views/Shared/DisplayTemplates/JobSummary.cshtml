@using HelpMyStreetFE;
@using HelpMyStreet.Utils.Enums;
@using HelpMyStreet.Utils.Utils;

@model HelpMyStreet.Utils.Models.JobSummary

@{
    bool UserIsVerified = (bool)ViewData["UserIsVerified"];
    bool IsAccepted = ViewData["IsAccepted"] is bool ? (bool)ViewData["IsAccepted"] : false;
    bool UserActingAsAdmin = (bool)ViewData["UserActingAsAdmin"];
    var id = Base64Utils.Base64Encode(Model.JobID.ToString());

    var className = "";
    if(Model.DueDate.Date <= DateTime.Today)
    {
        className = "job--hot";
    }

    if(Model.DueDate.Date == DateTime.Today.AddDays(1))
    {
        className = "job--warm";
    }
    var AgeUk = Model.SupportActivity == SupportActivities.WellbeingPackage;
    var Hlp = Model.SupportActivity == SupportActivities.CommunityConnector;
    string iconClass = AgeUk ? "limit-width" : "";

    var forFaceMask = Model.SupportActivity == SupportActivities.FaceMask;
    var userDetailsNotProvidedText = AgeUk ? "None provided - contact Age UK using Requester Details" : "None Provided"; 
    var friendlyNamePrefix = forFaceMask  ?
    Model?.Questions.Where(x => x.Id == (int)Questions.FaceMask_Amount).FirstOrDefault()?.Answer  : "";
    bool removePluralisation = forFaceMask &&  Model?.Questions.Where(x => x.Id == (int)Questions.FaceMask_Amount).FirstOrDefault()?.Answer == "1";
    var friendlyName = friendlyNamePrefix + " " + (removePluralisation ? Model.SupportActivity.FriendlyName().Remove(Model.SupportActivity.FriendlyName().Length - 1) : Model.SupportActivity.FriendlyName());
    bool showOtherDetails = !forFaceMask;
    var ageUKReference = Model?.Questions.Where(x => x.Id == (int)Questions.AgeUKReference).FirstOrDefault()?.Answer;
}

<div class="job @className" id="@id" data-user-acting-as-admin="@UserActingAsAdmin" data-job-status="@Model.JobStatus">
    <div class="job__info">
        <div class="job__info__urgency">
            @if (Model.IsHealthCritical)
            {
                <span class="critical-icon">!</span>
                <span class="critical">Critical</span>
            }
            else
            {
                <img src="~/img/icons/calendar.svg" />
            }
            <span class="due-date">Due @Model.DueDate.ToString("dd/MM/yyyy")</span>
        </div>
        <div class="job__info__activity column">
            <span class="activity__title job__status">
                @switch (Model.JobStatus)
                {
                    case JobStatuses.Open:<span>Open</span>break;
                    case JobStatuses.InProgress: <span>In Progress</span> break;
                    case JobStatuses.Done: <span>Done</span>break;
                    case JobStatuses.Cancelled: <span>Cancelled</span>break;
                }
            </span>
            <span class="activity__title @Model.SupportActivity.Class()">
                @if (Model.SupportActivity != SupportActivities.Other)
                    {
                    <img src="~/img/icons/@Model.SupportActivity.Icon()" class="@iconClass" />

                }

                @friendlyName

                @if(ageUKReference != null)
                {
                    @($"({ageUKReference})")
                }

            </span>
            <span class="activity__detail">@Model.PostCode (@Math.Round(Model.DistanceInMiles, 1) miles away)</span>
        </div>
        <div class="job__info__actions column flex-end">
            @switch (Model.JobStatus)
            {
                case JobStatuses.Open:
                    @if (!UserActingAsAdmin)
                    {
                    <button class="btn cta large fill accept-request trigger-status-update-popup @(UserIsVerified ? "" : "disabled")" data-target-state="@JobStatuses.InProgress">
                        <span class="text">Accept</span>
                    </button>
                    <div class="job__info__footer actioned">
                        <a href="/account/accepted-requests">Go to My Accepted Requests</a>
                    </div>
                    }
                    break;
                case JobStatuses.InProgress:
                    <button class="btn cta large fill complete-request trigger-status-update-popup" data-target-state="@JobStatuses.Done">
                        <span class="text">Mark as Done</span>
                    </button>
                    <button class="btn border-dark-blue dark-blue large bg-white mt-sm release-request trigger-status-update-popup" data-target-state="@JobStatuses.Open">
                        @if (UserActingAsAdmin)
                        {
                            <span class="text">Mark as Open</span>
                        }
                        else
                        {
                            <span class="text">Can't do</span>
                        }
                    </button>
                    break;
                case JobStatuses.Done:
                    if (UserActingAsAdmin)
                    {
                        <button class="btn border-orange orange large bg-white mt-sm trigger-status-update-popup" data-target-state="@JobStatuses.InProgress" data-target-user="@Base64Utils.Base64Encode(Model.VolunteerUserID.ToString())">
                            <span class="text">Not done</span>
                        </button>
                    }
                    break;
            }
            @if (UserActingAsAdmin && Model.JobStatus != JobStatuses.Cancelled)
            {
                <button class="btn border-orange orange large bg-white mt-sm cancel-request trigger-status-update-popup" data-target-state="@JobStatuses.Cancelled">
                    <span class="text">Cancel</span>
                </button>
            }
            <button class="btn border-green green large bg-white mt-sm undo-request dnone" data-target-state="@Model.JobStatus" data-target-user="@Base64Utils.Base64Encode(Model.VolunteerUserID.ToString())">
                <span class="text">Undo</span>
                <div class="loader dnone">
                    <partial name="_LoadingSpinner" model='new LoadingSpinnerViewModel { Text = "Undoing...", ShowDarkSpinner= true }' />
                </div>
            </button>
            <div class="job__info__footer">

                <a href="#" data-id="@id" class="open @(UserIsVerified ? "" : "disabled") ">View more info <span></span></a>
                <a href="#" data-id="@id" class="close">View less info <span></span></a>
            </div>
        </div>
       
    </div>
    <div class="job__detail">
        @if (IsAccepted)
            {
                var (requestor, recipient, requestorType) = (HelpMyStreetFE.Models.Account.RequestContactInformation)ViewData["ContactInformation"];

            <h4>Contact Details</h4>
            <div class="job__expander">
                <h5>@(forFaceMask ? "Recipient" : "Person in need")<span></span></h5>
                <dl>
                    @if (!string.IsNullOrEmpty(Model.RecipientOrganisation))
                    {
                        <dt>Organisation</dt>
                        <dd>@Model.RecipientOrganisation</dd>
                    }
                    <dt>Name</dt>
                    <dd>@recipient.FirstName @recipient.LastName</dd>
                    <dt>Email</dt>
                    <dd>@(string.IsNullOrEmpty(recipient.EmailAddress) ? userDetailsNotProvidedText : recipient.EmailAddress) </dd>
                    <dt>Phone number(s)</dt>
                    <dd>
                        @if (String.IsNullOrEmpty(recipient.MobileNumber) && String.IsNullOrEmpty(recipient.OtherNumber))
                        {
                            @userDetailsNotProvidedText
                        }
                        else
                        {
                            @recipient.MobileNumber
                            @(String.IsNullOrEmpty(recipient.OtherNumber) || String.IsNullOrEmpty(recipient.MobileNumber) ? "" : " / ")
                            @recipient.OtherNumber
                        }
                    </dd>
                    <dt>Address</dt>
                    <dd>
                        @Html.DisplayFor(x => recipient.Address, new { MaskAddress = AgeUk || Hlp })
                    </dd>
                </dl>
            </div>
            <div class="job__expander">
                <h5>Requester<span></span></h5>
                @if (requestorType == RequestorType.Myself)
                {
                    <p><i>Request made by recipient </i></p>
                }
                else
                {
                    <dl>
                        <dt>Name</dt>
                        <dd>@requestor.FirstName @requestor.LastName</dd>
                        <dt>Email</dt>
                        <dd>@requestor.EmailAddress</dd>
                        <dt>Phone number(s)</dt>
                        <dd>
                            @requestor.MobileNumber
                            @(String.IsNullOrEmpty(recipient.OtherNumber) || String.IsNullOrEmpty(requestor.MobileNumber) ? "" : " / ")
                            @requestor.OtherNumber
                        </dd>
                        <dt>Address</dt>
                        <dd>
                            @requestor.Address.Postcode
                        </dd>
                    </dl>
                }
            </div>
            <div class="job__expander add-line">
                <h5>Communication Needs<span></span></h5>
                <p>@(String.IsNullOrEmpty(Model.SpecialCommunicationNeeds) ? "None entered" : Model.SpecialCommunicationNeeds)</p>
            </div>

            <h4>Request Details</h4>

            @foreach (var question in Model.Questions)
            {

                if (question.ShowOnTaskManagement())
                {
                    <div class="job__expander">
                        <h5>@question.FriendlyName()<span></span></h5>
                        <p> @(String.IsNullOrEmpty(question.Answer) ? "None entered" : question.Answer)</p>
                    </div>
                }
            }

            @if (showOtherDetails)
            {
                <div class="job__expander">
                    <h5>Further Details<span></span></h5>
                    <p>@(String.IsNullOrEmpty(Model.OtherDetails) ? "None entered" : Model.OtherDetails)</p>
                </div>
            }
        }
        else if (UserIsVerified)
        {
            @if (!string.IsNullOrEmpty(Model.RecipientOrganisation))
            {
                <h4>Organisation</h4>
                <p>@Model.RecipientOrganisation</p>
            }

            @foreach (var question in Model.Questions)
            {

                if (question.ShowOnTaskManagement())
                {
                    <h4>@question.FriendlyName()</h4>
                    <p> @(String.IsNullOrEmpty(question.Answer) ? "None entered" : question.Answer)</p>
                }
            }
            @if (showOtherDetails)
            {
                <h4>Further Details</h4>
                <p>@(String.IsNullOrEmpty(Model.OtherDetails) ? "None entered" : Model.OtherDetails)</p>
            }

            <h4>Communication Needs</h4>
            <p>@(String.IsNullOrEmpty(Model.SpecialCommunicationNeeds) ? "None entered" : Model.SpecialCommunicationNeeds)</p>
        }
    </div>
</div>
