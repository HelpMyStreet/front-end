@using HelpMyStreetFE.Models.Account.Jobs;
@using HelpMyStreet.Utils.Models;
@using HelpMyStreet.Utils.Enums;
@using HelpMyStreet.Utils.Utils;
@using HelpMyStreet.Utils.Extensions;
@using HelpMyStreetFE.Helpers;

@model JobViewModel<JobHeader>;

@switch (Model.Item.JobStatus)
{
    case JobStatuses.New:
        break;
    case JobStatuses.Open:
        <button class="btn cta @(Model.UserHasRequiredCredentials ? "" : "cta--green-border") trigger-status-update-popup" data-target-state="@JobStatuses.InProgress">
            <span class="text">Accept</span>
        </button>
        break;
    case JobStatuses.InProgress:
        <button class="btn cta trigger-status-update-popup" data-target-state="@JobStatuses.Done">
            <span class="text">Mark as Done</span>
        </button>
        <button class="btn cta--dark-blue-border trigger-status-update-popup" data-target-state="@JobStatuses.Open">
            <span class="text">Can't do</span>
        </button>
        break;
    case JobStatuses.Done:
        if (Model.Item.RequestType.Equals(RequestType.Task))
        {
            <div class="feedback-container">
                <span class="job__info__col3__status toggle-on-status-change">
                    <img class="status-icon" src="~/img/icons/status/@Model.Item.JobStatus.Icon()" alt="@Model.Item.JobStatus.FriendlyName()" />
                    <span class="job__status">@Model.Item.JobStatus.FriendlyName()</span>
                </span>
            </div>
        }
        break;
    case JobStatuses.Cancelled:
        if (Model.Item.RequestType.Equals(RequestType.Task))
        {
            <div class="feedback-container"></div>
        }
        break;
}
<button class="btn cta--green-border undo-request dnone" data-target-state="@Model.Item.JobStatus" data-target-user="@(Model.Item.VolunteerUserID.HasValue ? Base64Utils.Base64Encode(Model.Item.VolunteerUserID.Value) : "")">
    <span class="text">Undo</span>
    <div class="loader dnone">
        <partial name="_LoadingSpinner" model='new LoadingSpinnerViewModel { Text = "Undoing...", ShowDarkSpinner= true }' />
    </div>
</button>
