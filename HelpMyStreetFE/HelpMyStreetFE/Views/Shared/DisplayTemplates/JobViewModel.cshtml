@using HelpMyStreetFE;
@using HelpMyStreet.Utils.Enums;
@using HelpMyStreet.Utils.Utils;

@model HelpMyStreetFE.Models.Account.Jobs.JobViewModel

@{
    var id = Base64Utils.Base64Encode(Model.JobSummary.JobID.ToString());

    var className = "";
    if(Model.JobSummary.DueDate.Date <= DateTime.Today)
    {
        className = "job--hot";
    }

    if(Model.JobSummary.DueDate.Date == DateTime.Today.AddDays(1))
    {
        className = "job--warm";
    }
    var AgeUk = Model.JobSummary.SupportActivity == SupportActivities.WellbeingPackage;
    string iconClass = AgeUk ? "limit-width" : "";

    var forFaceMask = Model.JobSummary.SupportActivity == SupportActivities.FaceMask;
    var friendlyNamePrefix = forFaceMask  ?
    Model.JobSummary?.Questions.Where(x => x.Id == (int)Questions.FaceMask_Amount).FirstOrDefault()?.Answer  : "";
    bool removePluralisation = forFaceMask &&  Model.JobSummary?.Questions.Where(x => x.Id == (int)Questions.FaceMask_Amount).FirstOrDefault()?.Answer == "1";
    var friendlyName = friendlyNamePrefix + " " + (removePluralisation ? Model.JobSummary.SupportActivity.FriendlyName().Remove(Model.JobSummary.SupportActivity.FriendlyName().Length - 1) : Model.JobSummary.SupportActivity.FriendlyName());
    var ageUKReference = Model.JobSummary?.Questions.Where(x => x.Id == (int)Questions.AgeUKReference).FirstOrDefault()?.Answer;
}

<div class="job @className" id="@id" data-user-acting-as-admin="@Model.UserActingAsAdmin" data-job-status="@Model.JobSummary.JobStatus">
    <div class="job__info">
        <div class="job__info__urgency">
            @if (Model.JobSummary.IsHealthCritical)
            {
                <span class="critical-icon">!</span>
                <span class="critical">Critical</span>
            }
            else
            {
                <img src="~/img/icons/calendar.svg" />
            }
            <span class="due-date">Due @Model.JobSummary.DueDate.ToString("dd/MM/yyyy")</span>
        </div>
        <div class="job__info__activity column">
            <span class="activity__title job__status">
                @switch (Model.JobSummary.JobStatus)
                {
                    case JobStatuses.Open:<span>Open</span>break;
                    case JobStatuses.InProgress: <span>In Progress</span> break;
                    case JobStatuses.Done: <span>Done</span>break;
                    case JobStatuses.Cancelled: <span>Cancelled</span>break;
                }
            </span>
            <span class="activity__title @Model.JobSummary.SupportActivity.Class()">
                @if (Model.JobSummary.SupportActivity != SupportActivities.Other)
                    {
                    <img src="~/img/icons/@Model.JobSummary.SupportActivity.Icon()" class="@iconClass" />

                }

                @friendlyName

                @if(ageUKReference != null)
                {
                    @($"({ageUKReference})")
                }

            </span>
            <span class="activity__detail">@Model.JobSummary.PostCode (@Math.Round(Model.JobSummary.DistanceInMiles, 1) miles away)</span>
        </div>
        <div class="column flex-end mt-sm">
            <div class="job__info__actions">
                @switch (Model.JobSummary.JobStatus)
                {
                    case JobStatuses.Open:
                        @if (!Model.UserActingAsAdmin)
                        {
                            @if (Model.UserIsVerified)
                            {
                                <button class="btn cta large trigger-status-update-popup" data-target-state="@JobStatuses.InProgress">
                                    <span class="text">Accept</span>
                                </button>
                                <div class="job__info__footer next-step dnone">
                                    <a href="/account/accepted-requests?j=@Base64Utils.Base64Encode(Model.JobSummary.JobID.ToString())">Go to My Accepted Requests</a>
                                </div>
                            }
                            else
                            {
                                <button class="btn cta large accept-request-unverified bg-gray-8">
                                    <span class="text">Accept</span>
                                </button>
                            }
                        }
                        break;
                    case JobStatuses.InProgress:
                        <button class="btn cta large trigger-status-update-popup" data-target-state="@JobStatuses.Done">
                            <span class="text">Mark as Done</span>
                        </button>
                        <button class="btn border-dark-blue dark-blue large bg-white mt-sm trigger-status-update-popup" data-target-state="@JobStatuses.Open">
                            @if (Model.UserActingAsAdmin)
                            {
                                <span class="text">Mark as Open</span>
                            }
                            else
                            {
                                <span class="text">Can't do</span>
                            }
                        </button>
                        break;
                    case JobStatuses.Done:
                        if (Model.UserActingAsAdmin)
                        {
                            <button class="btn border-orange orange large bg-white mt-sm trigger-status-update-popup" data-target-state="@JobStatuses.InProgress" data-target-user="@Base64Utils.Base64Encode(Model.JobSummary.VolunteerUserID.ToString())">
                                <span class="text">Not done</span>
                            </button>
                        }
                        break;
                }
                @if (Model.UserActingAsAdmin && Model.JobSummary.JobStatus != JobStatuses.Cancelled)
                {
                    <button class="btn border-orange orange large bg-white mt-sm trigger-status-update-popup" data-target-state="@JobStatuses.Cancelled">
                        <span class="text">Cancel</span>
                    </button>
                }
                <button class="btn border-green green large bg-white mt-sm undo-request dnone" data-target-state="@Model.JobSummary.JobStatus" data-target-user="@Base64Utils.Base64Encode(Model.JobSummary.VolunteerUserID.ToString())">
                    <span class="text">Undo</span>
                    <div class="loader dnone">
                        <partial name="_LoadingSpinner" model='new LoadingSpinnerViewModel { Text = "Undoing...", ShowDarkSpinner= true }' />
                    </div>
                </button>
            </div>
            <div class="job__info__footer">
                @if (Model.UserIsVerified)
                {
                    <a href="#" data-id="@id" class="open">View more info <span></span></a>
                    <a href="#" data-id="@id" class="close">View less info <span></span></a>
                }
            </div>
        </div>
       
    </div>
    <div class="job__detail"></div>
</div>
