@using HelpMyStreetFE.Helpers;
@using HelpMyStreet.Utils.Enums;
@using HelpMyStreet.Utils.Utils;
@using HelpMyStreet.Utils.Extensions;
@using HelpMyStreet.Utils.Models;
@using HelpMyStreetFE.Models.Community;
@using HelpMyStreetFE.Models.Account.Jobs;

@model JobViewModel<JobHeader>

@{
    var id = Base64Utils.Base64Encode(Model.Item.JobID);
    var requestId = Base64Utils.Base64Encode(Model.Item.RequestID);
    var role = Base64Utils.Base64Encode((int)Model.UserRole);
    var admin = Model.UserRole == RequestRoles.GroupAdmin;

    var className = "";
    var dueDate = "";

    if (Model.Item.JobStatus.Incomplete())
    {
        dueDate = Model.Item.DueDate.JobDueDate(Model.Item.DueDateType);

        if (dueDate.Contains("urgent"))
        {
            className += " job--urgent";
        }

        if (dueDate.Contains("soon"))
        {
            className += " job--due-soon";
        }
    }

    if (Model.HighlightJob)
    {
        className += " highlight";
    }

}

<div class="job @className" id="@id" request-id="@requestId" data-job-status="@Model.Item.JobStatus" data-role="@role">
    <div class="job__info @(admin ? "admin-view" : "")">
        

        <div class="job__info__col1">
            @if (admin || Model.Item.JobStatus != JobStatuses.Open)
            {
                <span class="job__info__col1__status">
                    <img class="status-icon toggle-on-status-change" src="~/img/icons/status/@Model.Item.JobStatus.Icon()" alt="@Model.Item.JobStatus.FriendlyName()" />
                    <span class="job__status toggle-on-status-change">@Model.Item.JobStatus.FriendlyName()</span>
                </span>
            }

            @if (Model.Item.IsHealthCritical && (Model.Item.JobStatus.Incomplete()))
            {
                <span class="job__info__col1__criticality">
                    <span class="critical-icon">!</span>
                    <span class="critical">Critical</span>
                </span>
            }
            <div class="toggle-on-status-change">
                <div class="job__info__col1__referrer">
                    <partial name="_GroupLogo" model="new GroupLogoViewModel { GroupId = Model.Item.ReferringGroupID }" />
                </div>
            </div>

            @if (Model.Item.JobStatus.Incomplete())
            {
                <span class="job__info__col1__urgency toggle-on-status-change">
                    @if (admin)
                    {
                        <span class="" title="@Model.Item.DateRequested.FormatDate(DateTimeFormat.ShortDateFormat)">Requested @Model.Item.DateRequested.FriendlyPastDate()</span>
                        <span class="job__info__col1__urgency__dates due-date" title="@((Model.Item.DueDateType == DueDateType.On ? "On " : "On or before ") + Model.Item.DueDate.FormatDate(DateTimeFormat.ShortDateFormat))">
                            Due @Model.Item.DueDate.FriendlyFutureDate()
                        </span>
                    }
                    else
                    {
                        <span class="job__info__col1__urgency__dates due-date" title="@(Model.Item.DueDateType == DueDateType.On ? Model.Item.DueDate.FriendlyFutureDate() : "")">
                            @dueDate
                        </span>
                    }
                </span>
            }


            <span class="job__info__col1__new-status job__status job__status__new dnone toggle-on-status-change">
            </span>
            @if (!admin && Model.Item.JobStatus == JobStatuses.Open)
            {
                <span class="job__info__col1__next-step dnone toggle-on-status-change">
                    <a href="/account/my-requests/j/@id">Go to My Requests</a>
                </span>
            }
        </div>
        <div class="job__info__activity">
            @if (Model.Item.IsHealthCritical && (Model.Item.JobStatus.Incomplete()))
            {
                <span class="job__info__activity__criticality">
                    <span class="critical-icon">!</span>
                    <span class="critical">Critical</span>
                </span>
            }
            <span class="job__info__activity__title @Model.Item.SupportActivity.Class()">
                @if (Model.Item.SupportActivity != SupportActivities.Other)
                {
                    <img src="~/img/icons/@Model.Item.SupportActivity.Icon()" />
                }
                <span>
                    @Model.Item.SupportActivity.FriendlyNameShort()
                </span>
            </span>
            @if (!string.IsNullOrWhiteSpace(Model.Item.Reference))
            {
                <span class="job__info__activity__title @Model.Item.SupportActivity.Class()">
                    @($"({Model.Item.Reference})")
                </span>
            }
            <span class="job__info__activity__location">
                @Math.Round(Model.Item.DistanceInMiles, 1) miles away
                @if (!admin && Model.Item.JobStatus == JobStatuses.Open)
                {
                    <span>(@Model.Item.PostCode)</span>
                }
            </span>
        </div>
        <div class="job__info__col3 flex-end">
            @if (admin)
            {
                <span class="job__info__col3__status">
                    <img class="status-icon toggle-on-status-change" src="~/img/icons/status/@Model.Item.JobStatus.Icon()" alt="@Model.Item.JobStatus.FriendlyName()" />
                    <span class="job__status toggle-on-status-change">@Model.Item.JobStatus.FriendlyName()</span>
                </span>
            }

            @if (Model.Item.IsHealthCritical && (Model.Item.JobStatus.Incomplete()))
            {
                <span class="job__info__col3__criticality">
                    <span class="critical-icon">!</span>
                    <span class="critical">Critical</span>
                </span>
            }
        <div class="job__info__actions">
            @if (admin)
            {
                <partial name="_JobButtons_Admin" model="Model.Item" />
            }
            else
            {
                <partial name="_JobButtons_Volunteer" model="Model" />
            }
        </div>
            <div class="job__info__footer">
                <a href="#" class="open">View more info <span></span></a>
                <a href="#" class="close">View less info <span></span></a>
            </div>
        </div>

    </div>
    <div class="job__detail">
        <partial name="_LoadingSpinner" model='new LoadingSpinnerViewModel() { Hide = false, ShowDarkSpinner = true }' />
    </div>
</div>
