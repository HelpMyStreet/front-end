@using HelpMyStreetFE.Helpers;
@using HelpMyStreet.Utils.Enums;
@using HelpMyStreet.Utils.Utils;
@using HelpMyStreet.Utils.Extensions;

@model HelpMyStreetFE.Models.Account.Jobs.JobViewModel

@{
    var id = Base64Utils.Base64Encode(Model.JobSummary.JobID.ToString());

    var className = "";
    if (Model.JobSummary.JobStatus == JobStatuses.Open || Model.JobSummary.JobStatus == JobStatuses.InProgress)
    {
        if (Model.JobSummary.DueDate.Date <= DateTime.Today)
        {
            className = "job--hot";
        }

        if (Model.JobSummary.DueDate.Date == DateTime.Today.AddDays(1))
        {
            className = "job--warm";
        }
    }

    var AgeUk = Model.JobSummary.SupportActivity == SupportActivities.WellbeingPackage;
    string iconClass = AgeUk ? "limit-width" : "";

    var forFaceMask = Model.JobSummary.SupportActivity == SupportActivities.FaceMask;
    var friendlyNamePrefix = forFaceMask ?
    Model.JobSummary?.Questions.Where(x => x.Id == (int)Questions.FaceMask_Amount).FirstOrDefault()?.Answer : "";
    bool removePluralisation = forFaceMask && Model.JobSummary?.Questions.Where(x => x.Id == (int)Questions.FaceMask_Amount).FirstOrDefault()?.Answer == "1";
    var friendlyName = friendlyNamePrefix + " " + (removePluralisation ? Model.JobSummary.SupportActivity.FriendlyName().Remove(Model.JobSummary.SupportActivity.FriendlyName().Length - 1) : Model.JobSummary.SupportActivity.FriendlyName());
    var ageUKReference = Model.JobSummary?.Questions.Where(x => x.Id == (int)Questions.AgeUKReference).FirstOrDefault()?.Answer;
}

<div class="job @className" id="@id" data-user-acting-as-admin="@Model.UserActingAsAdmin" data-job-status="@Model.JobSummary.JobStatus" data-referring-group-name="@Model.ReferringGroup">
    <div class="job__info">
        <div class="job__info__urgency">
            @if (Model.JobSummary.JobStatus == JobStatuses.Done)
            {
                <span class="job__info__urgency__dates">
                    <img src="~/img/icons/green-tick.svg" alt="Done" />
                    <span class="due-date" title="@Model.JobSummary.DateStatusLastChanged.ToString("dd/MM/yyyy")">Completed @Model.JobSummary.DateStatusLastChanged.FriendlyFutureDate()</span>
                </span>
            }
            else if (Model.JobSummary.JobStatus == JobStatuses.Cancelled)
            {
                <span class="job__info__urgency__dates">
                    <img src="~/img/icons/gray-tick.svg" alt="Cancelled" />
                    <span class="due-date" title="@Model.JobSummary.DateStatusLastChanged.ToString("dd/MM/yyyy")">Cancelled @Model.JobSummary.DateStatusLastChanged.FriendlyFutureDate()</span>
                </span>
            }
            else
            {
                @if (Model.UserActingAsAdmin)
                {
                    <span class="job__info__urgency__dates job__status">@Model.JobSummary.JobStatus.FriendlyName()</span>
                    <span class="job__info__urgency__dates">
                        <span class="" title="@Model.JobSummary.DateRequested.ToString("dd/MM/yyyy")">Requested @Model.JobSummary.DateRequested.FriendlyPastDate()</span>
                    </span>
                }
                else
                {
                    <span class="job__info__urgency__dates">
                        <img src="~/img/icons/calendar.svg" />
                        <span class="" title="@Model.JobSummary.DateRequested.ToString("dd/MM/yyyy")">Requested @Model.JobSummary.DateRequested.FriendlyPastDate()</span>
                    </span>
                }

                <span class="job__info__urgency__dates due-date" title="@Model.JobSummary.DueDate.ToString("dd/MM/yyyy")">
                    Due @Model.JobSummary.DueDate.FriendlyFutureDate()
                </span>
            }
            <span class="job__status job__status__new">
            </span>
            @if (!Model.UserActingAsAdmin && Model.JobSummary.JobStatus == JobStatuses.Open)
            {
                <span class="next-step dnone">
                    <a href="/account/accepted-requests?j=@Base64Utils.Base64Encode(Model.JobSummary.JobID.ToString())">Go to My Accepted Requests</a>
                </span>
            }
        </div>
        <div class="job__info__activity column">
            @if (Model.JobSummary.IsHealthCritical)
            {
                <span class="">
                    <span class="critical-icon">!</span>
                    <span class="critical">Critical</span>
                </span>
            }
            <span class="activity__title @Model.JobSummary.SupportActivity.Class()">
                @if (Model.JobSummary.SupportActivity != SupportActivities.Other)
                {
                    <img src="~/img/icons/@Model.JobSummary.SupportActivity.Icon()" class="@iconClass" />
                }

                @friendlyName

                @if (!string.IsNullOrWhiteSpace(ageUKReference))
                {
                    @($"({ageUKReference})")
                }

            </span>
            <span class="activity__detail">
                @Model.JobSummary.PostCode
                @if (!Model.UserActingAsAdmin && Model.JobSummary.JobStatus == JobStatuses.Open)
                {
                    <span>(@Math.Round(Model.JobSummary.DistanceInMiles, 1) miles away)</span>
                }
            </span>
        </div>
        <div class="column flex-end mt-sm">
            <div class="job__info__actions">
                @switch (Model.JobSummary.JobStatus)
                {
                    case JobStatuses.Open:
                        @if (!Model.UserActingAsAdmin)
                        {
                            @if (Model.UserIsVerified)
                            {
                                <button class="btn cta large trigger-status-update-popup" data-target-state="@JobStatuses.InProgress">
                                    <span class="text">Accept</span>
                                </button>
                            }
                            else
                            {
                                <button class="btn cta large accept-request-unverified bg-gray-8">
                                    <span class="text">Accept</span>
                                </button>
                            }
                        }
                        break;
                    case JobStatuses.InProgress:
                        <button class="btn cta large trigger-status-update-popup" data-target-state="@JobStatuses.Done">
                            <span class="text">Mark as Done</span>
                        </button>
                        <button class="btn border-dark-blue dark-blue large bg-white trigger-status-update-popup" data-target-state="@JobStatuses.Open">
                            @if (Model.UserActingAsAdmin)
                            {
                                <span class="text">Mark as Open</span>
                            }
                            else
                            {
                                <span class="text">Can't do</span>
                            }
                        </button>
                        break;
                    case JobStatuses.Done:
                        if (Model.UserActingAsAdmin)
                        {
                            <button class="btn border-orange orange large bg-white trigger-status-update-popup" data-target-state="@JobStatuses.InProgress" data-target-user="@Base64Utils.Base64Encode(Model.JobSummary.VolunteerUserID.ToString())">
                                <span class="text">Not done</span>
                            </button>
                        }
                        break;
                }
                @if (Model.UserActingAsAdmin && Model.JobSummary.JobStatus != JobStatuses.Cancelled)
                {
                    <button class="btn border-orange orange large bg-white trigger-status-update-popup" data-target-state="@JobStatuses.Cancelled">
                        <span class="text">Cancel</span>
                    </button>
                }
                <button class="btn border-green green large bg-white undo-request dnone" data-target-state="@Model.JobSummary.JobStatus" data-target-user="@Base64Utils.Base64Encode(Model.JobSummary.VolunteerUserID.ToString())">
                    <span class="text">Undo</span>
                    <div class="loader dnone">
                        <partial name="_LoadingSpinner" model='new LoadingSpinnerViewModel { Text = "Undoing...", ShowDarkSpinner= true }' />
                    </div>
                </button>
            </div>
            <div class="job__info__footer">
                @if (Model.UserIsVerified)
                {
                    <a href="#" class="open">View more info <span></span></a>
                    <a href="#" class="close">View less info <span></span></a>
                }
            </div>
        </div>

    </div>
    <div class="job__detail">
        <partial name="_LoadingSpinner" model='new LoadingSpinnerViewModel() { Hide = false, ShowDarkSpinner = true }' />
    </div>
</div>
