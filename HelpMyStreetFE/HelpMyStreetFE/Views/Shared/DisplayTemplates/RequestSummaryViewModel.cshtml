@using HelpMyStreetFE.Helpers;
@using HelpMyStreet.Utils.Enums;
@using HelpMyStreet.Utils.Utils;
@using HelpMyStreet.Utils.Extensions;
@using HelpMyStreet.Utils.Models;
@using HelpMyStreetFE.Models.Account.Jobs;
@using HelpMyStreetFE.Models.Community;

@model JobViewModel<RequestSummary>

@{
    var requestId = Base64Utils.Base64Encode(Model.Item.RequestID);
    var role = Base64Utils.Base64Encode((int)Model.UserRole);
    var admin = Model.UserRole == RequestRoles.GroupAdmin;

    bool singleJob = Model.Item.JobBasics.Count() == 1;
    var jobId = singleJob ? Base64Utils.Base64Encode(Model.Item.JobBasics.First().JobID) : "";

    var className = "";
    JobSummary nextTaskDue = null;

    if (Model.Item.JobSummaries.Exists(j => j.JobStatus.Incomplete()))
    {
        nextTaskDue = Model.Item.JobSummaries.Where(j => j.JobStatus.Incomplete()).OrderBy(j => j.DueDate).First();
    }

    if (Model.Item.UnfilledJobs().Count() > 0)
    {
        if (Model.Item.Shift != null)
        {
            if (Model.Item.Shift.StartDate < DateTime.Now.AddDays(3))
            {
                className += " job--urgent";
            }

            if (Model.Item.Shift.StartDate < DateTime.Now.AddDays(7))
            {
                className += " job--due-soon";
            }
        }
        else if (nextTaskDue != null)
        {
            var dueDate = nextTaskDue.DueDate.JobDueDate(nextTaskDue.DueDateType);

            if (dueDate.Contains("urgent"))
            {
                className += " job--urgent";
            }

            if (dueDate.Contains("soon"))
            {
                className += " job--due-soon";
            }
        }
    }

    if (Model.HighlightJob)
    {
        className += " highlight";
    }
}

<div class="job @className" id="@jobId" request-id="@requestId" data-job-status="" data-role="@role">
    <div class="job__info @(admin ? "admin-view" : "")">
        <div class="job__info__col1">
            <span class="job__info__col1__status toggle-on-status-change">
                <partial name="_RequestStatus" model="@Model.Item" />
            </span>

            @if (Model.Item.JobSummaries.Exists(j => j.IsHealthCritical && j.JobStatus.Incomplete()))
            {
                <span class="job__info__col1__criticality">
                    <span class="critical-icon">!</span>
                    <span class="critical">Critical</span>
                </span>
            }

            @if (Model.JobListGroupId != Model.Item.ReferringGroupID)
            {
                <div class="job__info__col1__referrer other-group">
                    <div class="toggle-on-status-change">
                        <partial name="_GroupLogo" model="new GroupLogoViewModel { GroupId = Model.Item.ReferringGroupID }" />
                    </div>
                </div>
            }

            @if (nextTaskDue != null)
            {
                <span class="job__info__col1__urgency toggle-on-status-change">
                    <span class="" title="@nextTaskDue.DateRequested.FormatDate(DateTimeFormat.ShortDateFormat)">Requested @nextTaskDue.DateRequested.FriendlyPastDate()</span>
                    <span class="job__info__col1__urgency__dates due-date" title="@((nextTaskDue.DueDateType == DueDateType.On ? "On " : "On or before ") + nextTaskDue.DueDate.FormatDate(DateTimeFormat.ShortDateFormat))">
                        Due @nextTaskDue.DueDate.FriendlyFutureDate()
                    </span>
                </span>
            }

            <span class="job__info__col1__new-status job__status job__status__new dnone toggle-on-status-change">
            </span>
        </div>
        <div class="job__info__activity">
            @if (Model.Item.JobSummaries.Exists(j => j.IsHealthCritical && j.JobStatus.Incomplete()))
            {
                <span class="job__info__activity__criticality">
                    <span class="critical-icon">!</span>
                    <span class="critical">Critical</span>
                </span>
            }

            @foreach (SupportActivities activity in Model.Item.JobBasics.Select(a => a.SupportActivity).Distinct())
            {
                {
                    <span class="job__info__activity__title @activity.Class()">
                        @if (activity != SupportActivities.Other)
                        {
                            <img src="~/img/icons/@activity.Icon()" />
                        }
                        <span>
                            @activity.FriendlyNameShort()
                        </span>
                    </span>

                    var references = Model.Item.JobSummaries.Where(j => j.SupportActivity.Equals(activity) && !string.IsNullOrWhiteSpace(j.Reference));
                    if (references.Count() > 0)
                    {
                        <span class="job__info__activity__title @activity.Class()">
                            @($"({string.Join(", ", references)})")
                        </span>
                    }
                }
            }
            <span class="job__info__activity__location">
                @if (Model.Location != null)
                {
                    @Model.Location.LocationDetails.Name
                }
                else
                {
                    @Model.Item.PostCode
                }
            </span>
            @if (Model.Item.Shift != null)
            {
                if (Model.Item.Shift.StartDate.ToUKFromUTCTime().Date.Equals(Model.Item.Shift.EndDate.ToUKFromUTCTime().Date))
                {
                    <span class="job__info__activity__date due-date" title="@Model.Item.Shift.StartDate.FriendlyFutureDate()">@Html.Raw(Model.Item.Shift.StartDate.FormatDate(DateTimeFormat.LongDateHTMLFormat))</span>
                    <span class="job__info__activity__date due-date">@Model.Item.Shift.StartDate.FormatDate(DateTimeFormat.TimeFormat) &ndash; @Model.Item.Shift.EndDate.FormatDate(DateTimeFormat.TimeFormat)</span>
                }
                else
                {
                    <span class="job__info__activity__date due-date" title="@Model.Item.Shift.StartDate.FriendlyFutureDate()">@Html.Raw(Model.Item.Shift.StartDate.FormatDate(DateTimeFormat.LongDateTimeHTMLFormat))</span>
                    <span class="job__info__activity__date due-date">&ndash; @Html.Raw(Model.Item.Shift.EndDate.FormatDate(DateTimeFormat.LongDateTimeHTMLFormat))</span>
                }
            }
        </div>
        <div class="job__info__col3 flex-end">
            @if (Model.Item.JobSummaries.Exists(j => j.IsHealthCritical && j.JobStatus.Incomplete()))
            {
                <span class="job__info__col3__criticality">
                    <span class="critical-icon">!</span>
                    <span class="critical">Critical</span>
                </span>
            }

        <div class="job__info__actions">
            @if (singleJob)
            {
                var job = Model.Item.JobBasics.First();
                @switch (job.JobStatus)
                {
                    case JobStatuses.New:
                        <button class="btn cta trigger-status-update-popup" data-target-state="@JobStatuses.Open">
                            <span class="text">Approve</span>
                        </button>
                        break;
                    case JobStatuses.Open:
                        break;
                    case JobStatuses.InProgress:
                        <button class="btn cta trigger-status-update-popup" data-target-state="@JobStatuses.Done">
                            <span class="text">Mark as Done</span>
                        </button>
                        <button class="btn cta--dark-blue-border trigger-status-update-popup" data-target-state="@JobStatuses.Open">
                            <span class="text">Mark as Open</span>
                        </button>
                        break;
                    case JobStatuses.Done:
                        <div class="feedback-container">
                            <span class="job__info__col3__status toggle-on-status-change">
                                <img class="status-icon" src="~/img/icons/status/@job.JobStatus.Icon()" alt="@job.JobStatus.FriendlyName()" />
                                <span class="job__status">@job.JobStatus.FriendlyName()</span>
                            </span>
                        </div>
                        if (!(Model.Item.JobSummaries?.First().Archive ?? false))
                        {
                            <button class="btn cta--orange-border trigger-status-update-popup" data-target-state="@JobStatuses.InProgress" data-target-user="@Base64Utils.Base64Encode(job.VolunteerUserID.ToString())">
                                <span class="text">Not done</span>
                            </button>
                        }
                        break;
                    case JobStatuses.Cancelled:
                        <div class="feedback-container"></div>
                        break;
                }
                @if (job.JobStatus != JobStatuses.Cancelled && !(Model.Item.JobSummaries?.First().Archive ?? false))
                {
                    <button class="btn cta--orange-border trigger-status-update-popup" data-target-state="@JobStatuses.Cancelled">
                        <span class="text">Cancel</span>
                    </button>
                }
                <button class="btn cta--green-border undo-request dnone" data-target-state="@job.JobStatus" data-target-user="@(job.VolunteerUserID.HasValue ? Base64Utils.Base64Encode(job.VolunteerUserID.Value) : "")">
                    <span class="text">Undo</span>
                    <div class="loader dnone">
                        <partial name="_LoadingSpinner" model='new LoadingSpinnerViewModel { Text = "Undoing...", ShowDarkSpinner= true }' />
                    </div>
                </button>
            }
            else if (Model.Item.SingleJobStatus() != JobStatuses.Cancelled)
            {
                <button class="btn cta--orange-border trigger-status-update-popup" data-target-state="@JobStatuses.Cancelled">
                    <span class="text">Cancel @(Model.Item.RequestType.Equals(RequestType.Shift) ? "shift" : "")</span>
                </button>
            }
        </div>
            <div class="job__info__footer">
                <a href="#" class="open">View more info <span></span></a>
                <a href="#" class="close">View less info <span></span></a>
            </div>
        </div>

    </div>
    <div class="job__detail">
        <partial name="_LoadingSpinner" model='new LoadingSpinnerViewModel() { Hide = false, ShowDarkSpinner = true }' />
    </div>
</div>
