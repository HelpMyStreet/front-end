@using HelpMyStreetFE.Helpers;
@using HelpMyStreet.Utils.Enums;
@using HelpMyStreet.Utils.Utils;
@using HelpMyStreet.Utils.Extensions;
@using HelpMyStreet.Utils.Models;
@using HelpMyStreetFE.Models.Account.Jobs;
@using HelpMyStreetFE.Models.Community;

@model JobViewModel<RequestSummary>

@{
    var requestId = Base64Utils.Base64Encode(Model.Item.Shift.RequestID);
    var role = Base64Utils.Base64Encode((int)Model.UserRole);
    var admin = Model.UserRole == RequestRoles.GroupAdmin;

    var className = "";

    if (Model.Item.Unfilled())
    {
        if (Model.Item.Shift.StartDate < DateTime.Now.AddDays(3))
        {
            className += " job--urgent";
        }

        if (Model.Item.Shift.StartDate < DateTime.Now.AddDays(7))
        {
            className += " job--due-soon";
        }
    }

    if (Model.HighlightJob)
    {
        className += " highlight";
    }
}

<div class="job @className" id="" request-id="@requestId" data-job-status="" data-role="@role">
    <div class="job__info @(admin ? "admin-view" : "")">
        <div class="job__info__col1">
            <span class="job__info__col1__status toggle-on-status-change">
                <partial name="_RequestStatus" model="@Model.Item" />
            </span>

            @if (Model.JobListGroupId != Model.Item.ReferringGroupID)
            {
                <div class="job__info__col1__referrer other-group">
                    <div class="toggle-on-status-change">
                        <partial name="_GroupLogo" model="new GroupLogoViewModel { GroupId = Model.Item.ReferringGroupID }" />
                    </div>
                </div>
            }


            <span class="job__info__col1__new-status job__status job__status__new dnone toggle-on-status-change">
            </span>
        </div>
        <div class="job__info__activity">
            @foreach (SupportActivities activity in Model.Item.JobSummaries.Select(a => a.SupportActivity).Distinct())
            {
                {
                    <span class="job__info__activity__title @activity.Class()">
                        @if (activity != SupportActivities.Other)
                        {
                            <img src="~/img/icons/@activity.Icon()" />
                        }
                        <span>
                            @activity.FriendlyNameShort()
                        </span>
                    </span>
                }
            }
            <span class="job__info__activity__location">
                @Model.Location.LocationDetails.Name
            </span>
            @if (Model.Item.Shift.StartDate.ToUKFromUTCTime().Date.Equals(Model.Item.Shift.EndDate.ToUKFromUTCTime().Date))
            {
                <span class="job__info__activity__date due-date" title="@Model.Item.Shift.StartDate.FriendlyFutureDate()">@Html.Raw(Model.Item.Shift.StartDate.FormatDate(DateTimeFormat.LongDateHTMLFormat))</span>
                <span class="job__info__activity__date due-date">@Model.Item.Shift.StartDate.FormatDate(DateTimeFormat.TimeFormat) &ndash; @Model.Item.Shift.EndDate.FormatDate(DateTimeFormat.TimeFormat)</span>
            }
            else
            {
                <span class="job__info__activity__date due-date" title="@Model.Item.Shift.StartDate.FriendlyFutureDate()">@Html.Raw(Model.Item.Shift.StartDate.FormatDate(DateTimeFormat.LongDateTimeHTMLFormat))</span>
                <span class="job__info__activity__date due-date">&ndash; @Html.Raw(Model.Item.Shift.EndDate.FormatDate(DateTimeFormat.LongDateTimeHTMLFormat))</span>
            }
        </div>
        <div class="job__info__col3 flex-end">
            <div class="job__info__actions">
                @if (Model.Item.SingleJobStatus() != JobStatuses.Cancelled)
                {
                    <button class="btn cta--orange-border trigger-status-update-popup" data-target-state="@JobStatuses.Cancelled">
                        <span class="text">Cancel shift</span>
                    </button>
                }
            </div>
            <div class="job__info__footer">
                <a href="#" class="open">View more info <span></span></a>
                <a href="#" class="close">View less info <span></span></a>
            </div>
        </div>

    </div>
    <div class="job__detail">
        <partial name="_LoadingSpinner" model='new LoadingSpinnerViewModel() { Hide = false, ShowDarkSpinner = true }' />
    </div>
</div>
