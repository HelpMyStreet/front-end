@using HelpMyStreetFE.Helpers;
@using HelpMyStreet.Utils.Enums;

@model HelpMyStreetFE.Models.Account.Jobs.JobDetailViewModel

@{
    var AgeUk = Model.JobDetail.JobSummary.SupportActivity == SupportActivities.WellbeingPackage;
    var Hlp = Model.JobDetail.JobSummary.SupportActivity == SupportActivities.CommunityConnector;

    var forFaceMask = Model.JobDetail.JobSummary.SupportActivity == SupportActivities.FaceMask;
    var userDetailsNotProvidedText = AgeUk ? "None provided - contact Age UK using Requester Details" : "None Provided";
}


@if (Model.JobDetail.JobSummary.JobStatus == JobStatuses.InProgress || Model.UserActingAsAdmin)
{
    <h4>Contact Details</h4>
    <div class="job__expander">
        <h5>Recipient<span></span></h5>
        <dl>
            @if (!string.IsNullOrEmpty(Model.JobDetail.JobSummary.RecipientOrganisation))
            {
                <dt>Organisation</dt>
                <dd>@Model.JobDetail.JobSummary.RecipientOrganisation</dd>
            }
            @if (@Model.JobDetail.Recipient != null)
            {
                var twoPhoneNumbers = !String.IsNullOrEmpty(Model.JobDetail.Recipient.OtherNumber) && !String.IsNullOrEmpty(Model.JobDetail.Recipient.MobileNumber);
                <dt>Name</dt>
                <dd>@Model.JobDetail.Recipient.FirstName @Model.JobDetail.Recipient.LastName</dd>
                <dt>Email</dt>
                <dd>@(string.IsNullOrEmpty(Model.JobDetail.Recipient.EmailAddress) ? userDetailsNotProvidedText : Model.JobDetail.Recipient.EmailAddress) </dd>
                <dt>@(twoPhoneNumbers ? "Phone numbers" : "Phone number")</dt>
                <dd>
                    @if (String.IsNullOrEmpty(Model.JobDetail.Recipient.MobileNumber) && String.IsNullOrEmpty(Model.JobDetail.Recipient.OtherNumber))
                    {
                        @userDetailsNotProvidedText
                    }
                    else
                    {
                        @Model.JobDetail.Recipient.MobileNumber @(twoPhoneNumbers ? " / " : "") @Model.JobDetail.Recipient.OtherNumber
                    }
                </dd>
                <dt>Address</dt>
                <dd>
                    @Html.DisplayFor(x => Model.JobDetail.Recipient.Address, new { MaskAddress = AgeUk || Hlp })
                </dd>
            }
        </dl>
    </div>
    @if (Model.JobDetail.Requestor != null)
    {
        <div class="job__expander">
            <h5>Requester<span></span></h5>
            @if (Model.JobDetail.JobSummary.RequestorType == RequestorType.Myself)
            {
                <p><i>Request made by recipient </i></p>
            }
            else
            {
                var twoPhoneNumbers = !String.IsNullOrEmpty(Model.JobDetail.Requestor.OtherNumber) && !String.IsNullOrEmpty(Model.JobDetail.Requestor.MobileNumber);
                <dl>
                    <dt>Name</dt>
                    <dd>@Model.JobDetail.Requestor.FirstName @Model.JobDetail.Requestor.LastName</dd>
                    <dt>Email</dt>
                    <dd>@Model.JobDetail.Requestor.EmailAddress</dd>
                    <dt>@(twoPhoneNumbers ? "Phone numbers" : "Phone number")</dt>
                    <dd>@Model.JobDetail.Requestor.MobileNumber @twoPhoneNumbers ? " / " : "") @Model.JobDetail.Requestor.OtherNumber</dd>
                    <dt>Address</dt>
                    <dd>
                        @Model.JobDetail.Requestor.Address.Postcode
                    </dd>
                </dl>
            }
        </div>
    }
    @if (Model.UserActingAsAdmin && Model.JobDetail.CurrentVolunteer != null)
    {
        var volunteerDetails = Model.JobDetail.CurrentVolunteer.UserPersonalDetails;
        var twoPhoneNumbers = !String.IsNullOrEmpty(volunteerDetails.OtherPhone) && !String.IsNullOrEmpty(volunteerDetails.MobilePhone);
        <div class="job__expander">
            <h5>Volunteer<span></span></h5>
            <dl>
                <dt>Name</dt>
                <dd>@volunteerDetails.DisplayName (@volunteerDetails.FirstName @volunteerDetails.LastName)</dd>
                <dt>Email</dt>
                <dd>@volunteerDetails.EmailAddress</dd>
                <dt>@(twoPhoneNumbers ? "Phone numbers" : "Phone number")</dt>
                <dd>@volunteerDetails.MobilePhone @(twoPhoneNumbers ? " / " : "") @volunteerDetails.OtherPhone</dd>
            </dl>
        </div>
    }
    <h4>Request Details</h4>

    @foreach (var question in Model.JobDetail.JobSummary.Questions)
    {

        if (question.ShowOnTaskManagement())
        {
            <div class="job__expander">
                <h5>@question.FriendlyName()<span></span></h5>
                <p> @(String.IsNullOrEmpty(question.Answer) ? "None entered" : question.Answer)</p>
            </div>
        }
    }
}
else if (Model.UserIsVerified)
{
    @if (!string.IsNullOrEmpty(Model.JobDetail.JobSummary.RecipientOrganisation))
    {
        <h4>Organisation</h4>
        <p>@Model.JobDetail.JobSummary.RecipientOrganisation</p>
    }

    foreach (var question in Model.JobDetail.JobSummary.Questions)
    {

        if (question.ShowOnTaskManagement())
        {
            <h4>@question.FriendlyName()</h4>
            <p> @(String.IsNullOrEmpty(question.Answer) ? "None entered" : question.Answer)</p>
        }
    }
}
@if (Model.UserActingAsAdmin)
{
    <h4>Request Status History</h4>

    @foreach (var statusChange in Model.JobDetail.JobStatusHistory)
    {
        <ul>
            <li>@statusChange.StatusDate - @statusChange.JobStatus</li>
        </ul>
    }
}
