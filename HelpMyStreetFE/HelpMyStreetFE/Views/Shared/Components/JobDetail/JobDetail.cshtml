@using HelpMyStreetFE.Helpers;
@using HelpMyStreet.Utils.Enums;
@using HelpMyStreet.Utils.Extensions;
@using HelpMyStreet.Utils.Utils;
@using Westwind.AspNetCore.Markdown

@model HelpMyStreetFE.Models.Account.Jobs.JobDetailViewModel

@{
    if (Model.ToPrint)
    {
        Layout = "_LayoutPrint";
    }

    var jobSummary = Model.JobDetail.JobSummary;
    var requestSummary = Model.JobDetail.RequestSummary;

    var AgeUk = jobSummary.SupportActivity == SupportActivities.WellbeingPackage;
    var Hlp = jobSummary.SupportActivity == SupportActivities.CommunityConnector;

    var forFaceMask = jobSummary.SupportActivity == SupportActivities.FaceMask;
    var userDetailsNotProvidedText = AgeUk ? "None provided - contact Age UK using Requester Details" : "None Provided";

    var showSensitiveData = jobSummary.JobStatus == JobStatuses.InProgress || Model.UserActingAsAdmin;
    var questionsToDisplay = jobSummary.Questions.Where(q => q.ShowOnTaskManagement(showSensitiveData) && !string.IsNullOrEmpty(q.Answer));
    var encodedJobID = Base64Utils.Base64Encode(jobSummary.JobID);
}

@if (Model.ToPrint)
{
    <h4>@jobSummary.SupportActivity.FriendlyNameShort()</h4>
    @if (!String.IsNullOrEmpty(jobSummary.RecipientOrganisation))
    {
        <h4>Group Name: @jobSummary.RecipientOrganisation </h4>
    }
}

@if (jobSummary.JobStatus.Incomplete())
{
    <div class="job__expander">
        <div class="row">
            <div class="sm12">
                <dl>
                    @if (jobSummary.RequestType == RequestType.Shift)
                    {
                        <dt>When is the help needed?</dt>
                        if (requestSummary.Shift.StartDate.Date.Equals(requestSummary.Shift.EndDate.Date))
                        {
                            <dd>This shift occurs on <strong>@requestSummary.Shift.StartDate.ToString("dddd dnn MMMM", true)</strong> between <strong>@requestSummary.Shift.StartDate.ToString("HH:mm") - @requestSummary.Shift.EndDate.ToString("HH:mm")</strong>.</dd>
                        }
                        else
                        {
                <dd>This shift starts on <strong>@requestSummary.Shift.StartDate.ToString("dddd dnn MMMM", true)</strong> at <strong>@requestSummary.Shift.StartDate.ToString("HH:mm", true)</strong> and ends <strong>@requestSummary.Shift.EndDate.ToString("dddd dnn MMMM", true)</strong> at <strong>@requestSummary.Shift.EndDate.ToString("HH:mm", true)</strong>.</dd>
                        }
                        @*<dd>Download calendar event <a href="/account/get-shift-calendar?j=@encodedJobID">here</a></dd>*@
                        <div class="location-details">
                            <dt>Where is the shift?</dt>

                            <dd>
                                <div>
                                    @Model.LocationDetails.Name<br />
                                    @Html.DisplayFor(m => m.LocationDetails.Address)
                                </div>
                                <div class="location-map" id="map-@encodedJobID" style="width:75%; height:150px" data-lat="@Model.LocationDetails.Latitude" data-lng="@Model.LocationDetails.Longitude"></div>
                            </dd>
                        </div>
                    }
                    else
                    {
                        @if (!Model.ToPrint)
                        {
                            <dt>When is the help needed?</dt>
                        }
                        @if (jobSummary.DueDays < 0)
                        {
                            if (jobSummary.JobStatus == JobStatuses.Open)
                            {
                                <dd>This request is now <strong>overdue</strong>. If you accept the request please get in touch with the help recipient urgently to see if they still need support.</dd>
                            }
                            else
                            {
                                <dd>This request is now <strong>overdue</strong>. Please get in touch with the help recipient urgently to see if they still need support.</dd>
                            }
                        }
                        else if (jobSummary.DueDateType == DueDateType.On)
                        {
                            <dd>This request should be completed on <strong>@(jobSummary.DueDate.ToString("dddd dnn MMMM", true))</strong>; the person who requested the help would prefer it on this date.</dd>
                        }
                        else if (jobSummary.DueDays == 0)
                        {
                            if (jobSummary.JobStatus == JobStatuses.Open)
                            {
                                <dd>This request is due <strong>today</strong>. If you accept the request please get in touch with the help recipient urgently to arrange the support they need.</dd>
                            }
                            else
                            {
                                <dd>This request is due <strong>today</strong>. Please get in touch with the help recipient urgently to arrange the support they need.</dd>
                            }
                        }
                        else
                        {
                            <dd>You can complete this request <strong>any time on or before @(jobSummary.DueDate.ToString("dddd dnn MMMM", true))</strong></dd>
                        }
                    }
                </dl>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(Model.GroupSupportActivityInstructions.ActivityDetails))
{
    <div class="job__expander">
        <h4>Request Details<span></span></h4>
        <div class="job__expander__content">
            <div class="row">
                <div class="sm12">
                    @Markdown.ParseHtmlString(Model.GroupSupportActivityInstructions.ActivityDetails)
                </div>
            </div>
        </div>
    </div>
}

@if (jobSummary.JobStatus == JobStatuses.Accepted || jobSummary.JobStatus == JobStatuses.InProgress || jobSummary.JobStatus == JobStatuses.Done || Model.UserActingAsAdmin)
{
    @if (!Model.ToPrint)
    {
        <div class="job__expander">
            <h4>Contact Details<span></span></h4>
            <div class="job__expander__content">
                <div class="row">
                    @if (jobSummary.Archive ?? false)
                    {
                        <div class="sm12">
                            <h5>Recipient</h5>
                            <dl>
                                <dd><i>The @(jobSummary.RequestorType != RequestorType.Myself ? "requestor and" : "" ) recipient contact details for this request have been archived.</i></dd>
                                @if (!string.IsNullOrEmpty(jobSummary.RecipientOrganisation))
                                {
                                    <dt>Organisation</dt>
                                    <dd>@jobSummary.RecipientOrganisation</dd>
                                }
                            </dl>
                        </div>
                        @if (Model.UserActingAsAdmin && Model.JobDetail.CurrentVolunteer != null)
                        {
                            var volunteerDetails = Model.JobDetail.CurrentVolunteer.UserPersonalDetails;
                            <div class="sm12">
                                <h5>Volunteer</h5>
                                <dl>
                                    <dd>@volunteerDetails.DisplayName</dd>
                                </dl>
                            </div>
                        }
                    }
                    else
                    {
                        @if (!string.IsNullOrEmpty(jobSummary.RecipientOrganisation) || Model.JobDetail.Recipient != null)
                        {
                            <div class="sm6">
                                <h5>Recipient</h5>
                                <dl>
                                    @if (!string.IsNullOrEmpty(jobSummary.RecipientOrganisation))
                                    {
                                        <dt>Organisation</dt>
                                        <dd>@jobSummary.RecipientOrganisation</dd>
                                    }
                                    @if (@Model.JobDetail.Recipient != null)
                                    {
                                        <dt>Name</dt>
                                        <dd>@Model.JobDetail.Recipient.FirstName @Model.JobDetail.Recipient.LastName</dd>
                                        <dt>Email</dt>
                                        <dd>@(string.IsNullOrEmpty(Model.JobDetail.Recipient.EmailAddress) ? userDetailsNotProvidedText : Model.JobDetail.Recipient.EmailAddress) </dd>
                                        <dt>@(Model.JobDetail.Recipient.PhoneNumbers().Count() > 1 ? "Phone numbers" : "Phone number")</dt>
                                        <dd>
                                            @if (String.IsNullOrEmpty(Model.JobDetail.Recipient.MobileNumber) && String.IsNullOrEmpty(Model.JobDetail.Recipient.OtherNumber))
                                            {
                                                @userDetailsNotProvidedText
                                            }
                                            else
                                            {
                                                @string.Join(" / ", Model.JobDetail.Recipient.PhoneNumbers())
                                            }
                                        </dd>
                                        <dt>Address</dt>
                                        <dd>
                                            @Html.DisplayFor(x => Model.JobDetail.Recipient.Address, new { MaskAddress = AgeUk || Hlp })
                                        </dd>
                                    }
                                </dl>
                            </div>
                        }
                        @if (Model.UserActingAsAdmin && Model.JobDetail.CurrentVolunteer != null)
                        {
                            var volunteerDetails = Model.JobDetail.CurrentVolunteer.UserPersonalDetails;
                            <div class="sm6">
                                <h5>Volunteer</h5>
                                <dl>
                                    <dt>Name</dt>
                                    <dd>@volunteerDetails.DisplayName (@volunteerDetails.FirstName @volunteerDetails.LastName)</dd>
                                    <dt>Email</dt>
                                    <dd>@volunteerDetails.EmailAddress</dd>
                                    <dt>@(volunteerDetails.PhoneNumbers().Count() > 1 ? "Phone numbers" : "Phone number")</dt>
                                    <dd>@string.Join(" / ", volunteerDetails.PhoneNumbers())</dd>
                                    <dt>Address</dt>
                                    <dd>
                                        @volunteerDetails.LocationSummary()
                                    </dd>
                                </dl>
                            </div>
                        }
                        @if (Model.JobDetail.Requestor != null && jobSummary.RequestorType != RequestorType.Myself)
                        {
                            <div class="sm6">
                                <h5>Requester</h5>
                                <dl>
                                    <dt>Name</dt>
                                    <dd>@Model.JobDetail.Requestor.FirstName @Model.JobDetail.Requestor.LastName</dd>
                                    <dt>Email</dt>
                                    <dd>@Model.JobDetail.Requestor.EmailAddress</dd>
                                    <dt>@(Model.JobDetail.Requestor.PhoneNumbers().Count() > 1 ? "Phone numbers" : "Phone number")</dt>
                                    <dd>@string.Join(" / ", Model.JobDetail.Requestor.PhoneNumbers())</dd>
                                    <dt>Address</dt>
                                    <dd>
                                        @Model.JobDetail.Requestor.Address.Postcode
                                    </dd>
                                </dl>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    }

    @if (questionsToDisplay.Count() > 0)
    {
        <div class="job__expander">
            <h4>Request Details<span></span></h4>
            <div class="job__expander__content">
                <div class="row">
                    <div class="sm12">
                        @foreach (var q in questionsToDisplay.OrderBy(q => q.TaskManagementDisplayOrder()))
                        {
                            <dl>
                                <dt>@q.FriendlyName()</dt>
                                <dd>@Html.Raw(q.Answer.ToHtmlSafeStringWithLineBreaks())</dd>
                            </dl>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    @if (jobSummary.JobStatus == JobStatuses.Accepted || jobSummary.JobStatus == JobStatuses.InProgress)
    {
        <div class="job__expander">
            <h4>Volunteer Instructions<span></span></h4>
            <div class="job__expander__content">
                <div class="row">
                    <div class="sm12 volunteer-instructions">
                        <partial name="_GroupSupportActivityInstructions" model="Model.GroupSupportActivityInstructions" />
                    </div>
                </div>
            </div>
        </div>
    }
    @if (!Model.UserActingAsAdmin && questionsToDisplay.Count() > 0 && jobSummary.JobStatus == JobStatuses.InProgress && !Model.ToPrint)
    {
        <div class="job__expander offline-details-container">
            <div class="row">
                <div class="sm12 offline-details">
                    <dl>
                        <dt>Do you need to take these details offline?</dt>
                        <dd>
                            For data protection reasons, you'll only be able to view non-personal information.
                            <span class="link-icons">
                                <a href="#" title="" class="email-details"><img src="/img/icons/email.svg" /><span>Email </span></a>
                                <a href="/account/print-job-details?j=@encodedJobID" target="_blank"><img src="/img/icons/printer.svg" /> Print </a>
                            </span>
                        </dd>
                    </dl>
                </div>
            </div>
        </div>
    }
}
else if (!string.IsNullOrEmpty(jobSummary.RecipientOrganisation) || questionsToDisplay.Count() > 0)
{
    <div class="job__expander">
        <div class="row">
            <div class="sm12">
                @if (!string.IsNullOrEmpty(jobSummary.RecipientOrganisation))
                {
                    <dl>
                        <dt>Organisation</dt>
                        <dd>@jobSummary.RecipientOrganisation</dd>
                    </dl>
                }

                @foreach (var q in questionsToDisplay)
                {
                    <dl>
                        <dt>@q.FriendlyName()</dt>
                        <dd>@Html.Raw(q.Answer.ToHtmlSafeStringWithLineBreaks())</dd>
                    </dl>
                }
            </div>
        </div>
    </div>
}

@if (Model.UserActingAsAdmin && !Model.ToPrint)
{
    <div class="job__expander">
        <h4>Request Status History<span></span></h4>
        <div class="job__expander__content">
            <div class="row">
                <div class="sm12">
                    <dl class="highlight-last">
                        @foreach (var statusChange in Model.JobDetail.JobStatusHistory)
                        {
                            <dt>
                                @statusChange.JobStatusDescription
                                @if (statusChange.VolunteerUser != null)
                                {
                                    <span class="context">
                                        @(statusChange.StatusHistory.JobStatus == JobStatuses.InProgress ? "with" : "by")
                                        @statusChange.VolunteerUser.UserPersonalDetails.FullName()
                                    </span>
                                }
                            </dt>
                            <dd>
                                @statusChange.StatusHistory.StatusDate.ToString("dd/MM/yyyy h:mm tt").ToLower()
                            </dd>
                        }
                    </dl>
                </div>
            </div>
        </div>
    </div>
}

@if (Model.ToPrint)
{
    <script>window.print();</script>
}
