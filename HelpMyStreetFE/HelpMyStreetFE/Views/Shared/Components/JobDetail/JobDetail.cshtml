@using HelpMyStreetFE.Helpers;
@using HelpMyStreet.Utils.Enums;
@using HelpMyStreet.Utils.Extensions;
@using HelpMyStreet.Utils.Utils;
@using HelpMyStreetFE.Models.Account.Jobs;
@using HelpMyStreet.Utils.Models;
@using Westwind.AspNetCore.Markdown

@model JobDetailViewModel

@{
    if (Model.ToPrint)
    {
        Layout = "_LayoutPrint";
    }

    var jobSummary = Model.JobDetail.Item;
    var requestSummary = Model.JobDetail.Item.RequestSummary;

    var recipient = Model.JobDetail.Item.Recipient;
    var requestor = Model.JobDetail.Item.Requestor;
    var currentVolunteer = Model.JobDetail.Item.CurrentVolunteer;

    var userActingAsAdmin = Model.JobDetail.UserRole.Equals(RequestRoles.GroupAdmin);

    var AgeUk = jobSummary.SupportActivity == SupportActivities.WellbeingPackage;
    var Hlp = jobSummary.SupportActivity == SupportActivities.CommunityConnector;

    var forFaceMask = jobSummary.SupportActivity == SupportActivities.FaceMask;
    var userDetailsNotProvidedText = AgeUk ? "None provided - contact Age UK using Requester Details" : "None Provided";

    var questionsToDisplay = jobSummary.Questions.Where(q => q.ShowOnTaskManagement(userActingAsAdmin, jobSummary.JobStatus == JobStatuses.InProgress) && !string.IsNullOrEmpty(q.Answer));
    var encodedJobID = Base64Utils.Base64Encode(jobSummary.JobID);

    var userDetailsHidden = Model.JobDetail.Item.SuppressRecipientPersonalDetail.GetValueOrDefault(false) && !userActingAsAdmin;

    var userDetailsHiddenText = $"The organisation managing this request would like to provide this information to you directly. Please contact the requester quoting reference {jobSummary.HmsReference} to find out who needs the help.";
}

@if (Model.ToPrint)
{
    <h4>@jobSummary.SupportActivity.FriendlyNameShort()</h4>
    @if (!String.IsNullOrEmpty(jobSummary.RecipientOrganisation))
    {
        <h4>Group Name: @jobSummary.RecipientOrganisation </h4>
    }
}

@if (jobSummary.JobStatus.Incomplete())
{
    <div class="job__expander">
        <div class="row">
            <div class="sm12">
                <dl>
                    <partial name="_WhenIsHelpNeeded" model="@Model.JobDetail.Item" />

                    @if (jobSummary.RequestType == RequestType.Shift)
                    {
                        <div class="location-details">
                            <dt>Where is the shift?</dt>

                            <dd>
                                <div>
                                    @Html.DisplayFor(m => m.JobDetail.Location.LocationDetails.Address)
                                    <span class="distance">(@Model.JobDetail.Location.Distance.ToString("0.0") miles away)</span>
                                </div>
                                <div class="location-map" id="map-@encodedJobID" style="width:75%; height:150px" data-lat="@Model.JobDetail.Location.LocationDetails.Latitude" data-lng="@Model.JobDetail.Location.LocationDetails.Longitude"></div>
                            </dd>
                        </div>
                    }
                    @if (requestSummary.JobBasics.UnfilledJobs().Count() > 1)
                    {
                        var total = requestSummary.JobBasics.IncompleteJobs().Count();
                        var unfilled = requestSummary.JobBasics.UnfilledJobs().Count();
                        var filled = total - unfilled;
                        <dt>How many volunteers are needed?</dt>
                        <dd>
                            This help request requires <strong>@total</strong> volunteers.
                            <strong>@filled</strong> @(filled == 1 ? "place has" : "places have") been filled
                            (<strong>@unfilled</strong> remaining).
                        </dd>
                    }
                </dl>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(Model.GroupSupportActivityInstructions.ActivityDetails) || !string.IsNullOrEmpty(jobSummary.RecipientOrganisation) || questionsToDisplay.Count() > 0)
{
    <div class="job__expander">
        <h4>Request Details<span></span></h4>
        <div class="job__expander__content">
            @if (!string.IsNullOrEmpty(Model.GroupSupportActivityInstructions.ActivityDetails)) { 
            <div class="row">
                <div class="sm12">
                    @Markdown.ParseHtmlString(Model.GroupSupportActivityInstructions.ActivityDetails)
                </div>
            </div>
            }
            @if (!string.IsNullOrEmpty(jobSummary.RecipientOrganisation) || questionsToDisplay.Count() > 0)
            {
                <div class="row">
                    <div class="sm12">
                        @if (!string.IsNullOrEmpty(jobSummary.RecipientOrganisation))
                        {
                            <dl>
                                <dt>Organisation</dt>
                                <dd>@jobSummary.RecipientOrganisation</dd>
                            </dl>
                        }

                        @foreach (var q in questionsToDisplay.OrderBy(q => q.TaskManagementDisplayOrder()))
                        {
                            <dl>
                                <dt>@q.FriendlyName()</dt>
                                <dd>@Html.Raw(q.Answer.ToHtmlSafeStringWithLineBreaks())</dd>
                            </dl>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
}

@if (jobSummary.JobStatus == JobStatuses.Accepted || jobSummary.JobStatus == JobStatuses.InProgress || jobSummary.JobStatus == JobStatuses.Done || userActingAsAdmin)
{
    @if (!Model.ToPrint)
    {
        <div class="job__expander">
            <h4>Contact Details<span></span></h4>
            <div class="job__expander__content">
                <div class="row">
                    @if (jobSummary.Archive)
                    {
                        <div class="sm12">
                            <h5>Recipient</h5>
                            <dl>
                                <dd><i>The @(jobSummary.RequestorType != RequestorType.Myself ? "requestor and" : "" ) recipient contact details for this request have been archived.</i></dd>
                                @if (!string.IsNullOrEmpty(jobSummary.RecipientOrganisation))
                                {
                                    <dt>Organisation</dt>
                                    <dd>@jobSummary.RecipientOrganisation</dd>
                                }
                            </dl>
                        </div>
                        @if (userActingAsAdmin && currentVolunteer != null)
                        {
                            var volunteerDetails = Model.JobDetail.Item.CurrentVolunteer.UserPersonalDetails.DisplayName;
                            <div class="sm12">
                                <h5>Volunteer</h5>
                                <dl>
                                    <dd>@volunteerDetails</dd>
                                </dl>
                            </div>
                        }
                    }
                    else if (userDetailsHidden)
                    {
                <div class="sm12">
                    <h5>Recipient</h5>
                    <dl>
                        <dd>@userDetailsHiddenText</dd>
                    </dl>
                    <partial name="_PersonalDetails" model="new PersonalDetailsView {
                                     PersonalDetails = Model.JobDetail.Item.Requestor.GetDPSafePersonalDetails(Model.JobDetail.Item.SupportActivity.PersonalDetailsComponent(RequestRoles.Requestor, userActingAsAdmin)),
                                     RecipientOrganisation = null,
                                     RequestRole = RequestRoles.Requestor
                                      }" />
                </div>
                    }
                    else
                    {
                        @if (!string.IsNullOrEmpty(jobSummary.RecipientOrganisation) || recipient != null)
                        {
                            <partial name="_PersonalDetails" model="new PersonalDetailsView {
                                     PersonalDetails = Model.JobDetail.Item.Recipient.GetDPSafePersonalDetails(Model.JobDetail.Item.SupportActivity.PersonalDetailsComponent(RequestRoles.Recipient, userActingAsAdmin)),
                                     RecipientOrganisation = jobSummary.RecipientOrganisation,
                                     RequestRole = RequestRoles.Recipient
                                      }" />
                        }
                        @if (userActingAsAdmin && currentVolunteer != null)
                        {
                            <partial name="_PersonalDetails" model="new PersonalDetailsView {
                                     PersonalDetails = (PersonalDetails) Model.JobDetail.Item.CurrentVolunteer.UserPersonalDetails.GetDPSafeUserPersonalDetails(Model.JobDetail.Item.SupportActivity.PersonalDetailsComponent(RequestRoles.Volunteer, userActingAsAdmin)),
                                     RecipientOrganisation = null,
                                     RequestRole = RequestRoles.Volunteer
                                      }" />
                        }
                        @if (requestor != null && jobSummary.RequestorType != RequestorType.Myself)
                        {
                            <partial name="_PersonalDetails" model="new PersonalDetailsView {
                                     PersonalDetails = Model.JobDetail.Item.Requestor.GetDPSafePersonalDetails(Model.JobDetail.Item.SupportActivity.PersonalDetailsComponent(RequestRoles.Requestor, userActingAsAdmin)),
                                     RecipientOrganisation = null,
                                     RequestRole = RequestRoles.Requestor
                                      }" />
                        }
                    }
                </div>
            </div>
        </div>
    }



    @if (jobSummary.JobStatus == JobStatuses.Accepted || jobSummary.JobStatus == JobStatuses.InProgress)
    {
        <div class="job__expander">
            <h4>Volunteer Instructions<span></span></h4>
            <div class="job__expander__content">
                <div class="row">
                    <div class="sm12 volunteer-instructions">
                        <partial name="_GroupSupportActivityInstructions" model="Model.GroupSupportActivityInstructions" />
                    </div>
                </div>
            </div>
        </div>
    }
    @if (!userActingAsAdmin && questionsToDisplay.Count() > 0 && jobSummary.JobStatus == JobStatuses.InProgress && !Model.ToPrint)
    {
        <div class="job__expander offline-details-container">
            <div class="row">
                <div class="sm12 offline-details">
                    <dl>
                        <dt>Do you need to take these details offline?</dt>
                        <dd>
                            For data protection reasons, you'll only be able to view non-personal information.
                            <span class="link-icons">
                                <a href="#" title="" class="email-details"><img src="/img/icons/email.svg" /><span>Email </span></a>
                                <a href="/account/print-job-details?j=@encodedJobID" target="_blank"><img src="/img/icons/printer.svg" /> Print </a>
                            </span>
                        </dd>
                    </dl>
                </div>
            </div>
        </div>
    }
}

@if (userActingAsAdmin && !Model.ToPrint)
{
    <div class="job__expander">
        <h4>Request Status History<span></span></h4>
        <div class="job__expander__content">
            <div class="row">
                <div class="sm12">
                    <dl class="highlight-last">
                        @foreach (var statusChange in Model.JobDetail.Item.JobStatusHistory)
                        {
                            <dt>
                                @statusChange.JobStatusDescription
                                @if (statusChange.VolunteerUser != null)
                                {
                                    <span class="context">
                                        @(statusChange.StatusHistory.JobStatus == JobStatuses.InProgress ? "with" : "by")
                                        @statusChange.VolunteerUser.UserPersonalDetails.FullName()
                                    </span>
                                }
                            </dt>
                            <dd>
                                @statusChange.StatusHistory.StatusDate.FormatDate(DateTimeFormat.ShortDateTimeFormat)
                            </dd>
                        }
                    </dl>
                </div>
            </div>
        </div>
    </div>
}

@if (Model.ToPrint)
{
    <script>window.print();</script>
}
