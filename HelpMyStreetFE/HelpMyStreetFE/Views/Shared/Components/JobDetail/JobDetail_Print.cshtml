@using HelpMyStreetFE.Helpers;
@using HelpMyStreet.Utils.Enums;
@using HelpMyStreet.Utils.Extensions;
@using HelpMyStreet.Utils.Utils;
@using HelpMyStreetFE.Models.Account.Jobs;
@using Westwind.AspNetCore.Markdown

@model JobDetailViewModel

@{
    Layout = "_LayoutPrint";

    var jobSummary = Model.JobDetail.Item;
    var requestSummary = Model.JobDetail.Item.RequestSummary;

    var questionsToDisplay = jobSummary.Questions?.Where(q => q.ShowOnTaskManagement(false, jobSummary.JobStatus == JobStatuses.InProgress) && !string.IsNullOrEmpty(q.Answer));
    var encodedJobID = Base64Utils.Base64Encode(jobSummary.JobID);
}

<h4>@jobSummary.SupportActivity.FriendlyNameShort()</h4>
@if (!String.IsNullOrEmpty(jobSummary.RecipientOrganisation))
{
    <h4>Group Name: @jobSummary.RecipientOrganisation </h4>
}

@if (jobSummary.JobStatus.Incomplete())
{
    <div class="job__expander">
        <div class="row">
            <div class="sm12">
                <dl>
                    <partial name="_WhenIsHelpNeeded" model="@Model.JobDetail.Item" />

                    @if (jobSummary.RequestType == RequestType.Shift)
                    {
                        <div class="location-details">
                            <dt>Where is the shift?</dt>

                            <dd>
                                <div>
                                    @Html.DisplayFor(m => m.JobDetail.Location.LocationDetails.Address)
                                    <span class="distance">(@Model.JobDetail.Location.Distance.ToString("0.0") miles away)</span>
                                </div>
                            </dd>
                        </div>
                    }
                </dl>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(Model.GroupSupportActivityInstructions.ActivityDetails) || !string.IsNullOrEmpty(jobSummary.RecipientOrganisation) || questionsToDisplay?.Count() > 0)
{
    <div class="job__expander">
        <h4>Request Details<span></span></h4>
        <div class="job__expander__content">
            @if (!string.IsNullOrEmpty(Model.GroupSupportActivityInstructions.ActivityDetails)) { 
            <div class="row">
                <div class="sm12">
                    @Markdown.ParseHtmlString(Model.GroupSupportActivityInstructions.ActivityDetails)
                </div>
            </div>
            }
            @if (!string.IsNullOrEmpty(jobSummary.RecipientOrganisation) || questionsToDisplay?.Count() > 0)
            {
                <div class="row">
                    <div class="sm12">
                        @if (!string.IsNullOrEmpty(jobSummary.RecipientOrganisation))
                        {
                            <dl>
                                <dt>Organisation</dt>
                                <dd>@jobSummary.RecipientOrganisation</dd>
                            </dl>
                        }

                        @foreach (var q in questionsToDisplay.OrderBy(q => q.TaskManagementDisplayOrder()))
                        {
                            <dl>
                                <dt>@q.FriendlyName()</dt>
                                <dd>@Html.Raw(q.Answer.ToHtmlSafeStringWithLineBreaks())</dd>
                            </dl>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
}

<div class="job__expander">
    <h4>Volunteer Instructions<span></span></h4>
    <div class="job__expander__content">
        <div class="row">
            <div class="sm12 volunteer-instructions">
                <partial name="_GroupSupportActivityInstructions" model="Model.GroupSupportActivityInstructions" />
            </div>
        </div>
    </div>
</div>


<script>window.print();</script>

