@using HelpMyStreet.Utils.Utils;
@using HelpMyStreet.Utils.Extensions;

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<link href="css/chart.css" rel="stylesheet" />
<script>
    const MONTHS = [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December'
    ];

    function months(config) {
        var cfg = config || {};
        var count = cfg.count || 12;
        var section = cfg.section;
        var values = [];
        var i, value;

        for (i = 0; i < count; ++i) {
            value = MONTHS[Math.ceil(i) % 12];
            values.push(value.substring(0, section));
        }

        return values;
    }

    const CHART_COLORS = {
        red: 'rgb(255, 99, 132)',
        orange: 'rgb(255, 159, 64)',
        yellow: 'rgb(255, 205, 86)',
        green: 'rgb(75, 192, 192)',
        blue: 'rgb(54, 162, 235)',
        purple: 'rgb(153, 102, 255)',
        grey: 'rgb(201, 203, 207)'
    };

    const labels = months({ count: 12 });
    const data = {
        labels: labels,
        datasets: [
            {
                label: 'Errands',
                data: [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                borderColor: CHART_COLORS.red,
                backgroundColor: CHART_COLORS.red
            },
            {
                label: 'Face Covering',
                data: [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                borderColor: CHART_COLORS.blue,
                backgroundColor: CHART_COLORS.blue
            },
            {
                label: 'Friendly Chat',
                data: [2, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0],
                borderColor: CHART_COLORS.grey,
                backgroundColor: CHART_COLORS.grey
            },
            {
                label: 'Other',
                data: [0, 2, 0, 1, 2, 3, 1, 12, 24, 6, 12],
                borderColor: CHART_COLORS.yellow,
                backgroundColor: CHART_COLORS.yellow
            },
            {
                label: 'Prescriptions',
                data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                borderColor: CHART_COLORS.purple,
                backgroundColor: CHART_COLORS.purple
            },
            {
                label: 'Shopping',
                data: [1, 2, 5, 1, 1, 0, 1, 0, 0, 0, 0],
                borderColor: CHART_COLORS.green,
                backgroundColor: CHART_COLORS.green
            }
        ]
    };

    const config = {
        type: 'bar',
        data: data,
        options: {
            indexAxis: 'y',
            // Elements options apply to all of the options unless overridden in a dataset
            // In this case, we are setting the border of each horizontal bar to be 2px wide
            elements: {
                bar: {
                    borderWidth: 2,
                }
            },
            responsive: true,
            plugins: {
                legend: {
                    position: 'right',
                },
                title: {
                    display: true,
                    text: 'Count of support activity by month'
                }
            }
        },
    };

    const actions = [
        {
            name: 'Randomize',
            handler(chart) {
                chart.data.datasets.forEach(dataset => {
                    dataset.data = Utils.numbers({ count: chart.data.labels.length, min: -100, max: 100 });
                });
                chart.update();
            }
        },
        {
            name: 'Add Dataset',
            handler(chart) {
                const data = chart.data;
                const dsColor = Utils.namedColor(chart.data.datasets.length);
                const newDataset = {
                    label: 'Dataset ' + (data.datasets.length + 1),
                    backgroundColor: Utils.transparentize(dsColor, 0.5),
                    borderColor: dsColor,
                    borderWidth: 1,
                    data: Utils.numbers({ count: data.labels.length, min: -100, max: 100 }),
                };
                chart.data.datasets.push(newDataset);
                chart.update();
            }
        },
        {
            name: 'Add Data',
            handler(chart) {
                const data = chart.data;
                if (data.datasets.length > 0) {
                    data.labels = Utils.months({ count: data.labels.length + 1 });

                    for (let index = 0; index < data.datasets.length; ++index) {
                        data.datasets[index].data.push(Utils.rand(-100, 100));
                    }

                    chart.update();
                }
            }
        },
        {
            name: 'Remove Dataset',
            handler(chart) {
                chart.data.datasets.pop();
                chart.update();
            }
        },
        {
            name: 'Remove Data',
            handler(chart) {
                chart.data.labels.splice(-1, 1); // remove the label first

                chart.data.datasets.forEach(dataset => {
                    dataset.data.pop();
                });

                chart.update();
            }
        }
    ];
</script>

<div id="chartHolder">
    <canvas id="myChart"></canvas>
</div>
<script>
    
    const myChart = new Chart(
        document.getElementById('myChart'),
        config
    );

</script>