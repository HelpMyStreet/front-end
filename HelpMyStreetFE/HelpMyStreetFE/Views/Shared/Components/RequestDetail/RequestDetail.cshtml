@using HelpMyStreetFE.Helpers;
@using HelpMyStreet.Utils.Enums;
@using HelpMyStreet.Utils.Extensions;
@using HelpMyStreet.Utils.Utils;
@using Westwind.AspNetCore.Markdown

@model HelpMyStreetFE.Models.Account.Jobs.RequestDetailViewModel

@{
    var requestSummary = Model.RequestDetail.RequestSummary;
    var requestId = Base64Utils.Base64Encode(requestSummary.RequestID);
    var role = Base64Utils.Base64Encode((int)RequestRoles.GroupAdmin);

    //var questionsToDisplay = Model.JobDetails.First().JobSummary.Questions.Where(q => q.ShowOnTaskManagement(true, false) && !string.IsNullOrEmpty(q.Answer));
}

@if (requestSummary.RequestType == RequestType.Shift)
{
    <div class="job__expander">
        <div class="row">
            <div class="sm12">
                <dl>
                    <dt>When is the help needed?</dt>
                    @if (requestSummary.Shift.StartDate.ToUKFromUTCTime().Date.Equals(requestSummary.Shift.EndDate.ToUKFromUTCTime().Date))
                    {
                        if (requestSummary.Shift.StartDate.Date.Equals(requestSummary.Shift.EndDate.Date))
                        {
                            <dd>
                                This shift occurs on
                                <strong>@Html.Raw(requestSummary.Shift.StartDate.FormatDate(DateTimeFormat.LongDateHTMLFormat))</strong> between
                                <strong>
                                    @requestSummary.Shift.StartDate.FormatDate(DateTimeFormat.TimeFormat) &ndash;
                                    @requestSummary.Shift.EndDate.FormatDate(DateTimeFormat.TimeFormat)
                                </strong>.
                            </dd>
                        }
                        else
                        {
                            <dd>
                                This shift starts on
                                <strong>@Html.Raw(requestSummary.Shift.StartDate.FormatDate(DateTimeFormat.LongDateHTMLFormat))</strong> at
                                <strong>@requestSummary.Shift.StartDate.FormatDate(DateTimeFormat.TimeFormat)</strong> and ends
                                <strong>@Html.Raw(requestSummary.Shift.EndDate.FormatDate(DateTimeFormat.LongDateHTMLFormat))</strong> at
                                <strong>@requestSummary.Shift.EndDate.FormatDate(DateTimeFormat.TimeFormat)</strong>.
                            </dd>
                        }
                    }
                    <dt>Where is the shift?</dt>
                    <dd>
                        @Html.DisplayFor(m => m.LocationDetails.Address)
                    </dd>
                </dl>
            </div>
        </div>
    </div>
}

<div class="job__expander">
    <h4 class="no-click">@(requestSummary.RequestType.Equals(RequestType.Shift) ? "Slots" : "Requests")</h4>
</div>

@foreach (var jobDetails in Model.JobDetails.OrderBy(j => j.JobSummary.JobStatus.Equals(JobStatuses.Cancelled)).ThenBy(j => j.JobSummary.DueDate))
{
    var id = Base64Utils.Base64Encode(jobDetails.JobSummary.JobID);
    var volunteerDetails = jobDetails.CurrentVolunteer?.UserPersonalDetails;

    var questionsToDisplay = jobDetails.JobSummary.Questions.Where(q => q.ShowOnTaskManagement(true, false) && !string.IsNullOrEmpty(q.Answer));

    <div class="job__expander job request-job" id="@id" request-id="@requestId" data-role="@role">
        <h4>
            <img class="status-icon" src="~/img/icons/status/@jobDetails.JobSummary.JobStatus.Icon()" alt="@jobDetails.JobSummary.JobStatus.FriendlyName()" title="@jobDetails.JobSummary.JobStatus.FriendlyName()" />
            <span title="@jobDetails.JobSummary.DueDate.FriendlyFutureDate()">
                @jobDetails.JobSummary.DueDate.FormatDate(DateTimeFormat.ShortDateFormat) &ndash;
            </span>
            <span class="toggle-on-status-change">
                @jobDetails.JobSummary.JobStatus.SlotJobStatusWithVolunteerName(volunteerDetails)
            </span>
            <span class="job__status__new dnone toggle-on-status-change"></span>
            <span></span>
        </h4>
        <div class="job__expander__content request-job__content">
            <div class="row">
                <div class="sm3 request-job__action-column mb-sm">
                    <div class="job__info__actions mt-sm">
                        <partial name="_JobButtons_Admin" model="jobDetails.JobSummary" />
                    </div>
                </div>
                <div class="sm9 pr-md request-job__info-column">
                    <div class="row">
                        <div class="sm12">
                            <dl class="">
                                <partial name="_WhenIsHelpNeeded" model="@jobDetails" />
                            </dl>
                        </div>
                    </div>
                    <div class="row">
                        @if (volunteerDetails != null)
                        {
                            <div class="sm7 toggle-on-status-change add-line-before">
                                <h5 class="pr-md">Current Volunteer</h5>
                                <dl class="pr-md">
                                    <dt>Name</dt>
                                    <dd>@volunteerDetails.DisplayName (@volunteerDetails.FirstName @volunteerDetails.LastName)</dd>
                                    <dt>Email</dt>
                                    <dd>@volunteerDetails.EmailAddress</dd>
                                    <dt>@(volunteerDetails.PhoneNumbers().Count() > 1 ? "Phone numbers" : "Phone number")</dt>
                                    <dd>@string.Join(" / ", volunteerDetails.PhoneNumbers())</dd>
                                    <dt>Address</dt>
                                    <dd>
                                        @volunteerDetails.LocationSummary()
                                    </dd>
                                </dl>
                            </div>
                        }
                        <div class="sm5 space-filler toggle-on-status-change add-line-before">
                            <h5>Slot Status History</h5>
                            <dl class="highlight-last">
                                @foreach (var statusChange in jobDetails.JobStatusHistory)
                                {
                                    <dt>
                                        @statusChange.JobStatusDescription
                                    </dt>
                                    <dd>
                                        <span>
                                            @statusChange.StatusHistory.StatusDate.FormatDate(DateTimeFormat.ShortDateTimeFormat)
                                        </span>
                                        @if (statusChange.VolunteerUser != null)
                                        {
                                            <span>
                                                @(statusChange.StatusHistory.JobStatus == JobStatuses.InProgress ? "with" : "by")
                                                @statusChange.VolunteerUser.UserPersonalDetails.FullName()
                                            </span>
                                        }
                                    </dd>
                                }
                            </dl>
                        </div>
                    </div>
                </div>
            </div>
            @if (questionsToDisplay.Count() > 0)
            {
                <div class="row">
                    <div class="sm12 add-line-before">
                        <h5>Request Details</h5>
                        @foreach (var q in questionsToDisplay.OrderBy(q => q.TaskManagementDisplayOrder()))
                        {
                            <dl>
                                <dt>@q.FriendlyName()</dt>
                                <dd>@Html.Raw(q.Answer.ToHtmlSafeStringWithLineBreaks())</dd>
                            </dl>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
}


@if (Model.GroupSupportActivityInstructions.Any(i => !string.IsNullOrEmpty(i.Value.ActivityDetails)))// || questionsToDisplay.Count() > 0)
{
    <div class="job__expander">
        <h4>Request Details<span></span></h4>
        <div class="job__expander__content">
            <div class="row">
                <div class="sm12">
                    @foreach (var activity in Model.GroupSupportActivityInstructions)
                    {
                        @if (Model.GroupSupportActivityInstructions.Count() > 1)
                        {
                            <h5>@activity.Key.FriendlyNameShort()</h5>
                        }
                        @Markdown.ParseHtmlString(activity.Value.ActivityDetails)
                    }

                    @*@foreach (var q in questionsToDisplay.OrderBy(q => q.TaskManagementDisplayOrder()))
                    {
                        <dl>
                            <dt>@q.FriendlyName()</dt>
                            <dd>@Html.Raw(q.Answer.ToHtmlSafeStringWithLineBreaks())</dd>
                        </dl>
                    }*@
                </div>
            </div>
        </div>
    </div>
}

<div class="job__expander">
    <h4>Volunteer Instructions<span></span></h4>
    <div class="job__expander__content">
        @foreach (var activity in Model.GroupSupportActivityInstructions)
        {
            <div class="row">
                @if (Model.GroupSupportActivityInstructions.Count() > 1)
                {
                    <h5>@activity.Key.FriendlyNameShort()</h5>
                }
                <div class="sm12 volunteer-instructions">
                    <partial name="_GroupSupportActivityInstructions" model="activity.Value" />
                </div>
            </div>
        }
    </div>
</div>

<div class="job__expander">
    <h4>Request Contact Details<span></span></h4>
    <div class="job__expander__content">
        <div class="row">
            @if (Model.RequestDetail.Recipient != null)
            {
                <div class="sm6">
                    <h5>Recipient</h5>
                    <dl>
                        <dt>Name</dt>
                        <dd>@Model.RequestDetail.Recipient.FirstName @Model.RequestDetail.Recipient.LastName</dd>
                        <dt>Email</dt>
                        <dd>@Model.RequestDetail.Recipient.EmailAddress</dd>
                        <dt>@(Model.RequestDetail.Recipient.PhoneNumbers().Count() > 1 ? "Phone numbers" : "Phone number")</dt>
                        <dd>@string.Join(" / ", Model.RequestDetail.Recipient.PhoneNumbers())</dd>
                        <dt>Address</dt>
                        <dd>
                            @Html.DisplayFor(x => Model.RequestDetail.Recipient.Address, new { MaskAddress = false })
                        </dd>
                    </dl>
                </div>
            }
            @if (Model.RequestDetail.Requestor != null)
            {
                <div class="sm6">
                    <h5>Requester</h5>
                    <dl>
                        <dt>Name</dt>
                        <dd>@Model.RequestDetail.Requestor.FirstName @Model.RequestDetail.Requestor.LastName</dd>
                        <dt>Email</dt>
                        <dd>@Model.RequestDetail.Requestor.EmailAddress</dd>
                        <dt>@(Model.RequestDetail.Requestor.PhoneNumbers().Count() > 1 ? "Phone numbers" : "Phone number")</dt>
                        <dd>@string.Join(" / ", Model.RequestDetail.Requestor.PhoneNumbers())</dd>
                        <dt>Address</dt>
                        <dd>
                            @Model.RequestDetail.Requestor.Address.Postcode
                        </dd>
                    </dl>
                </div>
            }
        </div>
    </div>
</div>
