@model HelpMyStreetFE.Models.Account.Jobs.JobFilterViewModel
@using HelpMyStreetFE.Helpers;
@using HelpMyStreet.Utils.Extensions;

@{ 
    bool jobsToDisplay = true;
}

<form action="/api/requesthelp/get-filtered-jobs" method="post">
    <h6>Filter jobs here</h6>

    <input type="hidden" name="JobSet" value="@((int)Model.JobFilterRequest.JobSet)" />
    <input type="hidden" name="GroupId" value="@Model.JobFilterRequest.GroupId" />
    <input type="hidden" name="ResultsToShow" value="@Model.JobFilterRequest.ResultsToShow" />

    @if (Model.FilterSet.JobStatuses != null)
    {
        <fieldset>
            <p>Status:</p>
            @foreach (var status in Model.FilterSet.JobStatuses)
            {
                <label for="filter-status-@status.Value">@status.Value.FriendlyName()</label>
                <input name="JobStatuses[]" type="checkbox" id="filter-status-@status.Value" value="@((int)status.Value)" checked="@status.IsSelected" />
            }
            <label for="filter-status-select-all">Select all</label>
            <input id="filter-status-select-all" type="checkbox" class="filter-select-all" />
            @* TODO: Add some JS to tick/untick other boxes when select-all is clicked *@
        </fieldset>
    }

    @if (Model.FilterSet.SupportActivities != null)
    {
        <fieldset>
            <p>Activity:</p>
            @foreach (var supportActivity in Model.FilterSet.SupportActivities)
            {
                <label for="filter-supportActivity-@supportActivity.Value">@supportActivity.Value.FriendlyName()</label>
                <input name="SupportActivities[]" type="checkbox" id="filter-supportActivity-@supportActivity.Value" value="@((int)supportActivity.Value)" checked="@supportActivity.IsSelected" />
            }
            <label for="filter-supportActivity-select-all">Select all</label>
            <input id="filter-supportActivity-select-all" type="checkbox" class="filter-select-all" />
            @* TODO: Add some JS to tick/untick other boxes when select-all is clicked *@
        </fieldset>
    }

    @if (Model.FilterSet.MaxDistanceInMiles != null)
    {
        <fieldset>
            <p>Distance:</p>
            @foreach (var distance in Model.FilterSet.MaxDistanceInMiles)
            {
                <label for="filter-distance-@distance.Value">@distance.Label</label>
                <input type="radio" name="MaxDistanceInMiles" id="filter-distance-@distance.Value" value="@distance.Value" checked="@distance.IsSelected" />
            }
        </fieldset>
    }

    @if (Model.FilterSet.DueInNextXDays != null)
    {
        <fieldset>
            <p>Due:</p>
            @foreach (var dueInNextXDays in Model.FilterSet.DueInNextXDays)
            {
                <label for="filter-due-@dueInNextXDays.Value">@dueInNextXDays.Label</label>
                <input type="radio" name="DueInNextXDays" id="filter-due-@dueInNextXDays.Value" value="@dueInNextXDays.Value" checked="@dueInNextXDays.IsSelected" />
            }
        </fieldset>
    }

    <button type="submit" class="update">Update</button>
</form>

<div class="profile__section job-filter-results-panel">
    @await Component.InvokeAsync("JobList", new
{
    JobFilterRequest = Model.JobFilterRequest,
    EmptyListCallback = new Action(() =>
    {
        jobsToDisplay = false; 
        Model.EmptyJobSetCallback?.Invoke();
    }),
})

    @if (!jobsToDisplay)
    {
        <p>No jobs to display</p>
    }
</div>
