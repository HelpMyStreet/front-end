@using HelpMyStreetFE.Models.Registration;
@using HelpMyStreet.Utils.Enums

@model RegistrationViewModel

@section Scripts {
    <script>
        const activeStep = @Model.ActiveStep;
        const source = '@Model.RegistrationFormVariant';
    </script>
    <script src="~/registration.js" asp-append-version="true"></script>
}

@{
    ViewData["Title"] = "Helpers - Registration";
    Layout = "~/Views/Shared/_LayoutNoHeader.cshtml";

    var volunteerOptions = new List<SupportActivityViewModel>();

    volunteerOptions.Add(new SupportActivityViewModel { SupportActivities = SupportActivities.Shopping, Description = "Picking up groceries and other essentials (e.g. food, toiletries, household products etc.)" });
    volunteerOptions.Add(new SupportActivityViewModel { SupportActivities = SupportActivities.FaceMask, Description = "Supplying homemade face coverings" });
    volunteerOptions.Add(new SupportActivityViewModel { SupportActivities = SupportActivities.CollectingPrescriptions, Description = "Collecting prescriptions from a local pharmacy" });
    volunteerOptions.Add(new SupportActivityViewModel { SupportActivities = SupportActivities.Errands, Description = "Running essential local errands (e.g. posting mail)" });
    volunteerOptions.Add(new SupportActivityViewModel { SupportActivities = SupportActivities.WellbeingPackage, Description = "Collecting and delivering a pre-prepared wellbeing package" });
    volunteerOptions.Add(new SupportActivityViewModel { SupportActivities = SupportActivities.DogWalking, Description = "Walking the dog" });
    volunteerOptions.Add(new SupportActivityViewModel { SupportActivities = SupportActivities.MealPreparation, Description = "Delivering a hot / pre-prepared meal" });
    volunteerOptions.Add(new SupportActivityViewModel { SupportActivities = SupportActivities.PhoneCalls_Friendly, Description = "Calling someone in need of a friendly chat" });
    volunteerOptions.Add(new SupportActivityViewModel { SupportActivities = SupportActivities.PhoneCalls_Anxious, Description = "Providing support over the phone to someone who may be anxious (relevant experience required e.g. mental health first-aider)" });
    volunteerOptions.Add(new SupportActivityViewModel { SupportActivities = SupportActivities.HomeworkSupport, Description = "Remote support for parents and carers home-schooling their children" });
    volunteerOptions.Add(new SupportActivityViewModel { SupportActivities = SupportActivities.CheckingIn, Description = "Reaching out to people in my area to check-in" });
    volunteerOptions.Add(new SupportActivityViewModel { SupportActivities = SupportActivities.Other, Description = "I may be able to help with other tasks. Please check with me." });


    switch (Model.RegistrationFormVariant)
    {
        case RegistrationFormVariant.HLP:
            volunteerOptions.Insert(0, new SupportActivityViewModel { SupportActivities = SupportActivities.CommunityConnector, Description = "Being a <strong>COMMUNITY CONNECTOR</strong>", Selected = true });
            break;
        case RegistrationFormVariant.FtLOS:
            volunteerOptions.RemoveAll(a => a.SupportActivities == SupportActivities.FaceMask);
            volunteerOptions.Insert(0, new SupportActivityViewModel { SupportActivities = SupportActivities.FaceMask, Description = "Supplying reusable homemade face coverings through For the Love of Scrubs", Selected = true });
            break;
        case RegistrationFormVariant.FaceMasks:
            volunteerOptions.RemoveAll(a => a.SupportActivities == SupportActivities.FaceMask);
            volunteerOptions.Insert(0, new SupportActivityViewModel { SupportActivities = SupportActivities.FaceMask, Description = "Supplying homemade face coverings", Selected = true });
            break;
        case RegistrationFormVariant.AgeUKLSL:
            volunteerOptions.RemoveAll(a => a.SupportActivities == SupportActivities.WellbeingPackage);
            volunteerOptions.Insert(0, new SupportActivityViewModel { SupportActivities = SupportActivities.WellbeingPackage, Description = "Collecting and delivering a pre-prepared wellbeing package", Selected = true });
            break;
    }


    var distanceOptions = new Dictionary<double, string>
    {
    { 0, "On my street only" },
    { 0.5, "Within 1/2 mile" },
    { 1, "Within 1 mile" },
    { 3, "Within 3 miles" },
    { 0.1, "Other - please tell us the distance in miles" }
    };
}


    <div class="container">

        <partial name="_Stepper" for="ActiveStep" />

        <div class="row justify-center mt72">
            <div class="sm8">
                <h2>Helpers</h2>
                @if (Context.Request.Query["failure"] == "error")
        {
                    <p class="orange">There has been an error submitting your details. Please check your entries and try again.</p>
                }
            </div>
        </div>
        <form id="registration_form" method="post">
            <input name="source" type="hidden" value="@Model.RegistrationFormVariant" />
            <div class="row justify-center">
                <div class="sm8">
                    <p>HelpMyStreet will always try to match helpers to requests that are appropriate for them. Some requests are local in nature (e.g. picking up groceries),
                    while others can be performed over a wider area (e.g. posting a fabric face covering, or supporting people over the phone).</p>
                    <h5>I can help people in need by:</h5>
                    <p>(Please tick as many as you like)</p>
                    <span class="error" id="volunteer-error">Please select at least one option</span>
                    @foreach (var option in volunteerOptions)
                    {
                        <div class="input input--checkbox">
                            <label for="volunteer-@option.SupportActivities">
                                <input name="volunteer[]" type="checkbox" id="volunteer-@option.SupportActivities" value="@option.SupportActivities" checked="@option.Selected"  hidden />
                                <span class="input--checkbox__checkbox">
                                    <span class="mdi mdi-check"></span>
                                </span>
                                @Html.Raw(@option.Description)
                            </label>
                        </div>
                        <hr class="input--separator" />
                    }
                </div>
                <div class="sm8 mt40">
                    <h5>I can travel to perform tasks that are:</h5>
                    <span class="error" id="distance-error">Please select an option</span>
                    @foreach (var option in distanceOptions)
                    {
                        <div class="input input--radio">
                            <label for="volunteer-distance-@option.Key">
                                <input name="volunteer_distance" type="radio" id="volunteer-distance-@option.Key" value="@option.Key" hidden />
                                <span class="input--radio__radio">
                                    <span class="input--radio__radio__inner"></span>
                                </span>
                                @option.Value
                            </label>
                        </div>
                        <hr class="input--separator" />
                    }
                </div>

                <div class="sm8 ">
                    <div class="input input--radio mt-md ">
                        <input name="custom_distance" step=".01" class="dnone" type="number" placeholder="e.g. 10" />
                        <span class="error" id="custom_distance-error">Please enter a number of miles (up to a maximum of 20)</span>
                    </div>
                </div>
                
                <div class="sm8">
                    <div class="controls">
                        <button class="btn large cta fill" id="submit_button" type="submit">
                            <span class="text">Continue <span class="large-screen-only">to next page</span> &gt;</span>
                            <div class="loader"><partial name="_LoadingSpinner" model='new LoadingSpinnerViewModel { Text = "Next Step..."}' /></div>
                        </button>
                    </div>
                </div>
            </div>
        </form>
    </div>
