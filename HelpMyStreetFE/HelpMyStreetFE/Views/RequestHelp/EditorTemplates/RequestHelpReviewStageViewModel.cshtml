@model HelpMyStreetFE.Models.RequestHelp.Stages.Review.RequestHelpReviewStageViewModel;
@using HelpMyStreet.Utils.Enums;
@using HelpMyStreet.Utils.Extensions;
@using HelpMyStreetFE.Helpers;

@{
    var onBehalf = Model.RequestedFor?.Type == RequestorType.OnBehalf;
    var forOrg = Model.RequestedFor?.Type == RequestorType.Organisation;


    var requestor = Model.Requestor;
    if (requestor != null)
    {
        requestor.AlternatePhoneNumber = string.IsNullOrEmpty(requestor.AlternatePhoneNumber) ? "None Provided" : requestor.AlternatePhoneNumber;
        requestor.MobileNumber = string.IsNullOrEmpty(requestor.MobileNumber) ? "None Provided" : requestor.MobileNumber;
        requestor.Email = string.IsNullOrEmpty(requestor.Email) ? "None Provided" : requestor.Email;
    }

    var recipient = Model.Recipient;
    if (recipient != null)
    {
        recipient.Email = string.IsNullOrEmpty(recipient.Email) ? "None Provided" : recipient.Email;
        recipient.MobileNumber = string.IsNullOrEmpty(recipient.MobileNumber) ? "None Provided" : recipient.MobileNumber;
        recipient.AlternatePhoneNumber = string.IsNullOrEmpty(recipient.AlternatePhoneNumber) ? "None Provided" : recipient.AlternatePhoneNumber;
    }

    var repeatRequest = Model.FrequencyRequested.Frequency != Frequency.Once;
}
<input type="hidden" name="ReviewStep" class="model" value='@Json.Serialize(Model)' />
@Html.Hidden("FormStage", RequestHelpFormStage.Review)

<h2>Review</h2>
<div class="tiles">
    <div class="row justify-center  ">
        <div class="sm8">
            <label class="tiles__label--large"> Request For</label>
            <button class="edit-button" name="formAction" type="submit" value="EditRequest">Edit</button>
        </div>
    </div>

    <div class="row  justify-center pb-md">
        @Html.DisplayFor(x => x.Task, "TaskTile", new { ForReview = true })
        @Html.DisplayFor(x => x.RequestedFor, "RequestForTile", new { ForReview = true })
    </div>




    <hr class="input--separator" />
    <div class="row mt-md justify-center">
        <div class="sm8">
            <label class="tiles__label--large"> Description</label> <button class="edit-button" name="formAction" type="submit" value="EditRequest">Edit</button>
        </div>
    </div>


    <div class="row justify-center">
        <div class=" @(repeatRequest ? "sm4" : "sm8") pad-sm-md">
            <div class="tiles__tile tiles__tile--large">
                <div class="tiles__tile__content ">
                    <div class="tiles__tile__content__icon"><img class="" src="~/img/icons/calendar.svg" /> </div>
                    <div class="tiles__tile__content__header">When is the help @(repeatRequest ? "first" : "") needed?</div>
                    <div class="tiles__tile__content__description">@Html.Raw(Model.TimeRequestedReviewString)</div>
                    @if (Model.TimeRequested.DueDateType.HasDate())
                    {
                        <div class="tiles__tile__content__description">@Html.Raw(Model.TimeRequested.StartTime.FormatDate(DateTimeFormat.LongDateHTMLFormat, false))</div>
                    }
                    @if (Model.TimeRequested.DueDateType.HasStartTime())
                    {
                        <div class="tiles__tile__content__description">Starting at @Model.TimeRequested.StartTime.FormatDate(DateTimeFormat.TimeFormat, false)</div>
                    }
                    @if (Model.TimeRequested.DueDateType.HasEndTime())
                    {
                        var endTime = Model.TimeRequested.EndTime.Value;
                        <div class="tiles__tile__content__description">Ending at @endTime.FormatDate(DateTimeFormat.TimeFormat, false)</div>
                        @if (endTime != Model.TimeRequested.StartTime.Date)
                        {
                            <div class="tiles__tile__content__description">on @Html.Raw(endTime.FormatDate(DateTimeFormat.LongDateHTMLFormat, false))</div>
                        }
                        <div class="tiles__tile__content__description">(duration @Model.TimeRequested.DurationString)</div>
                    }
                </div>
            </div>
        </div>
        @if (repeatRequest)
        {
            <div class="sm4 pad-sm-md">
                <div class="tiles__tile tiles__tile--large">
                    <div class="tiles__tile__content ">
                        <div class="tiles__tile__content__icon"><img class="" src="~/img/icons/repeat.svg" /> </div>
                        <div class="tiles__tile__content__header">How often is the help needed?</div>
                        <div class="tiles__tile__content__description">@Model.FrequencyRequested.Description</div>
                        <div class="tiles__tile__content__description">@Model.OccurrencesRequested times in total</div>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (Model.RequestStageQuestions != null)
    {
        <div class="row justify-center ">
            <div class="sm8 pad-sm-md">
                <div class="tiles__tile tiles__tile">
                    <div class="tiles__tile__content--top">
                        @foreach (var question in Model.RequestStageQuestions)
                        {
                            if (string.IsNullOrEmpty(question.Model)) question.Model = "Not Answered";
                            <div class="tiles__tile__content--top__header  p-xs">@Html.Raw(question.Label)</div>
                            @if (question.InputType != QuestionType.LabelOnly)
                            {
                                <div class="tiles__tile__content__description tiles__tile__content--top__description">
                                    @{
                                        string answer = @question.Model;
                                        if (question.InputType == HelpMyStreet.Utils.Enums.QuestionType.Radio)
                                        {
                                            var radioInput = question.AdditionalData.Where(x => x.Key == question.Model).FirstOrDefault();
                                            answer = radioInput != null ? radioInput.Value : "Not Answered";
                                        }
                                    }
                                    @Html.Raw(answer.ToHtmlSafeStringWithLineBreaks())
                                </div>
                            }
                            <hr class="input--separator" />
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    @if (requestor != null || recipient != null)
    {
        <hr class="input--separator" />
        <div class="row mt-md justify-center">
            <div class="sm8">
                <label class="tiles__label--large"> Personal Details</label> <button class="edit-button" type="submit" name="formAction" value="EditDetails">Edit</button>
            </div>
        </div>
        <div class="row justify-center ">

            @if (Model.ShowRequestor)
            {
                <div class="sm4">
                    <div id="requestor" class="tiles__tile">
                        <div class="tiles__tile__content--top ">
                            <div class="tiles__tile__content--top__header  pt-xs left">Your Details</div>
                            <div class="tiles__tile__content__description tiles__tile__content--top__description">
                                <div><strong>Name:</strong> @requestor.Firstname @requestor.Lastname </div>
                                <div><strong>Address:</strong> @requestor.Postcode </div>
                                <div><strong>Email:</strong> @requestor.Email </div>
                                <div><strong>Mobile Number:</strong> @requestor.MobileNumber </div>
                                <div><strong>Alternate Number:</strong> @requestor.AlternatePhoneNumber </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <div class="@(Model.ShowRequestor ? "sm4" : "sm8 pad-sm-md")">
                <div id="recipient" class="tiles__tile">
                    <div class="tiles__tile__content--top">
                        <div class=" tiles__tile__content--top__header  pt-xs left">@(onBehalf || forOrg ? "Recipient" : "Your") Details</div>
                        <div class="tiles__tile__content__description tiles__tile__content--top__description">
                            @if (forOrg)
                            {
                                <div><strong>Organisation:</strong> @Model.OrganisationName </div>
                            }
                            <div><strong>Name:</strong> @recipient.Firstname  @recipient.Lastname </div>
                            @if (string.IsNullOrEmpty(recipient.AddressLine1))
                            {
                                <div><strong>Postcode:</strong> @recipient.Postcode </div>
                            }
                            else
                            {
                                <div><strong>Address:</strong> @($"{recipient.AddressLine1}, {recipient.Town}, {recipient.Postcode}") </div>
                            }
                            <div><strong>Email:</strong> @recipient.Email </div>
                            <div><strong>Mobile Number:</strong>  @recipient.MobileNumber </div>
                            <div><strong>Alternate Number:</strong> @recipient.AlternatePhoneNumber </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (Model.DetailsStageQuestions != null)
    {
        <div class="row justify-center ">
            <div class="sm8 pad-sm-md">
                <div class="tiles__tile tiles__tile">
                    <div class="tiles__tile__content--top">
                        @foreach (var question in Model.DetailsStageQuestions)
                        {
                            if (string.IsNullOrEmpty(question.Model)) question.Model = "Not Answered";
                            <div class="tiles__tile__content--top__header  p-xs">@Html.Raw(question.Label)</div>
                            @if (question.InputType != QuestionType.LabelOnly)
                            {
                                <div class="tiles__tile__content__description tiles__tile__content--top__description">
                                    @{
                                        string answer = @question.Model;
                                        if (question.InputType == HelpMyStreet.Utils.Enums.QuestionType.Radio)
                                        {
                                            var radioInput = question.AdditionalData.Where(x => x.Key == question.Model).FirstOrDefault();
                                            answer = radioInput != null ? radioInput.Value : "Not Answered";
                                        }
                                    }
                                    @Html.Raw(answer.ToHtmlSafeStringWithLineBreaks())
                                </div>
                            }
                            <hr class="input--separator" />
                        }
                    </div>
                </div>
            </div>
        </div>
    }

</div>


