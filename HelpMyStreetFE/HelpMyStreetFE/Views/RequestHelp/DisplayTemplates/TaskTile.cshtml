@using HelpMyStreetFE.Models.RequestHelp;
@using HelpMyStreetFE.Helpers;
@using HelpMyStreet.Utils.Extensions;
@using HelpMyStreet.Utils.Enums;
@using HelpMyStreetFE.Models.RequestHelp.Stages.Request;

@model TasksViewModel

@{
    var activities = new List<RequestActivityViewModel>
{
                new RequestActivityViewModel{ Activity = SupportActivities.WellbeingPackage, Description = "Collection and delivery of an Age UK \"Vitals for Veterans\" wellbeing package"},
                new RequestActivityViewModel{ Activity = SupportActivities.Shopping, Description = "Picking up groceries and other essentials (e.g. food, toiletries, household products)"},
                new RequestActivityViewModel{ Activity = SupportActivities.FaceMask ,Description = "Finding someone to provide washable fabric face coverings"},
                new RequestActivityViewModel{ Activity = SupportActivities.CheckingIn,  Description = "Checking that someone is OK"},
                new RequestActivityViewModel{ Activity = SupportActivities.CollectingPrescriptions, Description = "Collecting prescriptions from a local pharmacy", },
                new RequestActivityViewModel{ Activity = SupportActivities.Errands, Description = "Running essential local errands (e.g. posting mail)"},
                new RequestActivityViewModel{ Activity = SupportActivities.DogWalking, Description = "Walking a calm dog",},
                new RequestActivityViewModel{ Activity = SupportActivities.MealPreparation, Description = "Getting a hot / pre-prepared meal", },
                new RequestActivityViewModel{ Activity = SupportActivities.PhoneCalls_Friendly, Description = "A friendly chat on the phone"},
                new RequestActivityViewModel{ Activity = SupportActivities.PhoneCalls_Anxious, Description = "Some extra support over the phone"},
                new RequestActivityViewModel{ Activity = SupportActivities.HomeworkSupport, Description = "Remote support for children being home-schooled"},
                new RequestActivityViewModel{ Activity = SupportActivities.Other,  Description= "Please tell us more below"},
                new RequestActivityViewModel{ Activity = SupportActivities.CommunityConnector,  Description= "I want to get in touch with a Community Connector"},
                new RequestActivityViewModel{ Activity = SupportActivities.ColdWeatherArmy, Description = "Getting help in an emergency during a cold snap"},
                new RequestActivityViewModel{ Activity = SupportActivities.MealsToYourDoor, Description = "Freshly prepared meals, delivered straight to your door"},
                new RequestActivityViewModel{ Activity = SupportActivities.MealtimeCompanion, Description = "Finding someone to keep me company at mealtimes when I would otherwise be alone"},
                new RequestActivityViewModel{ Activity = SupportActivities.VolunteerSupport, Description = "Helping with events, admin duties or not-for-profit activities", MultiVolunteer = true },
                new RequestActivityViewModel{ Activity = SupportActivities.Transport, Description = "Finding transport for essential appointments"},
                new RequestActivityViewModel{ Activity = SupportActivities.VaccineSupport, Description = "Finding volunteers to support the COVID-19 vaccination programme", MultiVolunteer = true },
                new RequestActivityViewModel{ Activity = SupportActivities.EmergencySupport, Description = "Finding volunteers for help in emergency situations (e.g. extreme weather)", MultiVolunteer = true }
        };

    var activity = activities.Where(x => x.Activity == Model.SupportActivity).First();


    var ForReview = ViewData["ForReview"] is bool ? (bool)ViewData["ForReview"] : false;

}


<div class="sm4">

    <div id="task_@((int)Model.SupportActivity)" data-type="activities" data-id='@((int)Model.SupportActivity)' class="tiles__tile tiles__tile--large @activity.Activity.Class() @(Model.IsSelected && !ForReview ? "selected" : "" )">
        <div class="tiles__tile__content ">
            @if (activity.MultiVolunteer && !ForReview)
            {
                <div class="tiles__tile__content__badge" title="Enabled for multiple volunteers">
                    MULTI
                </div>
            }
            @if (!string.IsNullOrEmpty(activity.Activity.Icon()))
            {
                <div class="tiles__tile__content__icon"><img src="~/img/icons/@activity.Activity.Icon()" /> </div>
            }
            else
            {
                <div class="mt-md"></div>
            }
            <div class="tiles__tile__content__header">@activity.Activity.FriendlyNameShort()</div>
            <div class="tiles__tile__content__description">@activity.Description</div>
        </div>
    </div>
</div>











