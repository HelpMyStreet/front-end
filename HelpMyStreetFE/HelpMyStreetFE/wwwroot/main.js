!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=145)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i,o=n(37),a=n(67),s=n(95),u=n(96),c=((r={})["no-app"]="No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",r["bad-app-name"]="Illegal App name: '{$appName}",r["duplicate-app"]="Firebase App named '{$appName}' already exists",r["app-deleted"]="Firebase App named '{$appName}' already deleted",r["invalid-app-argument"]="firebase.{$appName}() takes either no argument or a Firebase App instance.",r["invalid-log-argument"]="First argument to `onLog` must be null or a function.",r),h=new a.ErrorFactory("app","Firebase",c),l=((i={})["@firebase/app"]="fire-core",i["@firebase/analytics"]="fire-analytics",i["@firebase/auth"]="fire-auth",i["@firebase/database"]="fire-rtdb",i["@firebase/functions"]="fire-fn",i["@firebase/installations"]="fire-iid",i["@firebase/messaging"]="fire-fcm",i["@firebase/performance"]="fire-perf",i["@firebase/remote-config"]="fire-rc",i["@firebase/storage"]="fire-gcs",i["@firebase/firestore"]="fire-fst",i["fire-js"]="fire-js",i["firebase-wrapper"]="fire-js-all",i),f=new u.Logger("@firebase/app"),p=function(){function t(t,e,n){var r,i,u=this;this.firebase_=n,this.isDeleted_=!1,this.name_=e.name,this.automaticDataCollectionEnabled_=e.automaticDataCollectionEnabled||!1,this.options_=a.deepCopy(t),this.container=new s.ComponentContainer(e.name),this._addComponent(new s.Component("app",(function(){return u}),"PUBLIC"));try{for(var c=o.__values(this.firebase_.INTERNAL.components.values()),h=c.next();!h.done;h=c.next()){var l=h.value;this._addComponent(l)}}catch(t){r={error:t}}finally{try{h&&!h.done&&(i=c.return)&&i.call(c)}finally{if(r)throw r.error}}}return Object.defineProperty(t.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed_(),this.automaticDataCollectionEnabled_},set:function(t){this.checkDestroyed_(),this.automaticDataCollectionEnabled_=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!0,configurable:!0}),t.prototype.delete=function(){var t=this;return new Promise((function(e){t.checkDestroyed_(),e()})).then((function(){return t.firebase_.INTERNAL.removeApp(t.name_),Promise.all(t.container.getProviders().map((function(t){return t.delete()})))})).then((function(){t.isDeleted_=!0}))},t.prototype._getService=function(t,e){return void 0===e&&(e="[DEFAULT]"),this.checkDestroyed_(),this.container.getProvider(t).getImmediate({identifier:e})},t.prototype._removeServiceInstance=function(t,e){void 0===e&&(e="[DEFAULT]"),this.container.getProvider(t).clearInstance(e)},t.prototype._addComponent=function(t){try{this.container.addComponent(t)}catch(e){f.debug("Component "+t.name+" failed to register with FirebaseApp "+this.name,e)}},t.prototype._addOrOverwriteComponent=function(t){this.container.addOrOverwriteComponent(t)},t.prototype.checkDestroyed_=function(){if(this.isDeleted_)throw h.create("app-deleted",{appName:this.name_})},t}();p.prototype.name&&p.prototype.options||p.prototype.delete||console.log("dc");var d=
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function t(){var e=
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function(t){var e={},n=new Map,r={__esModule:!0,initializeApp:function(n,i){void 0===i&&(i={});if("object"!=typeof i||null===i){i={name:i}}var o=i;void 0===o.name&&(o.name="[DEFAULT]");var s=o.name;if("string"!=typeof s||!s)throw h.create("bad-app-name",{appName:String(s)});if(a.contains(e,s))throw h.create("duplicate-app",{appName:s});var u=new t(n,o,r);return e[s]=u,u},app:i,registerVersion:function(t,e,n){var r,i=null!==(r=l[t])&&void 0!==r?r:t;n&&(i+="-"+n);var o=i.match(/\s|\//),a=e.match(/\s|\//);if(o||a){var u=['Unable to register library "'+i+'" with version "'+e+'":'];return o&&u.push('library name "'+i+'" contains illegal characters (whitespace or "/")'),o&&a&&u.push("and"),a&&u.push('version name "'+e+'" contains illegal characters (whitespace or "/")'),void f.warn(u.join(" "))}c(new s.Component(i+"-version",(function(){return{library:i,version:e}}),"VERSION"))},setLogLevel:u.setLogLevel,onLog:function(t,e){if(null!==t&&"function"!=typeof t)throw h.create("invalid-log-argument",{appName:name});u.setUserLogHandler(t,e)},apps:null,SDK_VERSION:"7.12.0",INTERNAL:{registerComponent:c,removeApp:function(t){delete e[t]},components:n,useAsService:function(t,e){if("serverAuth"===e)return null;return e}}};function i(t){if(t=t||"[DEFAULT]",!a.contains(e,t))throw h.create("no-app",{appName:t});return e[t]}function c(s){var u,c,l=s.name;if(n.has(l))return f.debug("There were multiple attempts to register component "+l+"."),"PUBLIC"===s.type?r[l]:null;if(n.set(l,s),"PUBLIC"===s.type){var p=function(t){if(void 0===t&&(t=i()),"function"!=typeof t[l])throw h.create("invalid-app-argument",{appName:l});return t[l]()};void 0!==s.serviceProps&&a.deepExtend(p,s.serviceProps),r[l]=p,t.prototype[l]=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=this._getService.bind(this,l);return n.apply(this,s.multipleInstances?t:[])}}try{for(var d=o.__values(Object.keys(e)),v=d.next();!v.done;v=d.next()){var m=v.value;e[m]._addComponent(s)}}catch(t){u={error:t}}finally{try{v&&!v.done&&(c=d.return)&&c.call(d)}finally{if(u)throw u.error}}return"PUBLIC"===s.type?r[l]:null}return r.default=r,Object.defineProperty(r,"apps",{get:function(){return Object.keys(e).map((function(t){return e[t]}))}}),i.App=t,r}(p);return e.INTERNAL=o.__assign(o.__assign({},e.INTERNAL),{createFirebaseNamespace:t,extendNamespace:function(t){a.deepExtend(e,t)},createSubscribe:a.createSubscribe,ErrorFactory:a.ErrorFactory,deepExtend:a.deepExtend}),e}(),v=function(){function t(t){this.container=t}return t.prototype.getPlatformInfoString=function(){return this.container.getProviders().map((function(t){if(function(t){var e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(t)){var e=t.getImmediate();return e.library+"/"+e.version}return null})).filter((function(t){return t})).join(" ")},t}();
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
if(a.isBrowser()&&void 0!==self.firebase){f.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");var m=self.firebase.SDK_VERSION;m&&m.indexOf("LITE")>=0&&f.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ")}var g=d.initializeApp;d.initializeApp=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return a.isNode()&&f.warn('\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the "main" field in package.json.\n      \n      If you are using Webpack, you can specify "main" as the first item in\n      "resolve.mainFields":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the rollup-plugin-node-resolve plugin and specify "main"\n      as the first item in "mainFields", e.g. [\'main\', \'module\'].\n      https://github.com/rollup/rollup-plugin-node-resolve\n      '),g.apply(void 0,t)};var b=d;!function(t,e){t.INTERNAL.registerComponent(new s.Component("platform-logger",(function(t){return new v(t)}),"PRIVATE")),t.registerVersion("@firebase/app","0.6.0",e),t.registerVersion("fire-js","")}(b),e.default=b,e.firebase=b},function(t,e,n){(function(e){var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof e&&e)||Function("return this")()}).call(this,n(27))},function(t,e,n){var r=n(1),i=n(41),o=n(6),a=n(42),s=n(46),u=n(74),c=i("wks"),h=r.Symbol,l=u?h:h&&h.withoutSetter||a;t.exports=function(t){return o(c,t)||(s&&o(h,t)?c[t]=h[t]:c[t]=l("Symbol."+t)),c[t]}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var r=n(3);t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(4),i=n(52),o=n(8),a=n(28),s=Object.defineProperty;e.f=r?s:function(t,e,n){if(o(t),e=a(e,!0),o(n),i)try{return s(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(5);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e,n){var r=n(1),i=n(21).f,o=n(13),a=n(10),s=n(30),u=n(68),c=n(45);t.exports=function(t,e){var n,h,l,f,p,d=t.target,v=t.global,m=t.stat;if(n=v?r:m?r[d]||s(d,{}):(r[d]||{}).prototype)for(h in e){if(f=e[h],l=t.noTargetGet?(p=i(n,h))&&p.value:n[h],!c(v?h:d+(m?".":"#")+h,t.forced)&&void 0!==l){if(typeof f==typeof l)continue;u(f,l)}(t.sham||l&&l.sham)&&o(f,"sham",!0),a(n,h,f,t)}}},function(t,e,n){var r=n(1),i=n(13),o=n(6),a=n(30),s=n(31),u=n(18),c=u.get,h=u.enforce,l=String(String).split("String");(t.exports=function(t,e,n,s){var u=!!s&&!!s.unsafe,c=!!s&&!!s.enumerable,f=!!s&&!!s.noTargetGet;"function"==typeof n&&("string"!=typeof e||o(n,"name")||i(n,"name",e),h(n).source=l.join("string"==typeof e?e:"")),t!==r?(u?!f&&t[e]&&(c=!0):delete t[e],c?t[e]=n:i(t,e,n)):c?t[e]=n:a(e,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||s(this)}))},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(69),i=n(1),o=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?o(r[t])||o(i[t]):r[t]&&r[t][e]||i[t]&&i[t][e]}},function(t,e,n){var r=n(4),i=n(7),o=n(22);t.exports=r?function(t,e,n){return i.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(39),i=n(40);t.exports=function(t){return r(i(t))}},function(t,e,n){var r=n(44),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,e){t.exports=!1},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e,n){var r,i,o,a=n(82),s=n(1),u=n(5),c=n(13),h=n(6),l=n(32),f=n(23),p=s.WeakMap;if(a){var d=new p,v=d.get,m=d.has,g=d.set;r=function(t,e){return g.call(d,t,e),e},i=function(t){return v.call(d,t)||{}},o=function(t){return m.call(d,t)}}else{var b=l("state");f[b]=!0,r=function(t,e){return c(t,b,e),e},i=function(t){return h(t,b)?t[b]:{}},o=function(t){return h(t,b)}}t.exports={set:r,get:i,has:o,enforce:function(t){return o(t)?i(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!u(e)||(n=i(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},function(t,e,n){var r=n(40);t.exports=function(t){return Object(r(t))}},function(t,e,n){"use strict";var r,i=(r=n(0))&&"object"==typeof r&&"default"in r?r.default:r;
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
i.registerVersion("firebase","7.13.1","app"),t.exports=i},function(t,e,n){var r=n(4),i=n(51),o=n(22),a=n(14),s=n(28),u=n(6),c=n(52),h=Object.getOwnPropertyDescriptor;e.f=r?h:function(t,e){if(t=a(t),e=s(e,!0),c)try{return h(t,e)}catch(t){}if(u(t,e))return o(!i.f.call(t,e),t[e])}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){t.exports={}},function(t,e,n){var r=n(17);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports={}},function(t,e,n){"use strict";n(94);var r=n(20);n(97);function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,o;return e=t,o=[{key:"init",value:function(e){try{t.app=r.initializeApp(e),t.auth=r.auth(),t.auth.setPersistence(r.auth.Auth.Persistence.SESSION)}catch(t){console.error("An error occurred initialising firebase app: ".concat(t.message))}}}],(n=null)&&i(e.prototype,n),o&&i(e,o),t}();o(a,"app",void 0),o(a,"auth",void 0);e.a=a},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(5);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){var r=n(1),i=n(5),o=r.document,a=i(o)&&i(o.createElement);t.exports=function(t){return a?o.createElement(t):{}}},function(t,e,n){var r=n(1),i=n(13);t.exports=function(t,e){try{i(r,t,e)}catch(n){r[t]=e}return e}},function(t,e,n){var r=n(53),i=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(t){return i.call(t)}),t.exports=r.inspectSource},function(t,e,n){var r=n(41),i=n(42),o=r("keys");t.exports=function(t){return o[t]||(o[t]=i(t))}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,n){var r=n(11);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(36),i=n(10),o=n(86);r||i(Object.prototype,"toString",o,{unsafe:!0})},function(t,e,n){var r={};r[n(2)("toStringTag")]="z",t.exports="[object z]"===String(r)},function(t,e,n){"use strict";n.r(e),n.d(e,"__extends",(function(){return i})),n.d(e,"__assign",(function(){return o})),n.d(e,"__rest",(function(){return a})),n.d(e,"__decorate",(function(){return s})),n.d(e,"__param",(function(){return u})),n.d(e,"__metadata",(function(){return c})),n.d(e,"__awaiter",(function(){return h})),n.d(e,"__generator",(function(){return l})),n.d(e,"__exportStar",(function(){return f})),n.d(e,"__values",(function(){return p})),n.d(e,"__read",(function(){return d})),n.d(e,"__spread",(function(){return v})),n.d(e,"__spreadArrays",(function(){return m})),n.d(e,"__await",(function(){return g})),n.d(e,"__asyncGenerator",(function(){return b})),n.d(e,"__asyncDelegator",(function(){return y})),n.d(e,"__asyncValues",(function(){return w})),n.d(e,"__makeTemplateObject",(function(){return _})),n.d(e,"__importStar",(function(){return x})),n.d(e,"__importDefault",(function(){return I})),n.d(e,"__classPrivateFieldGet",(function(){return E})),n.d(e,"__classPrivateFieldSet",(function(){return T}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var o=function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function a(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n}function s(t,e,n,r){var i,o=arguments.length,a=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(o<3?i(a):o>3?i(e,n,a):i(e,n))||a);return o>3&&a&&Object.defineProperty(e,n,a),a}function u(t,e){return function(n,r){e(n,r,t)}}function c(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function h(t,e,n,r){return new(n||(n=Promise))((function(i,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function s(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((r=r.apply(t,e||[])).next())}))}function l(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function f(t,e){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}function p(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function d(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function v(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(d(arguments[e]));return t}function m(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r}function g(t){return this instanceof g?(this.v=t,this):new g(t)}function b(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(t){i[t]&&(r[t]=function(e){return new Promise((function(n,r){o.push([t,e,n,r])>1||s(t,e)}))})}function s(t,e){try{(n=i[t](e)).value instanceof g?Promise.resolve(n.value.v).then(u,c):h(o[0][2],n)}catch(t){h(o[0][3],t)}var n}function u(t){s("next",t)}function c(t){s("throw",t)}function h(t,e){t(e),o.shift(),o.length&&s(o[0][0],o[0][1])}}function y(t){var e,n;return e={},r("next"),r("throw",(function(t){throw t})),r("return"),e[Symbol.iterator]=function(){return this},e;function r(r,i){e[r]=t[r]?function(e){return(n=!n)?{value:g(t[r](e)),done:"return"===r}:i?i(e):e}:i}}function w(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=p(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){(function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)})(r,i,(e=t[n](e)).done,e.value)}))}}}function _(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function x(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}function I(t){return t&&t.__esModule?t:{default:t}}function E(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)}function T(t,e,n){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,n),n}},function(t,e,n){"use strict";var r=n(9),i=n(72).find,o=n(75),a=n(57),s=!0,u=a("find");"find"in[]&&Array(1).find((function(){s=!1})),r({target:"Array",proto:!0,forced:s||!u},{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),o("find")},function(t,e,n){var r=n(3),i=n(11),o="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==i(t)?o.call(t,""):Object(t)}:Object},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e,n){var r=n(16),i=n(53);(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.6.4",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+r).toString(36)}},function(t,e,n){var r=n(54),i=n(33).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r=n(3),i=/#|\.prototype\./,o=function(t,e){var n=s[a(t)];return n==c||n!=u&&("function"==typeof e?r(e):!!e)},a=o.normalize=function(t){return String(t).replace(i,".").toLowerCase()},s=o.data={},u=o.NATIVE="N",c=o.POLYFILL="P";t.exports=o},function(t,e,n){var r=n(3);t.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(t,e,n){var r=n(54),i=n(33);t.exports=Object.keys||function(t){return r(t,i)}},function(t,e,n){"use strict";var r,i,o,a,s=n(9),u=n(16),c=n(1),h=n(12),l=n(59),f=n(10),p=n(87),d=n(49),v=n(76),m=n(5),g=n(17),b=n(88),y=n(11),w=n(31),_=n(89),x=n(80),I=n(60),E=n(61).set,T=n(90),S=n(64),k=n(91),A=n(65),N=n(92),O=n(18),P=n(45),C=n(2),R=n(66),L=C("species"),D="Promise",j=O.get,M=O.set,F=O.getterFor(D),U=l,V=c.TypeError,H=c.document,B=c.process,q=h("fetch"),z=A.f,K=z,G="process"==y(B),W=!!(H&&H.createEvent&&c.dispatchEvent),X=P(D,(function(){if(!(w(U)!==String(U))){if(66===R)return!0;if(!G&&"function"!=typeof PromiseRejectionEvent)return!0}if(u&&!U.prototype.finally)return!0;if(R>=51&&/native code/.test(U))return!1;var t=U.resolve(1),e=function(t){t((function(){}),(function(){}))};return(t.constructor={})[L]=e,!(t.then((function(){}))instanceof e)})),$=X||!x((function(t){U.all(t).catch((function(){}))})),J=function(t){var e;return!(!m(t)||"function"!=typeof(e=t.then))&&e},Y=function(t,e,n){if(!e.notified){e.notified=!0;var r=e.reactions;T((function(){for(var i=e.value,o=1==e.state,a=0;r.length>a;){var s,u,c,h=r[a++],l=o?h.ok:h.fail,f=h.resolve,p=h.reject,d=h.domain;try{l?(o||(2===e.rejection&&et(t,e),e.rejection=1),!0===l?s=i:(d&&d.enter(),s=l(i),d&&(d.exit(),c=!0)),s===h.promise?p(V("Promise-chain cycle")):(u=J(s))?u.call(s,f,p):f(s)):p(i)}catch(t){d&&!c&&d.exit(),p(t)}}e.reactions=[],e.notified=!1,n&&!e.rejection&&Q(t,e)}))}},Z=function(t,e,n){var r,i;W?((r=H.createEvent("Event")).promise=e,r.reason=n,r.initEvent(t,!1,!0),c.dispatchEvent(r)):r={promise:e,reason:n},(i=c["on"+t])?i(r):"unhandledrejection"===t&&k("Unhandled promise rejection",n)},Q=function(t,e){E.call(c,(function(){var n,r=e.value;if(tt(e)&&(n=N((function(){G?B.emit("unhandledRejection",r,t):Z("unhandledrejection",t,r)})),e.rejection=G||tt(e)?2:1,n.error))throw n.value}))},tt=function(t){return 1!==t.rejection&&!t.parent},et=function(t,e){E.call(c,(function(){G?B.emit("rejectionHandled",t):Z("rejectionhandled",t,e.value)}))},nt=function(t,e,n,r){return function(i){t(e,n,i,r)}},rt=function(t,e,n,r){e.done||(e.done=!0,r&&(e=r),e.value=n,e.state=2,Y(t,e,!0))},it=function(t,e,n,r){if(!e.done){e.done=!0,r&&(e=r);try{if(t===n)throw V("Promise can't be resolved itself");var i=J(n);i?T((function(){var r={done:!1};try{i.call(n,nt(it,t,r,e),nt(rt,t,r,e))}catch(n){rt(t,r,n,e)}})):(e.value=n,e.state=1,Y(t,e,!1))}catch(n){rt(t,{done:!1},n,e)}}};X&&(U=function(t){b(this,U,D),g(t),r.call(this);var e=j(this);try{t(nt(it,this,e),nt(rt,this,e))}catch(t){rt(this,e,t)}},(r=function(t){M(this,{type:D,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=p(U.prototype,{then:function(t,e){var n=F(this),r=z(I(this,U));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=G?B.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&Y(this,n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new r,e=j(t);this.promise=t,this.resolve=nt(it,t,e),this.reject=nt(rt,t,e)},A.f=z=function(t){return t===U||t===o?new i(t):K(t)},u||"function"!=typeof l||(a=l.prototype.then,f(l.prototype,"then",(function(t,e){var n=this;return new U((function(t,e){a.call(n,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof q&&s({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return S(U,q.apply(c,arguments))}}))),s({global:!0,wrap:!0,forced:X},{Promise:U}),d(U,D,!1,!0),v(D),o=h(D),s({target:D,stat:!0,forced:X},{reject:function(t){var e=z(this);return e.reject.call(void 0,t),e.promise}}),s({target:D,stat:!0,forced:u||X},{resolve:function(t){return S(u&&this===o?U:this,t)}}),s({target:D,stat:!0,forced:$},{all:function(t){var e=this,n=z(e),r=n.resolve,i=n.reject,o=N((function(){var n=g(e.resolve),o=[],a=0,s=1;_(t,(function(t){var u=a++,c=!1;o.push(void 0),s++,n.call(e,t).then((function(t){c||(c=!0,o[u]=t,--s||r(o))}),i)})),--s||r(o)}));return o.error&&i(o.value),n.promise},race:function(t){var e=this,n=z(e),r=n.reject,i=N((function(){var i=g(e.resolve);_(t,(function(t){i.call(e,t).then(n.resolve,r)}))}));return i.error&&r(i.value),n.promise}})},function(t,e,n){var r=n(7).f,i=n(6),o=n(2)("toStringTag");t.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},function(t,e,n){var r=function(t){"use strict";var e=Object.prototype,n=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},i=r.iterator||"@@iterator",o=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function s(t,e,n,r){var i=e&&e.prototype instanceof h?e:h,o=Object.create(i.prototype),a=new x(r||[]);return o._invoke=function(t,e,n){var r="suspendedStart";return function(i,o){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===i)throw o;return E()}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var s=y(a,n);if(s){if(s===c)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var h=u(t,e,n);if("normal"===h.type){if(r=n.done?"completed":"suspendedYield",h.arg===c)continue;return{value:h.arg,done:n.done}}"throw"===h.type&&(r="completed",n.method="throw",n.arg=h.arg)}}}(t,n,a),o}function u(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=s;var c={};function h(){}function l(){}function f(){}var p={};p[i]=function(){return this};var d=Object.getPrototypeOf,v=d&&d(d(I([])));v&&v!==e&&n.call(v,i)&&(p=v);var m=f.prototype=h.prototype=Object.create(p);function g(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function b(t,e){var r;this._invoke=function(i,o){function a(){return new e((function(r,a){!function r(i,o,a,s){var c=u(t[i],t,o);if("throw"!==c.type){var h=c.arg,l=h.value;return l&&"object"==typeof l&&n.call(l,"__await")?e.resolve(l.__await).then((function(t){r("next",t,a,s)}),(function(t){r("throw",t,a,s)})):e.resolve(l).then((function(t){h.value=t,a(h)}),(function(t){return r("throw",t,a,s)}))}s(c.arg)}(i,o,r,a)}))}return r=r?r.then(a,a):a()}}function y(t,e){var n=t.iterator[e.method];if(void 0===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,y(t,e),"throw"===e.method))return c;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return c}var r=u(n,t.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,c;var i=r.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,c):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,c)}function w(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function _(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function x(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(w,this),this.reset(!0)}function I(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,o=function e(){for(;++r<t.length;)if(n.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return o.next=o}}return{next:E}}function E(){return{value:void 0,done:!0}}return l.prototype=m.constructor=f,f.constructor=l,f[a]=l.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===l||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,f):(t.__proto__=f,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(m),t},t.awrap=function(t){return{__await:t}},g(b.prototype),b.prototype[o]=function(){return this},t.AsyncIterator=b,t.async=function(e,n,r,i,o){void 0===o&&(o=Promise);var a=new b(s(e,n,r,i),o);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},g(m),m[a]="Generator",m[i]=function(){return this},m.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=I,x.prototype={constructor:x,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(_),!t)for(var e in this)"t"===e.charAt(0)&&n.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(n,r){return a.type="throw",a.arg=t,e.next=n,r&&(e.method="next",e.arg=void 0),!!r}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],a=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var s=n.call(o,"catchLoc"),u=n.call(o,"finallyLoc");if(s&&u){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,c):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),c},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),_(n),c}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;_(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:I(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=void 0),c}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},function(t,e,n){"use strict";var r={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,o=i&&!r.call({1:2},1);e.f=o?function(t){var e=i(this,t);return!!e&&e.enumerable}:r},function(t,e,n){var r=n(4),i=n(3),o=n(29);t.exports=!r&&!i((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(1),i=n(30),o=r["__core-js_shared__"]||i("__core-js_shared__",{});t.exports=o},function(t,e,n){var r=n(6),i=n(14),o=n(84).indexOf,a=n(23);t.exports=function(t,e){var n,s=i(t),u=0,c=[];for(n in s)!r(a,n)&&r(s,n)&&c.push(n);for(;e.length>u;)r(s,n=e[u++])&&(~o(c,n)||c.push(n));return c}},function(t,e,n){var r,i=n(8),o=n(85),a=n(33),s=n(23),u=n(56),c=n(29),h=n(32),l=h("IE_PROTO"),f=function(){},p=function(t){return"<script>"+t+"<\/script>"},d=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e;d=r?function(t){t.write(p("")),t.close();var e=t.parentWindow.Object;return t=null,e}(r):((e=c("iframe")).style.display="none",u.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(p("document.F=Object")),t.close(),t.F);for(var n=a.length;n--;)delete d.prototype[a[n]];return d()};s[l]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(f.prototype=i(t),n=new f,f.prototype=null,n[l]=t):n=d(),void 0===e?n:o(n,e)}},function(t,e,n){var r=n(12);t.exports=r("document","documentElement")},function(t,e,n){var r=n(4),i=n(3),o=n(6),a=Object.defineProperty,s={},u=function(t){throw t};t.exports=function(t,e){if(o(s,t))return s[t];e||(e={});var n=[][t],c=!!o(e,"ACCESSORS")&&e.ACCESSORS,h=o(e,0)?e[0]:u,l=o(e,1)?e[1]:void 0;return s[t]=!!n&&!i((function(){if(c&&!r)return!0;var t={length:-1};c?a(t,1,{enumerable:!0,get:u}):t[1]=1,n.call(t,h,l)}))}},function(t,e,n){var r=n(36),i=n(11),o=n(2)("toStringTag"),a="Arguments"==i(function(){return arguments}());t.exports=r?i:function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?n:a?i(e):"Object"==(r=i(e))&&"function"==typeof e.callee?"Arguments":r}},function(t,e,n){var r=n(1);t.exports=r.Promise},function(t,e,n){var r=n(8),i=n(17),o=n(2)("species");t.exports=function(t,e){var n,a=r(t).constructor;return void 0===a||null==(n=r(a)[o])?e:i(n)}},function(t,e,n){var r,i,o,a=n(1),s=n(3),u=n(11),c=n(24),h=n(56),l=n(29),f=n(62),p=a.location,d=a.setImmediate,v=a.clearImmediate,m=a.process,g=a.MessageChannel,b=a.Dispatch,y=0,w={},_=function(t){if(w.hasOwnProperty(t)){var e=w[t];delete w[t],e()}},x=function(t){return function(){_(t)}},I=function(t){_(t.data)},E=function(t){a.postMessage(t+"",p.protocol+"//"+p.host)};d&&v||(d=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return w[++y]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},r(y),y},v=function(t){delete w[t]},"process"==u(m)?r=function(t){m.nextTick(x(t))}:b&&b.now?r=function(t){b.now(x(t))}:g&&!f?(o=(i=new g).port2,i.port1.onmessage=I,r=c(o.postMessage,o,1)):!a.addEventListener||"function"!=typeof postMessage||a.importScripts||s(E)?r="onreadystatechange"in l("script")?function(t){h.appendChild(l("script")).onreadystatechange=function(){h.removeChild(this),_(t)}}:function(t){setTimeout(x(t),0)}:(r=E,a.addEventListener("message",I,!1))),t.exports={set:d,clear:v}},function(t,e,n){var r=n(63);t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},function(t,e,n){var r=n(12);t.exports=r("navigator","userAgent")||""},function(t,e,n){var r=n(8),i=n(5),o=n(65);t.exports=function(t,e){if(r(t),i(e)&&e.constructor===t)return e;var n=o.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){"use strict";var r=n(17),i=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)};t.exports.f=function(t){return new i(t)}},function(t,e,n){var r,i,o=n(1),a=n(63),s=o.process,u=s&&s.versions,c=u&&u.v8;c?i=(r=c.split("."))[0]+r[1]:a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(i=r[1]),t.exports=i&&+i},function(t,e,n){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0});var r=n(37),i={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},o=function(t,e){if(!t)throw a(e)},a=function(t){return new Error("Firebase Database ("+i.SDK_VERSION+") INTERNAL ASSERT FAILED: "+t)},s=function(t){for(var e=[],n=0,r=0;r<t.length;r++){var i=t.charCodeAt(r);i<128?e[n++]=i:i<2048?(e[n++]=i>>6|192,e[n++]=63&i|128):55296==(64512&i)&&r+1<t.length&&56320==(64512&t.charCodeAt(r+1))?(i=65536+((1023&i)<<10)+(1023&t.charCodeAt(++r)),e[n++]=i>>18|240,e[n++]=i>>12&63|128,e[n++]=i>>6&63|128,e[n++]=63&i|128):(e[n++]=i>>12|224,e[n++]=i>>6&63|128,e[n++]=63&i|128)}return e},u={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray:function(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();for(var n=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[],i=0;i<t.length;i+=3){var o=t[i],a=i+1<t.length,s=a?t[i+1]:0,u=i+2<t.length,c=u?t[i+2]:0,h=o>>2,l=(3&o)<<4|s>>4,f=(15&s)<<2|c>>6,p=63&c;u||(p=64,a||(f=64)),r.push(n[h],n[l],n[f],n[p])}return r.join("")},encodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(s(t),e)},decodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){for(var e=[],n=0,r=0;n<t.length;){var i=t[n++];if(i<128)e[r++]=String.fromCharCode(i);else if(i>191&&i<224){var o=t[n++];e[r++]=String.fromCharCode((31&i)<<6|63&o)}else if(i>239&&i<365){var a=((7&i)<<18|(63&(o=t[n++]))<<12|(63&(s=t[n++]))<<6|63&t[n++])-65536;e[r++]=String.fromCharCode(55296+(a>>10)),e[r++]=String.fromCharCode(56320+(1023&a))}else{o=t[n++];var s=t[n++];e[r++]=String.fromCharCode((15&i)<<12|(63&o)<<6|63&s)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray:function(t,e){this.init_();for(var n=e?this.charToByteMapWebSafe_:this.charToByteMap_,r=[],i=0;i<t.length;){var o=n[t.charAt(i++)],a=i<t.length?n[t.charAt(i)]:0,s=++i<t.length?n[t.charAt(i)]:64,u=++i<t.length?n[t.charAt(i)]:64;if(++i,null==o||null==a||null==s||null==u)throw Error();var c=o<<2|a>>4;if(r.push(c),64!==s){var h=a<<4&240|s>>2;if(r.push(h),64!==u){var l=s<<6&192|u;r.push(l)}}}return r},init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(var t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}},c=function(t){try{return u.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function h(t,e){if(!(e instanceof Object))return e;switch(e.constructor){case Date:return new Date(e.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return e}for(var n in e)e.hasOwnProperty(n)&&(t[n]=h(t[n],e[n]));return t}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var l=function(){function t(){var t=this;this.reject=function(){},this.resolve=function(){},this.promise=new Promise((function(e,n){t.resolve=e,t.reject=n}))}return t.prototype.wrapCallback=function(t){var e=this;return function(n,r){n?e.reject(n):e.resolve(r),"function"==typeof t&&(e.promise.catch((function(){})),1===t.length?t(n):t(n,r))}},t}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function f(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var p=function(t){function e(n,r){var i=t.call(this,r)||this;return i.code=n,i.name="FirebaseError",Object.setPrototypeOf(i,e.prototype),Error.captureStackTrace&&Error.captureStackTrace(i,d.prototype.create),i}return r.__extends(e,t),e}(Error),d=function(){function t(t,e,n){this.service=t,this.serviceName=e,this.errors=n}return t.prototype.create=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];for(var r=e[0]||{},i=this.service+"/"+t,o=this.errors[t],a=o?v(o,r):"Error",s=this.serviceName+": "+a+" ("+i+").",u=new p(i,s),c=0,h=Object.keys(r);c<h.length;c++){var l=h[c];"_"!==l.slice(-1)&&(l in u&&console.warn('Overwriting FirebaseError base field "'+l+'" can cause unexpected behavior.'),u[l]=r[l])}return u},t}();function v(t,e){return t.replace(m,(function(t,n){var r=e[n];return null!=r?r.toString():"<"+n+"?>"}))}var m=/\{\$([^}]+)}/g;
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function g(t){return JSON.parse(t)}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var b=function(t){var e={},n={},r={},i="";try{var o=t.split(".");e=g(c(o[0])||""),n=g(c(o[1])||""),i=o[2],r=n.d||{},delete n.d}catch(t){}return{header:e,claims:n,data:r,signature:i}};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var y=function(){function t(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(var t=1;t<this.blockSize;++t)this.pad_[t]=0;this.reset()}return t.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},t.prototype.compress_=function(t,e){e||(e=0);var n=this.W_;if("string"==typeof t)for(var r=0;r<16;r++)n[r]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(r=0;r<16;r++)n[r]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(r=16;r<80;r++){var i=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(i<<1|i>>>31)}var o,a,s=this.chain_[0],u=this.chain_[1],c=this.chain_[2],h=this.chain_[3],l=this.chain_[4];for(r=0;r<80;r++){r<40?r<20?(o=h^u&(c^h),a=1518500249):(o=u^c^h,a=1859775393):r<60?(o=u&c|h&(u|c),a=2400959708):(o=u^c^h,a=3395469782);i=(s<<5|s>>>27)+o+l+a+n[r]&4294967295;l=h,h=c,c=4294967295&(u<<30|u>>>2),u=s,s=i}this.chain_[0]=this.chain_[0]+s&4294967295,this.chain_[1]=this.chain_[1]+u&4294967295,this.chain_[2]=this.chain_[2]+c&4294967295,this.chain_[3]=this.chain_[3]+h&4294967295,this.chain_[4]=this.chain_[4]+l&4294967295},t.prototype.update=function(t,e){if(null!=t){void 0===e&&(e=t.length);for(var n=e-this.blockSize,r=0,i=this.buf_,o=this.inbuf_;r<e;){if(0===o)for(;r<=n;)this.compress_(t,r),r+=this.blockSize;if("string"==typeof t){for(;r<e;)if(i[o]=t.charCodeAt(r),++r,++o===this.blockSize){this.compress_(i),o=0;break}}else for(;r<e;)if(i[o]=t[r],++r,++o===this.blockSize){this.compress_(i),o=0;break}}this.inbuf_=o,this.total_+=e}},t.prototype.digest=function(){var t=[],e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&e,e/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var i=24;i>=0;i-=8)t[r]=this.chain_[n]>>i&255,++r;return t},t}();var w=function(){function t(t,e){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then((function(){t(n)})).catch((function(t){n.error(t)}))}return t.prototype.next=function(t){this.forEachObserver((function(e){e.next(t)}))},t.prototype.error=function(t){this.forEachObserver((function(e){e.error(t)})),this.close(t)},t.prototype.complete=function(){this.forEachObserver((function(t){t.complete()})),this.close()},t.prototype.subscribe=function(t,e,n){var r,i=this;if(void 0===t&&void 0===e&&void 0===n)throw new Error("Missing Observer.");void 0===(r=function(t,e){if("object"!=typeof t||null===t)return!1;for(var n=0,r=e;n<r.length;n++){var i=r[n];if(i in t&&"function"==typeof t[i])return!0}return!1}(t,["next","error","complete"])?t:{next:t,error:e,complete:n}).next&&(r.next=_),void 0===r.error&&(r.error=_),void 0===r.complete&&(r.complete=_);var o=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((function(){try{i.finalError?r.error(i.finalError):r.complete()}catch(t){}})),this.observers.push(r),o},t.prototype.unsubscribeOne=function(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},t.prototype.forEachObserver=function(t){if(!this.finalized)for(var e=0;e<this.observers.length;e++)this.sendOne(e,t)},t.prototype.sendOne=function(t,e){var n=this;this.task.then((function(){if(void 0!==n.observers&&void 0!==n.observers[t])try{e(n.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}}))},t.prototype.close=function(t){var e=this;this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then((function(){e.observers=void 0,e.onNoObservers=void 0})))},t}();function _(){}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function x(t,e,n){var r="";switch(e){case 1:r=n?"first":"First";break;case 2:r=n?"second":"Second";break;case 3:r=n?"third":"Third";break;case 4:r=n?"fourth":"Fourth";break;default:throw new Error("errorPrefix called with argumentNumber > 4.  Need to update it?")}var i=t+" failed: ";return i+=r+" argument "}e.CONSTANTS=i,e.Deferred=l,e.ErrorFactory=d,e.FirebaseError=p,e.Sha1=y,e.assert=o,e.assertionError=a,e.async=function(t,e){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];Promise.resolve(!0).then((function(){t.apply(void 0,n)})).catch((function(t){e&&e(t)}))}},e.base64=u,e.base64Decode=c,e.base64Encode=function(t){var e=s(t);return u.encodeByteArray(e,!0)},e.contains=
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.createSubscribe=function(t,e){var n=new w(t,e);return n.subscribe.bind(n)},e.decode=b,e.deepCopy=
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function(t){return h(void 0,t)},e.deepExtend=h,e.errorPrefix=x,e.getUA=f,e.isAdmin=function(t){var e=b(t).claims;return"object"==typeof e&&!0===e.admin},e.isBrowser=function(){return"object"==typeof self&&self.self===self},e.isBrowserExtension=function(){var t="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof t&&void 0!==t.id},e.isElectron=function(){return f().indexOf("Electron/")>=0},e.isEmpty=function(t){for(var e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0},e.isIE=function(){var t=f();return t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0},e.isMobileCordova=function(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(f())},e.isNode=function(){try{return"[object process]"===Object.prototype.toString.call(t.process)}catch(t){return!1}},e.isNodeSdk=function(){return!0===i.NODE_CLIENT||!0===i.NODE_ADMIN},e.isReactNative=function(){return"object"==typeof navigator&&"ReactNative"===navigator.product},e.isUWP=function(){return f().indexOf("MSAppHost/")>=0},e.isValidFormat=function(t){var e=b(t).claims;return!!e&&"object"==typeof e&&e.hasOwnProperty("iat")},e.isValidTimestamp=function(t){var e=b(t).claims,n=Math.floor((new Date).getTime()/1e3),r=0,i=0;return"object"==typeof e&&(e.hasOwnProperty("nbf")?r=e.nbf:e.hasOwnProperty("iat")&&(r=e.iat),i=e.hasOwnProperty("exp")?e.exp:r+86400),!!n&&!!r&&!!i&&n>=r&&n<=i},e.issuedAtTime=function(t){var e=b(t).claims;return"object"==typeof e&&e.hasOwnProperty("iat")?e.iat:null},e.jsonEval=g,e.map=function(t,e,n){var r={};for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(r[i]=e.call(n,t[i],i,t));return r}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */,e.querystring=function(t){for(var e=[],n=function(t,n){Array.isArray(n)?n.forEach((function(n){e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))})):e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))},r=0,i=Object.entries(t);r<i.length;r++){var o=i[r];n(o[0],o[1])}return e.length?"&"+e.join("&"):""},e.querystringDecode=function(t){var e={};return t.replace(/^\?/,"").split("&").forEach((function(t){if(t){var n=t.split("=");e[n[0]]=n[1]}})),e},e.safeGet=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)?t[e]:void 0},e.stringLength=function(t){for(var e=0,n=0;n<t.length;n++){var r=t.charCodeAt(n);r<128?e++:r<2048?e+=2:r>=55296&&r<=56319?(e+=4,n++):e+=3}return e},e.stringToByteArray=function(t){for(var e=[],n=0,r=0;r<t.length;r++){var i=t.charCodeAt(r);if(i>=55296&&i<=56319){var a=i-55296;r++,o(r<t.length,"Surrogate pair missing trail surrogate."),i=65536+(a<<10)+(t.charCodeAt(r)-56320)}i<128?e[n++]=i:i<2048?(e[n++]=i>>6|192,e[n++]=63&i|128):i<65536?(e[n++]=i>>12|224,e[n++]=i>>6&63|128,e[n++]=63&i|128):(e[n++]=i>>18|240,e[n++]=i>>12&63|128,e[n++]=i>>6&63|128,e[n++]=63&i|128)}return e},e.stringify=function(t){return JSON.stringify(t)},e.validateArgCount=function(t,e,n,r){var i;if(r<e?i="at least "+e:r>n&&(i=0===n?"none":"no more than "+n),i)throw new Error(t+" failed: Was called with "+r+(1===r?" argument.":" arguments.")+" Expects "+i+".")},e.validateCallback=function(t,e,n,r){if((!r||n)&&"function"!=typeof n)throw new Error(x(t,e,r)+"must be a valid function.")},e.validateContextObject=function(t,e,n,r){if((!r||n)&&("object"!=typeof n||null===n))throw new Error(x(t,e,r)+"must be a valid context object.")}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */,e.validateNamespace=function(t,e,n,r){if((!r||n)&&"string"!=typeof n)throw new Error(x(t,e,r)+"must be a valid firebase namespace.")}}).call(this,n(27))},function(t,e,n){var r=n(6),i=n(83),o=n(21),a=n(7);t.exports=function(t,e){for(var n=i(e),s=a.f,u=o.f,c=0;c<n.length;c++){var h=n[c];r(t,h)||s(t,h,u(e,h))}}},function(t,e,n){var r=n(1);t.exports=r},function(t,e,n){var r=n(44),i=Math.max,o=Math.min;t.exports=function(t,e){var n=r(t);return n<0?i(n+e,0):o(n,e)}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(24),i=n(39),o=n(19),a=n(15),s=n(73),u=[].push,c=function(t){var e=1==t,n=2==t,c=3==t,h=4==t,l=6==t,f=5==t||l;return function(p,d,v,m){for(var g,b,y=o(p),w=i(y),_=r(d,v,3),x=a(w.length),I=0,E=m||s,T=e?E(p,x):n?E(p,0):void 0;x>I;I++)if((f||I in w)&&(b=_(g=w[I],I,y),t))if(e)T[I]=b;else if(b)switch(t){case 3:return!0;case 5:return g;case 6:return I;case 2:u.call(T,g)}else if(h)return!1;return l?-1:c||h?h:T}};t.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6)}},function(t,e,n){var r=n(5),i=n(34),o=n(2)("species");t.exports=function(t,e){var n;return i(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!i(n.prototype)?r(n)&&null===(n=n[o])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},function(t,e,n){var r=n(46);t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,n){var r=n(2),i=n(55),o=n(7),a=r("unscopables"),s=Array.prototype;null==s[a]&&o.f(s,a,{configurable:!0,value:i(null)}),t.exports=function(t){s[a][t]=!0}},function(t,e,n){"use strict";var r=n(12),i=n(7),o=n(2),a=n(4),s=o("species");t.exports=function(t){var e=r(t),n=i.f;a&&e&&!e[s]&&n(e,s,{configurable:!0,get:function(){return this}})}},function(t,e,n){var r=n(2),i=n(25),o=r("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(i.Array===t||a[o]===t)}},function(t,e,n){var r=n(58),i=n(25),o=n(2)("iterator");t.exports=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[r(t)]}},function(t,e,n){var r=n(8);t.exports=function(t,e,n,i){try{return i?e(r(n)[0],n[1]):e(n)}catch(e){var o=t.return;throw void 0!==o&&r(o.call(t)),e}}},function(t,e,n){var r=n(2)("iterator"),i=!1;try{var o=0,a={next:function(){return{done:!!o++}},return:function(){i=!0}};a[r]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var o={};o[r]=function(){return{next:function(){return{done:n=!0}}}},t(o)}catch(t){}return n}},,function(t,e,n){var r=n(1),i=n(31),o=r.WeakMap;t.exports="function"==typeof o&&/native code/.test(i(o))},function(t,e,n){var r=n(12),i=n(43),o=n(71),a=n(8);t.exports=r("Reflect","ownKeys")||function(t){var e=i.f(a(t)),n=o.f;return n?e.concat(n(t)):e}},function(t,e,n){var r=n(14),i=n(15),o=n(70),a=function(t){return function(e,n,a){var s,u=r(e),c=i(u.length),h=o(a,c);if(t&&n!=n){for(;c>h;)if((s=u[h++])!=s)return!0}else for(;c>h;h++)if((t||h in u)&&u[h]===n)return t||h||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},function(t,e,n){var r=n(4),i=n(7),o=n(8),a=n(47);t.exports=r?Object.defineProperties:function(t,e){o(t);for(var n,r=a(e),s=r.length,u=0;s>u;)i.f(t,n=r[u++],e[n]);return t}},function(t,e,n){"use strict";var r=n(36),i=n(58);t.exports=r?{}.toString:function(){return"[object "+i(this)+"]"}},function(t,e,n){var r=n(10);t.exports=function(t,e,n){for(var i in e)r(t,i,e[i],n);return t}},function(t,e){t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return t}},function(t,e,n){var r=n(8),i=n(77),o=n(15),a=n(24),s=n(78),u=n(79),c=function(t,e){this.stopped=t,this.result=e};(t.exports=function(t,e,n,h,l){var f,p,d,v,m,g,b,y=a(e,n,h?2:1);if(l)f=t;else{if("function"!=typeof(p=s(t)))throw TypeError("Target is not iterable");if(i(p)){for(d=0,v=o(t.length);v>d;d++)if((m=h?y(r(b=t[d])[0],b[1]):y(t[d]))&&m instanceof c)return m;return new c(!1)}f=p.call(t)}for(g=f.next;!(b=g.call(f)).done;)if("object"==typeof(m=u(f,y,b.value,h))&&m&&m instanceof c)return m;return new c(!1)}).stop=function(t){return new c(!0,t)}},function(t,e,n){var r,i,o,a,s,u,c,h,l=n(1),f=n(21).f,p=n(11),d=n(61).set,v=n(62),m=l.MutationObserver||l.WebKitMutationObserver,g=l.process,b=l.Promise,y="process"==p(g),w=f(l,"queueMicrotask"),_=w&&w.value;_||(r=function(){var t,e;for(y&&(t=g.domain)&&t.exit();i;){e=i.fn,i=i.next;try{e()}catch(t){throw i?a():o=void 0,t}}o=void 0,t&&t.enter()},y?a=function(){g.nextTick(r)}:m&&!v?(s=!0,u=document.createTextNode(""),new m(r).observe(u,{characterData:!0}),a=function(){u.data=s=!s}):b&&b.resolve?(c=b.resolve(void 0),h=c.then,a=function(){h.call(c,r)}):a=function(){d.call(l,r)}),t.exports=_||function(t){var e={fn:t,next:void 0};o&&(o.next=e),i||(i=e,a()),o=e}},function(t,e,n){var r=n(1);t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e,n){"use strict";var r=n(9),i=n(16),o=n(59),a=n(3),s=n(12),u=n(60),c=n(64),h=n(10);r({target:"Promise",proto:!0,real:!0,forced:!!o&&a((function(){o.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(t){var e=u(this,s("Promise")),n="function"==typeof t;return this.then(n?function(n){return c(e,t()).then((function(){return n}))}:t,n?function(n){return c(e,t()).then((function(){throw n}))}:t)}}),i||"function"!=typeof o||o.prototype.finally||h(o.prototype,"finally",s("Promise").prototype.finally)},function(t,e,n){var r=n(9),i=n(4);r({target:"Object",stat:!0,forced:!i,sham:!i},{defineProperty:n(7).f})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(37),i=n(67),o=function(){function t(t,e,n){this.name=t,this.instanceFactory=e,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY"}return t.prototype.setInstantiationMode=function(t){return this.instantiationMode=t,this},t.prototype.setMultipleInstances=function(t){return this.multipleInstances=t,this},t.prototype.setServiceProps=function(t){return this.serviceProps=t,this},t}(),a=function(){function t(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map}return t.prototype.get=function(t){void 0===t&&(t="[DEFAULT]");var e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){var n=new i.Deferred;this.instancesDeferred.set(e,n);try{var r=this.getOrInitializeService(e);r&&n.resolve(r)}catch(t){}}return this.instancesDeferred.get(e).promise},t.prototype.getImmediate=function(t){var e=r.__assign({identifier:"[DEFAULT]",optional:!1},t),n=e.identifier,i=e.optional,o=this.normalizeInstanceIdentifier(n);try{var a=this.getOrInitializeService(o);if(!a){if(i)return null;throw Error("Service "+this.name+" is not available")}return a}catch(t){if(i)return null;throw t}},t.prototype.getComponent=function(){return this.component},t.prototype.setComponent=function(t){var e,n;if(t.name!==this.name)throw Error("Mismatching Component "+t.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if(this.component=t,function(t){return"EAGER"===t.instantiationMode}
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(t))try{this.getOrInitializeService("[DEFAULT]")}catch(t){}try{for(var i=r.__values(this.instancesDeferred.entries()),o=i.next();!o.done;o=i.next()){var a=r.__read(o.value,2),s=a[0],u=a[1],c=this.normalizeInstanceIdentifier(s);try{var h=this.getOrInitializeService(c);u.resolve(h)}catch(t){}}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}},t.prototype.clearInstance=function(t){void 0===t&&(t="[DEFAULT]"),this.instancesDeferred.delete(t),this.instances.delete(t)},t.prototype.delete=function(){return r.__awaiter(this,void 0,void 0,(function(){var t;return r.__generator(this,(function(e){switch(e.label){case 0:return t=Array.from(this.instances.values()),[4,Promise.all(t.filter((function(t){return"INTERNAL"in t})).map((function(t){return t.INTERNAL.delete()})))];case 1:return e.sent(),[2]}}))}))},t.prototype.isComponentSet=function(){return null!=this.component},t.prototype.getOrInitializeService=function(t){var e=this.instances.get(t);return!e&&this.component&&(e=this.component.instanceFactory(this.container,function(t){return"[DEFAULT]"===t?void 0:t}(t)),this.instances.set(t,e)),e||null},t.prototype.normalizeInstanceIdentifier=function(t){return this.component?this.component.multipleInstances?t:"[DEFAULT]":t},t}();var s=function(){function t(t){this.name=t,this.providers=new Map}return t.prototype.addComponent=function(t){var e=this.getProvider(t.name);if(e.isComponentSet())throw new Error("Component "+t.name+" has already been registered with "+this.name);e.setComponent(t)},t.prototype.addOrOverwriteComponent=function(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)},t.prototype.getProvider=function(t){if(this.providers.has(t))return this.providers.get(t);var e=new a(t,this);return this.providers.set(t,e),e},t.prototype.getProviders=function(){return Array.from(this.providers.values())},t}();e.Component=o,e.ComponentContainer=s,e.Provider=a},function(t,e,n){"use strict";
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
function r(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var i;n.r(e),n.d(e,"LogLevel",(function(){return o})),n.d(e,"Logger",(function(){return l})),n.d(e,"setLogLevel",(function(){return f})),n.d(e,"setUserLogHandler",(function(){return p}));var o,a=[];!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(o||(o={}));var s={debug:o.DEBUG,verbose:o.VERBOSE,info:o.INFO,warn:o.WARN,error:o.ERROR,silent:o.SILENT},u=o.INFO,c=((i={})[o.DEBUG]="log",i[o.VERBOSE]="log",i[o.INFO]="info",i[o.WARN]="warn",i[o.ERROR]="error",i),h=function(t,e){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];if(!(e<t.logLevel)){var o=(new Date).toISOString(),a=c[e];if(!a)throw new Error("Attempted to log a message with an invalid logType (value: "+e+")");console[a].apply(console,r(["["+o+"]  "+t.name+":"],n))}},l=function(){function t(t){this.name=t,this._logLevel=u,this._logHandler=h,this._userLogHandler=null,a.push(this)}return Object.defineProperty(t.prototype,"logLevel",{get:function(){return this._logLevel},set:function(t){if(!(t in o))throw new TypeError("Invalid value assigned to `logLevel`");this._logLevel=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"logHandler",{get:function(){return this._logHandler},set:function(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"userLogHandler",{get:function(){return this._userLogHandler},set:function(t){this._userLogHandler=t},enumerable:!0,configurable:!0}),t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.DEBUG],t)),this._logHandler.apply(this,r([this,o.DEBUG],t))},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.VERBOSE],t)),this._logHandler.apply(this,r([this,o.VERBOSE],t))},t.prototype.info=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.INFO],t)),this._logHandler.apply(this,r([this,o.INFO],t))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.WARN],t)),this._logHandler.apply(this,r([this,o.WARN],t))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.ERROR],t)),this._logHandler.apply(this,r([this,o.ERROR],t))},t}();function f(t){var e="string"==typeof t?s[t]:t;a.forEach((function(t){t.logLevel=e}))}function p(t,e){for(var n=function(n){var r=null;e&&e.level&&(r=s[e.level]),n.userLogHandler=null===t?null:function(e,n){for(var i=[],a=2;a<arguments.length;a++)i[a-2]=arguments[a];var s=i.map((function(t){if(null==t)return null;if("string"==typeof t)return t;if("number"==typeof t||"boolean"==typeof t)return t.toString();if(t instanceof Error)return t.message;try{return JSON.stringify(t)}catch(t){return null}})).filter((function(t){return t})).join(" ");n>=(null!=r?r:e.logLevel)&&t({level:o[n].toLowerCase(),message:s,args:i,type:e.name})}},r=0,i=a;r<i.length;r++){n(i[r])}}},function(t,e,n){"use strict";(function(t){var e=n(0),r=n.n(e);(function(){var e,n="function"==typeof Object.defineProperties?Object.defineProperty:function(t,e,n){t!=Array.prototype&&t!=Object.prototype&&(t[e]=n.value)};var i=function(e){e=["object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof t&&t,e];for(var n=0;n<e.length;++n){var r=e[n];if(r&&r.Math==Math)return r}return globalThis}(this);function o(t){var e=0;return function(){return e<t.length?{done:!1,value:t[e++]}:{done:!0}}}function a(t){var e="undefined"!=typeof Symbol&&Symbol.iterator&&t[Symbol.iterator];return e?e.call(t):{next:o(t)}}!function(t,e){if(e){var r=i;t=t.split(".");for(var o=0;o<t.length-1;o++){var a=t[o];a in r||(r[a]={}),r=r[a]}(e=e(o=r[t=t[t.length-1]]))!=o&&null!=e&&n(r,t,{configurable:!0,writable:!0,value:e})}}("Promise",(function(t){function e(t){this.b=0,this.c=void 0,this.a=[];var e=this.f();try{t(e.resolve,e.reject)}catch(t){e.reject(t)}}function n(){this.a=null}function r(t){return t instanceof e?t:new e((function(e){e(t)}))}if(t)return t;n.prototype.b=function(t){if(null==this.a){this.a=[];var e=this;this.c((function(){e.g()}))}this.a.push(t)};var o=i.setTimeout;n.prototype.c=function(t){o(t,0)},n.prototype.g=function(){for(;this.a&&this.a.length;){var t=this.a;this.a=[];for(var e=0;e<t.length;++e){var n=t[e];t[e]=null;try{n()}catch(t){this.f(t)}}}this.a=null},n.prototype.f=function(t){this.c((function(){throw t}))},e.prototype.f=function(){function t(t){return function(r){n||(n=!0,t.call(e,r))}}var e=this,n=!1;return{resolve:t(this.m),reject:t(this.g)}},e.prototype.m=function(t){if(t===this)this.g(new TypeError("A Promise cannot resolve to itself"));else if(t instanceof e)this.s(t);else{t:switch(typeof t){case"object":var n=null!=t;break t;case"function":n=!0;break t;default:n=!1}n?this.u(t):this.h(t)}},e.prototype.u=function(t){var e=void 0;try{e=t.then}catch(t){return void this.g(t)}"function"==typeof e?this.w(e,t):this.h(t)},e.prototype.g=function(t){this.i(2,t)},e.prototype.h=function(t){this.i(1,t)},e.prototype.i=function(t,e){if(0!=this.b)throw Error("Cannot settle("+t+", "+e+"): Promise already settled in state"+this.b);this.b=t,this.c=e,this.l()},e.prototype.l=function(){if(null!=this.a){for(var t=0;t<this.a.length;++t)s.b(this.a[t]);this.a=null}};var s=new n;return e.prototype.s=function(t){var e=this.f();t.Oa(e.resolve,e.reject)},e.prototype.w=function(t,e){var n=this.f();try{t.call(e,n.resolve,n.reject)}catch(t){n.reject(t)}},e.prototype.then=function(t,n){function r(t,e){return"function"==typeof t?function(e){try{i(t(e))}catch(t){o(t)}}:e}var i,o,a=new e((function(t,e){i=t,o=e}));return this.Oa(r(t,i),r(n,o)),a},e.prototype.catch=function(t){return this.then(void 0,t)},e.prototype.Oa=function(t,e){function n(){switch(r.b){case 1:t(r.c);break;case 2:e(r.c);break;default:throw Error("Unexpected state: "+r.b)}}var r=this;null==this.a?s.b(n):this.a.push(n)},e.resolve=r,e.reject=function(t){return new e((function(e,n){n(t)}))},e.race=function(t){return new e((function(e,n){for(var i=a(t),o=i.next();!o.done;o=i.next())r(o.value).Oa(e,n)}))},e.all=function(t){var n=a(t),i=n.next();return i.done?r([]):new e((function(t,e){function o(e){return function(n){a[e]=n,0==--s&&t(a)}}var a=[],s=0;do{a.push(void 0),s++,r(i.value).Oa(o(a.length-1),e),i=n.next()}while(!i.done)}))},e}));var s=s||{},u=this||self,c=/^[\w+/_-]+[=]{0,2}$/,h=null;function l(){}function f(t){var e=typeof t;if("object"==e){if(!t)return"null";if(t instanceof Array)return"array";if(t instanceof Object)return e;var n=Object.prototype.toString.call(t);if("[object Window]"==n)return"object";if("[object Array]"==n||"number"==typeof t.length&&void 0!==t.splice&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("splice"))return"array";if("[object Function]"==n||void 0!==t.call&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("call"))return"function"}else if("function"==e&&void 0===t.call)return"object";return e}function p(t){var e=f(t);return"array"==e||"object"==e&&"number"==typeof t.length}function d(t){return"function"==f(t)}function v(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}function m(t){return Object.prototype.hasOwnProperty.call(t,g)&&t[g]||(t[g]=++b)}var g="closure_uid_"+(1e9*Math.random()>>>0),b=0;function y(t,e,n){return t.call.apply(t.bind,arguments)}function w(t,e,n){if(!t)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function _(t,e,n){return(_=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?y:w).apply(null,arguments)}function x(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}var I=Date.now||function(){return+new Date};function E(t,e){function n(){}n.prototype=e.prototype,t.Za=e.prototype,t.prototype=new n,t.prototype.constructor=t}function T(t,e,n){this.code=A+t,this.message=e||N[t]||"",this.a=n||null}function S(t){var e=t&&t.code;return e?new T(e.substring(A.length),t.message,t.serverResponse):null}E(T,Error),T.prototype.v=function(){var t={code:this.code,message:this.message};return this.a&&(t.serverResponse=this.a),t},T.prototype.toJSON=function(){return this.v()};var k,A="auth/",N={"admin-restricted-operation":"This operation is restricted to administrators only.","argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-change-needs-verification":"Multi-factor users must always have a verified email.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.","invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.","invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-dynamic-link-domain":"The provided dynamic link domain is not configured or authorized for the current project.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-multi-factor-session":"The request does not contain a valid proof of first factor successful sign-in.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].","invalid-provider-id":"The specified provider ID is invalid.","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","invalid-tenant-id":"The Auth instance's tenant ID is invalid.","multi-factor-info-not-found":"The user does not have a second factor matching the identifier provided.","multi-factor-auth-required":"Proof of ownership of a second factor is required to complete sign-in.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.","missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-multi-factor-info":"No second factor identifier is provided.","missing-multi-factor-session":"The request is missing proof of first factor successful sign-in.","missing-or-invalid-nonce":"The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.","missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.","rejected-credential":"The request contains malformed or mismatching credentials.","second-factor-already-in-use":"The second factor is already enrolled on this account.","maximum-second-factor-count-exceeded":"The maximum allowed number of second factors on a user has been exceeded.","tenant-id-mismatch":"The provided tenant ID does not match the Auth instance's tenant ID",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-first-factor":"Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","unsupported-tenant-operation":"This operation is not supported in a multi-tenant context.","unverified-email":"The operation requires a verified email.","user-cancelled":"The user did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."},O={hd:{Ra:"https://staging-identitytoolkit.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",Xa:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Ua:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"b"},pd:{Ra:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",Xa:"https://securetoken.googleapis.com/v1/token",Ua:"https://identitytoolkit.googleapis.com/v2/",id:"p"},rd:{Ra:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",Xa:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Ua:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"s"},sd:{Ra:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",Xa:"https://test-securetoken.sandbox.googleapis.com/v1/token",Ua:"https://test-identitytoolkit.sandbox.googleapis.com/v2/",id:"t"}};function P(t){for(var e in O)if(O[e].id===t)return{firebaseEndpoint:(t=O[e]).Ra,secureTokenEndpoint:t.Xa,identityPlatformEndpoint:t.Ua};return null}function C(t){if(!t)return!1;try{return!!t.$goog_Thenable}catch(t){return!1}}function R(t){if(Error.captureStackTrace)Error.captureStackTrace(this,R);else{var e=Error().stack;e&&(this.stack=e)}t&&(this.message=String(t))}function L(t,e){for(var n="",r=(t=t.split("%s")).length-1,i=0;i<r;i++)n+=t[i]+(i<e.length?e[i]:"%s");R.call(this,n+t[r])}function D(t,e){throw new L("Failure"+(t?": "+t:""),Array.prototype.slice.call(arguments,1))}function j(t,e){this.c=t,this.f=e,this.b=0,this.a=null}function M(t,e){t.f(e),100>t.b&&(t.b++,e.next=t.a,t.a=e)}function F(){this.b=this.a=null}k=P("__EID__")?"__EID__":void 0,E(R,Error),R.prototype.name="CustomError",E(L,R),L.prototype.name="AssertionError",j.prototype.get=function(){if(0<this.b){this.b--;var t=this.a;this.a=t.next,t.next=null}else t=this.c();return t};var U=new j((function(){return new H}),(function(t){t.reset()}));function V(){var t=be,e=null;return t.a&&(e=t.a,t.a=t.a.next,t.a||(t.b=null),e.next=null),e}function H(){this.next=this.b=this.a=null}F.prototype.add=function(t,e){var n=U.get();n.set(t,e),this.b?this.b.next=n:this.a=n,this.b=n},H.prototype.set=function(t,e){this.a=t,this.b=e,this.next=null},H.prototype.reset=function(){this.next=this.b=this.a=null};var B=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if("string"==typeof t)return"string"!=typeof e||1!=e.length?-1:t.indexOf(e,0);for(var n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},q=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){for(var r=t.length,i="string"==typeof t?t.split(""):t,o=0;o<r;o++)o in i&&e.call(n,i[o],o,t)};var z=Array.prototype.filter?function(t,e){return Array.prototype.filter.call(t,e,void 0)}:function(t,e){for(var n=t.length,r=[],i=0,o="string"==typeof t?t.split(""):t,a=0;a<n;a++)if(a in o){var s=o[a];e.call(void 0,s,a,t)&&(r[i++]=s)}return r},K=Array.prototype.map?function(t,e){return Array.prototype.map.call(t,e,void 0)}:function(t,e){for(var n=t.length,r=Array(n),i="string"==typeof t?t.split(""):t,o=0;o<n;o++)o in i&&(r[o]=e.call(void 0,i[o],o,t));return r},G=Array.prototype.some?function(t,e){return Array.prototype.some.call(t,e,void 0)}:function(t,e){for(var n=t.length,r="string"==typeof t?t.split(""):t,i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t))return!0;return!1};function W(t,e){return 0<=B(t,e)}function X(t,e){var n;return(n=0<=(e=B(t,e)))&&Array.prototype.splice.call(t,e,1),n}function $(t,e){!function(t,e){for(var n="string"==typeof t?t.split(""):t,r=t.length-1;0<=r;--r)r in n&&e.call(void 0,n[r],r,t)}(t,(function(n,r){e.call(void 0,n,r,t)&&1==Array.prototype.splice.call(t,r,1).length&&0}))}function J(t){return Array.prototype.concat.apply([],arguments)}function Y(t){var e=t.length;if(0<e){for(var n=Array(e),r=0;r<e;r++)n[r]=t[r];return n}return[]}var Z,Q=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]},tt=/&/g,et=/</g,nt=/>/g,rt=/"/g,it=/'/g,ot=/\x00/g,at=/[\x00&<>"']/;function st(t,e){return-1!=t.indexOf(e)}function ut(t,e){return t<e?-1:t>e?1:0}t:{var ct=u.navigator;if(ct){var ht=ct.userAgent;if(ht){Z=ht;break t}}Z=""}function lt(t){return st(Z,t)}function ft(t,e){for(var n in t)e.call(void 0,t[n],n,t)}function pt(t){for(var e in t)return!1;return!0}function dt(t){var e,n={};for(e in t)n[e]=t[e];return n}var vt="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function mt(t,e){for(var n,r,i=1;i<arguments.length;i++){for(n in r=arguments[i])t[n]=r[n];for(var o=0;o<vt.length;o++)n=vt[o],Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}}function gt(t,e){t:{try{var n=t&&t.ownerDocument,r=n&&(n.defaultView||n.parentWindow);if((r=r||u).Element&&r.Location){var i=r;break t}}catch(t){}i=null}if(i&&void 0!==i[e]&&(!t||!(t instanceof i[e])&&(t instanceof i.Location||t instanceof i.Element))){if(v(t))try{var o=t.constructor.displayName||t.constructor.name||Object.prototype.toString.call(t)}catch(t){o="<object could not be stringified>"}else o=void 0===t?"undefined":null===t?"null":typeof t;D("Argument is not a %s (or a non-Element, non-Location mock); got: %s",e,o)}}function bt(t,e){this.a=t===_t&&e||"",this.b=wt}function yt(t){return t instanceof bt&&t.constructor===bt&&t.b===wt?t.a:(D("expected object of type Const, got '"+t+"'"),"type_error:Const")}bt.prototype.ra=!0,bt.prototype.qa=function(){return this.a},bt.prototype.toString=function(){return"Const{"+this.a+"}"};var wt={},_t={},xt=new bt(_t,"");function It(t,e){this.a=t===Nt&&e||"",this.b=At}function Et(t){return t instanceof It&&t.constructor===It&&t.b===At?t.a:(D("expected object of type TrustedResourceUrl, got '"+t+"' of type "+f(t)),"type_error:TrustedResourceUrl")}function Tt(t,e){var n=yt(t);if(!kt.test(n))throw Error("Invalid TrustedResourceUrl format: "+n);return t=n.replace(St,(function(t,r){if(!Object.prototype.hasOwnProperty.call(e,r))throw Error('Found marker, "'+r+'", in format string, "'+n+'", but no valid label mapping found in args: '+JSON.stringify(e));return(t=e[r])instanceof bt?yt(t):encodeURIComponent(String(t))})),new It(Nt,t)}It.prototype.ra=!0,It.prototype.qa=function(){return this.a.toString()},It.prototype.toString=function(){return"TrustedResourceUrl{"+this.a+"}"};var St=/%{(\w+)}/g,kt=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,At={},Nt={};function Ot(t,e){this.a=t===Dt&&e||"",this.b=Lt}function Pt(t){return t instanceof Ot&&t.constructor===Ot&&t.b===Lt?t.a:(D("expected object of type SafeUrl, got '"+t+"' of type "+f(t)),"type_error:SafeUrl")}Ot.prototype.ra=!0,Ot.prototype.qa=function(){return this.a.toString()},Ot.prototype.toString=function(){return"SafeUrl{"+this.a+"}"};var Ct=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;function Rt(t){return t instanceof Ot?t:(t="object"==typeof t&&t.ra?t.qa():String(t),Ct.test(t)||(t="about:invalid#zClosurez"),new Ot(Dt,t))}var Lt={},Dt={};function jt(){this.a="",this.b=Ft}function Mt(t){return t instanceof jt&&t.constructor===jt&&t.b===Ft?t.a:(D("expected object of type SafeHtml, got '"+t+"' of type "+f(t)),"type_error:SafeHtml")}jt.prototype.ra=!0,jt.prototype.qa=function(){return this.a.toString()},jt.prototype.toString=function(){return"SafeHtml{"+this.a+"}"};var Ft={};function Ut(t){var e=new jt;return e.a=t,e}Ut("<!DOCTYPE html>");var Vt=Ut("");function Ht(t,e){for(var n=t.split("%s"),r="",i=Array.prototype.slice.call(arguments,1);i.length&&1<n.length;)r+=n.shift()+i.shift();return r+n.join("%s")}function Bt(t){return at.test(t)&&(-1!=t.indexOf("&")&&(t=t.replace(tt,"&amp;")),-1!=t.indexOf("<")&&(t=t.replace(et,"&lt;")),-1!=t.indexOf(">")&&(t=t.replace(nt,"&gt;")),-1!=t.indexOf('"')&&(t=t.replace(rt,"&quot;")),-1!=t.indexOf("'")&&(t=t.replace(it,"&#39;")),-1!=t.indexOf("\0")&&(t=t.replace(ot,"&#0;"))),t}function qt(t){return qt[" "](t),t}Ut("<br>"),qt[" "]=l;var zt,Kt,Gt=lt("Opera"),Wt=lt("Trident")||lt("MSIE"),Xt=lt("Edge"),$t=Xt||Wt,Jt=lt("Gecko")&&!(st(Z.toLowerCase(),"webkit")&&!lt("Edge"))&&!(lt("Trident")||lt("MSIE"))&&!lt("Edge"),Yt=st(Z.toLowerCase(),"webkit")&&!lt("Edge");function Zt(){var t=u.document;return t?t.documentMode:void 0}t:{var Qt="",te=(Kt=Z,Jt?/rv:([^\);]+)(\)|;)/.exec(Kt):Xt?/Edge\/([\d\.]+)/.exec(Kt):Wt?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(Kt):Yt?/WebKit\/(\S+)/.exec(Kt):Gt?/(?:Version)[ \/]?(\S+)/.exec(Kt):void 0);if(te&&(Qt=te?te[1]:""),Wt){var ee=Zt();if(null!=ee&&ee>parseFloat(Qt)){zt=String(ee);break t}}zt=Qt}var ne,re={};function ie(t){return function(t,e){var n=re;return Object.prototype.hasOwnProperty.call(n,t)?n[t]:n[t]=e(t)}(t,(function(){for(var e=0,n=Q(String(zt)).split("."),r=Q(String(t)).split("."),i=Math.max(n.length,r.length),o=0;0==e&&o<i;o++){var a=n[o]||"",s=r[o]||"";do{if(a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],0==a[0].length&&0==s[0].length)break;e=ut(0==a[1].length?0:parseInt(a[1],10),0==s[1].length?0:parseInt(s[1],10))||ut(0==a[2].length,0==s[2].length)||ut(a[2],s[2]),a=a[3],s=s[3]}while(0==e)}return 0<=e}))}ne=u.document&&Wt?Zt():void 0;try{new self.OffscreenCanvas(0,0).getContext("2d")}catch(Kt){}var oe=!Wt||9<=Number(ne);function ae(t){var e=document;return"string"==typeof t?e.getElementById(t):t}function se(t,e){ft(e,(function(e,n){e&&"object"==typeof e&&e.ra&&(e=e.qa()),"style"==n?t.style.cssText=e:"class"==n?t.className=e:"for"==n?t.htmlFor=e:he.hasOwnProperty(n)?t.setAttribute(he[n],e):0==n.lastIndexOf("aria-",0)||0==n.lastIndexOf("data-",0)?t.setAttribute(n,e):t[n]=e}))}var ue,ce,he={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};function le(t,e,n){function r(n){n&&e.appendChild("string"==typeof n?t.createTextNode(n):n)}for(var i=2;i<n.length;i++){var o=n[i];!p(o)||v(o)&&0<o.nodeType?r(o):q(pe(o)?Y(o):o,r)}}function fe(t,e){return e=String(e),"application/xhtml+xml"===t.contentType&&(e=e.toLowerCase()),t.createElement(e)}function pe(t){if(t&&"number"==typeof t.length){if(v(t))return"function"==typeof t.item||"string"==typeof t.item;if(d(t))return"function"==typeof t.item}return!1}function de(t){u.setTimeout((function(){throw t}),0)}function ve(){var t=u.MessageChannel;if(void 0===t&&"undefined"!=typeof window&&window.postMessage&&window.addEventListener&&!lt("Presto")&&(t=function(){var t=fe(document,"IFRAME");t.style.display="none",function(t){var e=new It(Nt,yt(xt));gt(t,"HTMLIFrameElement"),t.src=Et(e).toString()}(t),document.documentElement.appendChild(t);var e=t.contentWindow;(t=e.document).open(),t.write(Mt(Vt)),t.close();var n="callImmediate"+Math.random(),r="file:"==e.location.protocol?"*":e.location.protocol+"//"+e.location.host;t=_((function(t){"*"!=r&&t.origin!=r||t.data!=n||this.port1.onmessage()}),this),e.addEventListener("message",t,!1),this.port1={},this.port2={postMessage:function(){e.postMessage(n,r)}}}),void 0!==t&&!lt("Trident")&&!lt("MSIE")){var e=new t,n={},r=n;return e.port1.onmessage=function(){if(void 0!==n.next){var t=(n=n.next).Db;n.Db=null,t()}},function(t){r.next={Db:t},r=r.next,e.port2.postMessage(0)}}return function(t){u.setTimeout(t,0)}}function me(t,e){ce||function(){if(u.Promise&&u.Promise.resolve){var t=u.Promise.resolve(void 0);ce=function(){t.then(ye)}}else ce=function(){var t=ye;!d(u.setImmediate)||u.Window&&u.Window.prototype&&!lt("Edge")&&u.Window.prototype.setImmediate==u.setImmediate?(ue||(ue=ve()),ue(t)):u.setImmediate(t)}}(),ge||(ce(),ge=!0),be.add(t,e)}var ge=!1,be=new F;function ye(){for(var t;t=V();){try{t.a.call(t.b)}catch(t){de(t)}M(U,t)}ge=!1}function we(t,e){if(this.a=_e,this.i=void 0,this.f=this.b=this.c=null,this.g=this.h=!1,t!=l)try{var n=this;t.call(e,(function(t){Re(n,xe,t)}),(function(t){if(!(t instanceof Ve))try{if(t instanceof Error)throw t;throw Error("Promise rejected.")}catch(t){}Re(n,Ie,t)}))}catch(t){Re(this,Ie,t)}}var _e=0,xe=2,Ie=3;function Ee(){this.next=this.f=this.b=this.g=this.a=null,this.c=!1}Ee.prototype.reset=function(){this.f=this.b=this.g=this.a=null,this.c=!1};var Te=new j((function(){return new Ee}),(function(t){t.reset()}));function Se(t,e,n){var r=Te.get();return r.g=t,r.b=e,r.f=n,r}function ke(t){if(t instanceof we)return t;var e=new we(l);return Re(e,xe,t),e}function Ae(t){return new we((function(e,n){n(t)}))}function Ne(t,e,n){Le(t,e,n,null)||me(x(e,t))}function Oe(t){return new we((function(e){var n=t.length,r=[];if(n)for(var i=function(t,i,o){n--,r[t]=i?{Mb:!0,value:o}:{Mb:!1,reason:o},0==n&&e(r)},o=0;o<t.length;o++)Ne(t[o],x(i,o,!0),x(i,o,!1));else e(r)}))}function Pe(t,e){t.b||t.a!=xe&&t.a!=Ie||De(t),t.f?t.f.next=e:t.b=e,t.f=e}function Ce(t,e,n,r){var i=Se(null,null,null);return i.a=new we((function(t,o){i.g=e?function(n){try{var i=e.call(r,n);t(i)}catch(t){o(t)}}:t,i.b=n?function(e){try{var i=n.call(r,e);void 0===i&&e instanceof Ve?o(e):t(i)}catch(t){o(t)}}:o})),i.a.c=t,Pe(t,i),i.a}function Re(t,e,n){t.a==_e&&(t===n&&(e=Ie,n=new TypeError("Promise cannot resolve to itself")),t.a=1,Le(n,t.Yc,t.Zc,t)||(t.i=n,t.a=e,t.c=null,De(t),e!=Ie||n instanceof Ve||function(t,e){t.g=!0,me((function(){t.g&&Ue.call(null,e)}))}(t,n)))}function Le(t,e,n,r){if(t instanceof we)return Pe(t,Se(e||l,n||null,r)),!0;if(C(t))return t.then(e,n,r),!0;if(v(t))try{var i=t.then;if(d(i))return function(t,e,n,r,i){function o(t){a||(a=!0,r.call(i,t))}var a=!1;try{e.call(t,(function(t){a||(a=!0,n.call(i,t))}),o)}catch(t){o(t)}}(t,i,e,n,r),!0}catch(t){return n.call(r,t),!0}return!1}function De(t){t.h||(t.h=!0,me(t.ec,t))}function je(t){var e=null;return t.b&&(e=t.b,t.b=e.next,e.next=null),t.b||(t.f=null),e}function Me(t,e,n,r){if(n==Ie&&e.b&&!e.c)for(;t&&t.g;t=t.c)t.g=!1;if(e.a)e.a.c=null,Fe(e,n,r);else try{e.c?e.g.call(e.f):Fe(e,n,r)}catch(t){Ue.call(null,t)}M(Te,e)}function Fe(t,e,n){e==xe?t.g.call(t.f,n):t.b&&t.b.call(t.f,n)}we.prototype.then=function(t,e,n){return Ce(this,d(t)?t:null,d(e)?e:null,n)},we.prototype.$goog_Thenable=!0,(e=we.prototype).ma=function(t,e){return(t=Se(t,t,e)).c=!0,Pe(this,t),this},e.o=function(t,e){return Ce(this,null,t,e)},e.cancel=function(t){if(this.a==_e){var e=new Ve(t);me((function(){!function t(e,n){if(e.a==_e)if(e.c){var r=e.c;if(r.b){for(var i=0,o=null,a=null,s=r.b;s&&(s.c||(i++,s.a==e&&(o=s),!(o&&1<i)));s=s.next)o||(a=s);o&&(r.a==_e&&1==i?t(r,n):(a?((i=a).next==r.f&&(r.f=i),i.next=i.next.next):je(r),Me(r,o,Ie,n)))}e.c=null}else Re(e,Ie,n)}(this,e)}),this)}},e.Yc=function(t){this.a=_e,Re(this,xe,t)},e.Zc=function(t){this.a=_e,Re(this,Ie,t)},e.ec=function(){for(var t;t=je(this);)Me(this,t,this.a,this.i);this.h=!1};var Ue=de;function Ve(t){R.call(this,t)}function He(){0!=Be&&(qe[m(this)]=this),this.wa=this.wa,this.na=this.na}E(Ve,R),Ve.prototype.name="cancel";var Be=0,qe={};function ze(t){if(!t.wa&&(t.wa=!0,t.Ba(),0!=Be)){var e=m(t);if(0!=Be&&t.na&&0<t.na.length)throw Error(t+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete qe[e]}}He.prototype.wa=!1,He.prototype.Ba=function(){if(this.na)for(;this.na.length;)this.na.shift()()};var Ke=Object.freeze||function(t){return t},Ge=!Wt||9<=Number(ne),We=Wt&&!ie("9"),Xe=function(){if(!u.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{u.addEventListener("test",l,e),u.removeEventListener("test",l,e)}catch(t){}return t}();function $e(t,e){this.type=t,this.b=this.target=e,this.defaultPrevented=!1}function Je(t,e){if($e.call(this,t?t.type:""),this.relatedTarget=this.b=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.pointerId=0,this.pointerType="",this.a=null,t){var n=this.type=t.type,r=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.b=e,e=t.relatedTarget){if(Jt){t:{try{qt(e.nodeName);var i=!0;break t}catch(t){}i=!1}i||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,r?(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0):(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType="string"==typeof t.pointerType?t.pointerType:Ye[t.pointerType]||"",this.a=t,t.defaultPrevented&&this.preventDefault()}}$e.prototype.preventDefault=function(){this.defaultPrevented=!0},E(Je,$e);var Ye=Ke({2:"touch",3:"pen",4:"mouse"});Je.prototype.preventDefault=function(){Je.Za.preventDefault.call(this);var t=this.a;if(t.preventDefault)t.preventDefault();else if(t.returnValue=!1,We)try{(t.ctrlKey||112<=t.keyCode&&123>=t.keyCode)&&(t.keyCode=-1)}catch(t){}},Je.prototype.f=function(){return this.a};var Ze="closure_listenable_"+(1e6*Math.random()|0),Qe=0;function tn(t,e,n,r,i){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!r,this.Ta=i,this.key=++Qe,this.ua=this.Na=!1}function en(t){t.ua=!0,t.listener=null,t.proxy=null,t.src=null,t.Ta=null}function nn(t){this.src=t,this.a={},this.b=0}function rn(t,e){var n=e.type;n in t.a&&X(t.a[n],e)&&(en(e),0==t.a[n].length&&(delete t.a[n],t.b--))}function on(t,e,n,r){for(var i=0;i<t.length;++i){var o=t[i];if(!o.ua&&o.listener==e&&o.capture==!!n&&o.Ta==r)return i}return-1}nn.prototype.add=function(t,e,n,r,i){var o=t.toString();(t=this.a[o])||(t=this.a[o]=[],this.b++);var a=on(t,e,r,i);return-1<a?(e=t[a],n||(e.Na=!1)):((e=new tn(e,this.src,o,!!r,i)).Na=n,t.push(e)),e};var an="closure_lm_"+(1e6*Math.random()|0),sn={};function un(t,e,n,r,i){if(r&&r.once)hn(t,e,n,r,i);else if(Array.isArray(e))for(var o=0;o<e.length;o++)un(t,e[o],n,r,i);else n=yn(n),t&&t[Ze]?_n(t,e,n,v(r)?!!r.capture:!!r,i):cn(t,e,n,!1,r,i)}function cn(t,e,n,r,i,o){if(!e)throw Error("Invalid event type");var a=v(i)?!!i.capture:!!i,s=gn(t);if(s||(t[an]=s=new nn(t)),!(n=s.add(e,n,r,a,o)).proxy){if(r=function(){var t=mn,e=Ge?function(n){return t.call(e.src,e.listener,n)}:function(n){if(!(n=t.call(e.src,e.listener,n)))return n};return e}(),n.proxy=r,r.src=t,r.listener=n,t.addEventListener)Xe||(i=a),void 0===i&&(i=!1),t.addEventListener(e.toString(),r,i);else if(t.attachEvent)t.attachEvent(pn(e.toString()),r);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(r)}0}}function hn(t,e,n,r,i){if(Array.isArray(e))for(var o=0;o<e.length;o++)hn(t,e[o],n,r,i);else n=yn(n),t&&t[Ze]?xn(t,e,n,v(r)?!!r.capture:!!r,i):cn(t,e,n,!0,r,i)}function ln(t,e,n,r,i){if(Array.isArray(e))for(var o=0;o<e.length;o++)ln(t,e[o],n,r,i);else r=v(r)?!!r.capture:!!r,n=yn(n),t&&t[Ze]?(t=t.u,(e=String(e).toString())in t.a&&(-1<(n=on(o=t.a[e],n,r,i))&&(en(o[n]),Array.prototype.splice.call(o,n,1),0==o.length&&(delete t.a[e],t.b--)))):t&&(t=gn(t))&&(e=t.a[e.toString()],t=-1,e&&(t=on(e,n,r,i)),(n=-1<t?e[t]:null)&&fn(n))}function fn(t){if("number"!=typeof t&&t&&!t.ua){var e=t.src;if(e&&e[Ze])rn(e.u,t);else{var n=t.type,r=t.proxy;e.removeEventListener?e.removeEventListener(n,r,t.capture):e.detachEvent?e.detachEvent(pn(n),r):e.addListener&&e.removeListener&&e.removeListener(r),(n=gn(e))?(rn(n,t),0==n.b&&(n.src=null,e[an]=null)):en(t)}}}function pn(t){return t in sn?sn[t]:sn[t]="on"+t}function dn(t,e,n,r){var i=!0;if((t=gn(t))&&(e=t.a[e.toString()]))for(e=e.concat(),t=0;t<e.length;t++){var o=e[t];o&&o.capture==n&&!o.ua&&(o=vn(o,r),i=i&&!1!==o)}return i}function vn(t,e){var n=t.listener,r=t.Ta||t.src;return t.Na&&fn(t),n.call(r,e)}function mn(t,e){if(t.ua)return!0;if(!Ge){if(!e)t:{e=["window","event"];for(var n=u,r=0;r<e.length;r++)if(null==(n=n[e[r]])){e=null;break t}e=n}if(e=new Je(r=e,this),n=!0,!(0>r.keyCode||null!=r.returnValue)){t:{var i=!1;if(0==r.keyCode)try{r.keyCode=-1;break t}catch(t){i=!0}(i||null==r.returnValue)&&(r.returnValue=!0)}for(r=[],i=e.b;i;i=i.parentNode)r.push(i);for(t=t.type,i=r.length-1;0<=i;i--){e.b=r[i];var o=dn(r[i],t,!0,e);n=n&&o}for(i=0;i<r.length;i++)e.b=r[i],o=dn(r[i],t,!1,e),n=n&&o}return n}return vn(t,new Je(e,this))}function gn(t){return(t=t[an])instanceof nn?t:null}var bn="__closure_events_fn_"+(1e9*Math.random()>>>0);function yn(t){return d(t)?t:(t[bn]||(t[bn]=function(e){return t.handleEvent(e)}),t[bn])}function wn(){He.call(this),this.u=new nn(this),this.Yb=this,this.eb=null}function _n(t,e,n,r,i){t.u.add(String(e),n,!1,r,i)}function xn(t,e,n,r,i){t.u.add(String(e),n,!0,r,i)}function In(t,e,n,r){if(!(e=t.u.a[String(e)]))return!0;e=e.concat();for(var i=!0,o=0;o<e.length;++o){var a=e[o];if(a&&!a.ua&&a.capture==n){var s=a.listener,u=a.Ta||a.src;a.Na&&rn(t.u,a),i=!1!==s.call(u,r)&&i}}return i&&!r.defaultPrevented}function En(t,e,n){if(d(t))n&&(t=_(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=_(t.handleEvent,t)}return 2147483647<Number(e)?-1:u.setTimeout(t,e||0)}function Tn(t){var e=null;return new we((function(n,r){-1==(e=En((function(){n(void 0)}),t))&&r(Error("Failed to schedule timer."))})).o((function(t){throw u.clearTimeout(e),t}))}function Sn(t){if(t.V&&"function"==typeof t.V)return t.V();if("string"==typeof t)return t.split("");if(p(t)){for(var e=[],n=t.length,r=0;r<n;r++)e.push(t[r]);return e}for(r in e=[],n=0,t)e[n++]=t[r];return e}function kn(t){if(t.X&&"function"==typeof t.X)return t.X();if(!t.V||"function"!=typeof t.V){if(p(t)||"string"==typeof t){var e=[];t=t.length;for(var n=0;n<t;n++)e.push(n);return e}for(var r in e=[],n=0,t)e[n++]=r;return e}}function An(t,e){this.b={},this.a=[],this.c=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(t)if(t instanceof An)for(n=t.X(),r=0;r<n.length;r++)this.set(n[r],t.get(n[r]));else for(r in t)this.set(r,t[r])}function Nn(t){if(t.c!=t.a.length){for(var e=0,n=0;e<t.a.length;){var r=t.a[e];On(t.b,r)&&(t.a[n++]=r),e++}t.a.length=n}if(t.c!=t.a.length){var i={};for(n=e=0;e<t.a.length;)On(i,r=t.a[e])||(t.a[n++]=r,i[r]=1),e++;t.a.length=n}}function On(t,e){return Object.prototype.hasOwnProperty.call(t,e)}E(wn,He),wn.prototype[Ze]=!0,wn.prototype.addEventListener=function(t,e,n,r){un(this,t,e,n,r)},wn.prototype.removeEventListener=function(t,e,n,r){ln(this,t,e,n,r)},wn.prototype.dispatchEvent=function(t){var e,n=this.eb;if(n)for(e=[];n;n=n.eb)e.push(n);n=this.Yb;var r=t.type||t;if("string"==typeof t)t=new $e(t,n);else if(t instanceof $e)t.target=t.target||n;else{var i=t;mt(t=new $e(r,n),i)}if(i=!0,e)for(var o=e.length-1;0<=o;o--){var a=t.b=e[o];i=In(a,r,!0,t)&&i}if(i=In(a=t.b=n,r,!0,t)&&i,i=In(a,r,!1,t)&&i,e)for(o=0;o<e.length;o++)i=In(a=t.b=e[o],r,!1,t)&&i;return i},wn.prototype.Ba=function(){if(wn.Za.Ba.call(this),this.u){var t,e=this.u;for(t in e.a){for(var n=e.a[t],r=0;r<n.length;r++)en(n[r]);delete e.a[t],e.b--}}this.eb=null},(e=An.prototype).V=function(){Nn(this);for(var t=[],e=0;e<this.a.length;e++)t.push(this.b[this.a[e]]);return t},e.X=function(){return Nn(this),this.a.concat()},e.clear=function(){this.b={},this.c=this.a.length=0},e.get=function(t,e){return On(this.b,t)?this.b[t]:e},e.set=function(t,e){On(this.b,t)||(this.c++,this.a.push(t)),this.b[t]=e},e.forEach=function(t,e){for(var n=this.X(),r=0;r<n.length;r++){var i=n[r],o=this.get(i);t.call(e,o,i,this)}};var Pn=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/\\#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Cn(t,e){var n;this.b=this.i=this.f="",this.l=null,this.g=this.c="",this.h=!1,t instanceof Cn?(this.h=void 0!==e?e:t.h,Rn(this,t.f),this.i=t.i,this.b=t.b,Ln(this,t.l),this.c=t.c,Dn(this,tr(t.a)),this.g=t.g):t&&(n=String(t).match(Pn))?(this.h=!!e,Rn(this,n[1]||"",!0),this.i=Vn(n[2]||""),this.b=Vn(n[3]||"",!0),Ln(this,n[4]),this.c=Vn(n[5]||"",!0),Dn(this,n[6]||"",!0),this.g=Vn(n[7]||"")):(this.h=!!e,this.a=new Xn(null,this.h))}function Rn(t,e,n){t.f=n?Vn(e,!0):e,t.f&&(t.f=t.f.replace(/:$/,""))}function Ln(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.l=e}else t.l=null}function Dn(t,e,n){e instanceof Xn?(t.a=e,function(t,e){e&&!t.f&&($n(t),t.c=null,t.a.forEach((function(t,e){var n=e.toLowerCase();e!=n&&(Yn(this,e),Qn(this,n,t))}),t)),t.f=e}(t.a,t.h)):(n||(e=Hn(e,Gn)),t.a=new Xn(e,t.h))}function jn(t,e,n){t.a.set(e,n)}function Mn(t,e){return t.a.get(e)}function Fn(t){return t instanceof Cn?new Cn(t):new Cn(t,void 0)}function Un(t,e){var n=new Cn(null,void 0);return Rn(n,"https"),t&&(n.b=t),e&&(n.c=e),n}function Vn(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function Hn(t,e,n){return"string"==typeof t?(t=encodeURI(t).replace(e,Bn),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function Bn(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}Cn.prototype.toString=function(){var t=[],e=this.f;e&&t.push(Hn(e,qn,!0),":");var n=this.b;return(n||"file"==e)&&(t.push("//"),(e=this.i)&&t.push(Hn(e,qn,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.l)&&t.push(":",String(n))),(n=this.c)&&(this.b&&"/"!=n.charAt(0)&&t.push("/"),t.push(Hn(n,"/"==n.charAt(0)?Kn:zn,!0))),(n=this.a.toString())&&t.push("?",n),(n=this.g)&&t.push("#",Hn(n,Wn)),t.join("")},Cn.prototype.resolve=function(t){var e=new Cn(this),n=!!t.f;n?Rn(e,t.f):n=!!t.i,n?e.i=t.i:n=!!t.b,n?e.b=t.b:n=null!=t.l;var r=t.c;if(n)Ln(e,t.l);else if(n=!!t.c){if("/"!=r.charAt(0))if(this.b&&!this.c)r="/"+r;else{var i=e.c.lastIndexOf("/");-1!=i&&(r=e.c.substr(0,i+1)+r)}if(".."==(i=r)||"."==i)r="";else if(st(i,"./")||st(i,"/.")){r=0==i.lastIndexOf("/",0),i=i.split("/");for(var o=[],a=0;a<i.length;){var s=i[a++];"."==s?r&&a==i.length&&o.push(""):".."==s?((1<o.length||1==o.length&&""!=o[0])&&o.pop(),r&&a==i.length&&o.push("")):(o.push(s),r=!0)}r=o.join("/")}else r=i}return n?e.c=r:n=""!==t.a.toString(),n?Dn(e,tr(t.a)):n=!!t.g,n&&(e.g=t.g),e};var qn=/[#\/\?@]/g,zn=/[#\?:]/g,Kn=/[#\?]/g,Gn=/[#\?@]/g,Wn=/#/g;function Xn(t,e){this.b=this.a=null,this.c=t||null,this.f=!!e}function $n(t){t.a||(t.a=new An,t.b=0,t.c&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var r=t[n].indexOf("="),i=null;if(0<=r){var o=t[n].substring(0,r);i=t[n].substring(r+1)}else o=t[n];e(o,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(t.c,(function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})))}function Jn(t){var e=kn(t);if(void 0===e)throw Error("Keys are undefined");var n=new Xn(null,void 0);t=Sn(t);for(var r=0;r<e.length;r++){var i=e[r],o=t[r];Array.isArray(o)?Qn(n,i,o):n.add(i,o)}return n}function Yn(t,e){$n(t),e=er(t,e),On(t.a.b,e)&&(t.c=null,t.b-=t.a.get(e).length,On((t=t.a).b,e)&&(delete t.b[e],t.c--,t.a.length>2*t.c&&Nn(t)))}function Zn(t,e){return $n(t),e=er(t,e),On(t.a.b,e)}function Qn(t,e,n){Yn(t,e),0<n.length&&(t.c=null,t.a.set(er(t,e),Y(n)),t.b+=n.length)}function tr(t){var e=new Xn;return e.c=t.c,t.a&&(e.a=new An(t.a),e.b=t.b),e}function er(t,e){return e=String(e),t.f&&(e=e.toLowerCase()),e}function nr(t){var e=[];return function t(e,n,r){if(null==n)r.push("null");else{if("object"==typeof n){if(Array.isArray(n)){var i=n;n=i.length,r.push("[");for(var o="",a=0;a<n;a++)r.push(o),t(e,i[a],r),o=",";return void r.push("]")}if(!(n instanceof String||n instanceof Number||n instanceof Boolean)){for(i in r.push("{"),o="",n)Object.prototype.hasOwnProperty.call(n,i)&&("function"!=typeof(a=n[i])&&(r.push(o),ar(i,r),r.push(":"),t(e,a,r),o=","));return void r.push("}")}n=n.valueOf()}switch(typeof n){case"string":ar(n,r);break;case"number":r.push(isFinite(n)&&!isNaN(n)?String(n):"null");break;case"boolean":r.push(String(n));break;case"function":r.push("null");break;default:throw Error("Unknown type: "+typeof n)}}}(new rr,t,e),e.join("")}function rr(){}(e=Xn.prototype).add=function(t,e){$n(this),this.c=null,t=er(this,t);var n=this.a.get(t);return n||this.a.set(t,n=[]),n.push(e),this.b+=1,this},e.clear=function(){this.a=this.c=null,this.b=0},e.forEach=function(t,e){$n(this),this.a.forEach((function(n,r){q(n,(function(n){t.call(e,n,r,this)}),this)}),this)},e.X=function(){$n(this);for(var t=this.a.V(),e=this.a.X(),n=[],r=0;r<e.length;r++)for(var i=t[r],o=0;o<i.length;o++)n.push(e[r]);return n},e.V=function(t){$n(this);var e=[];if("string"==typeof t)Zn(this,t)&&(e=J(e,this.a.get(er(this,t))));else{t=this.a.V();for(var n=0;n<t.length;n++)e=J(e,t[n])}return e},e.set=function(t,e){return $n(this),this.c=null,Zn(this,t=er(this,t))&&(this.b-=this.a.get(t).length),this.a.set(t,[e]),this.b+=1,this},e.get=function(t,e){return t&&0<(t=this.V(t)).length?String(t[0]):e},e.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var t=[],e=this.a.X(),n=0;n<e.length;n++){var r=e[n],i=encodeURIComponent(String(r));r=this.V(r);for(var o=0;o<r.length;o++){var a=i;""!==r[o]&&(a+="="+encodeURIComponent(String(r[o]))),t.push(a)}}return this.c=t.join("&")};var ir={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\u000b"},or=/\uffff/.test("￿")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;function ar(t,e){e.push('"',t.replace(or,(function(t){var e=ir[t];return e||(e="\\u"+(65536|t.charCodeAt(0)).toString(16).substr(1),ir[t]=e),e})),'"')}function sr(){var t=Sr();return Wt&&!!ne&&11==ne||/Edge\/\d+/.test(t)}function ur(){return u.window&&u.window.location.href||self&&self.location&&self.location.href||""}function cr(t,e){e=e||u.window;var n="about:blank";t&&(n=Pt(Rt(t))),e.location.href=n}function hr(t){return!!((t=(t||Sr()).toLowerCase()).match(/android/)||t.match(/webos/)||t.match(/iphone|ipad|ipod/)||t.match(/blackberry/)||t.match(/windows phone/)||t.match(/iemobile/))}function lr(t){t=t||u.window;try{t.close()}catch(t){}}function fr(t,e,n){var r=Math.floor(1e9*Math.random()).toString();e=e||500,n=n||600;var i=(window.screen.availHeight-n)/2,o=(window.screen.availWidth-e)/2;for(a in e={width:e,height:n,top:0<i?i:0,left:0<o?o:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1},n=Sr().toLowerCase(),r&&(e.target=r,st(n,"crios/")&&(e.target="_blank")),Ir(Sr())==_r&&(t=t||"http://localhost",e.scrollbars=!0),n=t||"",(t=e)||(t={}),r=window,e=n instanceof Ot?n:Rt(void 0!==n.href?n.href:String(n)),n=t.target||n.target,i=[],t)switch(a){case"width":case"height":case"top":case"left":i.push(a+"="+t[a]);break;case"target":case"noopener":case"noreferrer":break;default:i.push(a+"="+(t[a]?1:0))}var a=i.join(",");if((lt("iPhone")&&!lt("iPod")&&!lt("iPad")||lt("iPad")||lt("iPod"))&&r.navigator&&r.navigator.standalone&&n&&"_self"!=n?(gt(a=fe(document,"A"),"HTMLAnchorElement"),e instanceof Ot||e instanceof Ot||(e="object"==typeof e&&e.ra?e.qa():String(e),Ct.test(e)||(e="about:invalid#zClosurez"),e=new Ot(Dt,e)),a.href=Pt(e),a.setAttribute("target",n),t.noreferrer&&a.setAttribute("rel","noreferrer"),(t=document.createEvent("MouseEvent")).initMouseEvent("click",!0,!0,r,1),a.dispatchEvent(t),a={}):t.noreferrer?(a=r.open("",n,a),t=Pt(e),a&&($t&&st(t,";")&&(t="'"+t.replace(/'/g,"%27")+"'"),a.opener=null,t=Ut('<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+Bt(t)+'">'),r=a.document)&&(r.write(Mt(t)),r.close())):(a=r.open(Pt(e),n,a))&&t.noopener&&(a.opener=null),a)try{a.focus()}catch(t){}return a}var pr=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,dr=/^[^@]+@[^@]+$/;function vr(){var t=null;return new we((function(e){"complete"==u.document.readyState?e():(t=function(){e()},hn(window,"load",t))})).o((function(e){throw ln(window,"load",t),e}))}function mr(t){return t=t||Sr(),!("file:"!==Pr()&&"ionic:"!==Pr()||!t.toLowerCase().match(/iphone|ipad|ipod|android/))}function gr(){var t=u.window;try{return!(!t||t==t.top)}catch(t){return!1}}function br(){return void 0!==u.WorkerGlobalScope&&"function"==typeof u.importScripts}function yr(){return r.a.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":r.a.INTERNAL.hasOwnProperty("node")?"Node":br()?"Worker":"Browser"}function wr(){var t=yr();return"ReactNative"===t||"Node"===t}var _r="Firefox",xr="Chrome";function Ir(t){var e=t.toLowerCase();return st(e,"opera/")||st(e,"opr/")||st(e,"opios/")?"Opera":st(e,"iemobile")?"IEMobile":st(e,"msie")||st(e,"trident/")?"IE":st(e,"edge/")?"Edge":st(e,"firefox/")?_r:st(e,"silk/")?"Silk":st(e,"blackberry")?"Blackberry":st(e,"webos")?"Webos":!st(e,"safari/")||st(e,"chrome/")||st(e,"crios/")||st(e,"android")?!st(e,"chrome/")&&!st(e,"crios/")||st(e,"edge/")?st(e,"android")?"Android":(t=t.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&2==t.length?t[1]:"Other":xr:"Safari"}var Er={jd:"FirebaseCore-web",ld:"FirebaseUI-web"};function Tr(t,e){e=e||[];var n,r=[],i={};for(n in Er)i[Er[n]]=!0;for(n=0;n<e.length;n++)void 0!==i[e[n]]&&(delete i[e[n]],r.push(e[n]));return r.sort(),(e=r).length||(e=["FirebaseCore-web"]),"Browser"===(r=yr())?r=Ir(i=Sr()):"Worker"===r&&(r=Ir(i=Sr())+"-"+r),r+"/JsCore/"+t+"/"+e.join(",")}function Sr(){return u.navigator&&u.navigator.userAgent||""}function kr(t,e){t=t.split("."),e=e||u;for(var n=0;n<t.length&&"object"==typeof e&&null!=e;n++)e=e[t[n]];return n!=t.length&&(e=void 0),e}function Ar(){try{var t=u.localStorage,e=jr();if(t)return t.setItem(e,"1"),t.removeItem(e),!sr()||!!u.indexedDB}catch(t){return br()&&!!u.indexedDB}return!1}function Nr(){return(Or()||"chrome-extension:"===Pr()||mr())&&!wr()&&Ar()&&!br()}function Or(){return"http:"===Pr()||"https:"===Pr()}function Pr(){return u.location&&u.location.protocol||null}function Cr(t){return!hr(t=t||Sr())&&Ir(t)!=_r}function Rr(t){return void 0===t?null:nr(t)}function Lr(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&null!==t[e]&&void 0!==t[e]&&(n[e]=t[e]);return n}function Dr(t){if(null!==t)return JSON.parse(t)}function jr(t){return t||Math.floor(1e9*Math.random()).toString()}function Mr(t){return"Safari"!=Ir(t=t||Sr())&&!t.toLowerCase().match(/iphone|ipad|ipod/)}function Fr(){var t=u.___jsl;if(t&&t.H)for(var e in t.H)if(t.H[e].r=t.H[e].r||[],t.H[e].L=t.H[e].L||[],t.H[e].r=t.H[e].L.concat(),t.CP)for(var n=0;n<t.CP.length;n++)t.CP[n]=null}function Ur(t,e){if(t>e)throw Error("Short delay should be less than long delay!");this.a=t,this.c=e,t=Sr(),e=yr(),this.b=hr(t)||"ReactNative"===e}function Vr(){var t=u.document;return!t||void 0===t.visibilityState||"visible"==t.visibilityState}function Hr(t){try{var e=new Date(parseInt(t,10));if(!isNaN(e.getTime())&&!/[^0-9]/.test(t))return e.toUTCString()}catch(t){}return null}function Br(){return!(!kr("fireauth.oauthhelper",u)&&!kr("fireauth.iframe",u))}Ur.prototype.get=function(){var t=u.navigator;return!t||"boolean"!=typeof t.onLine||!Or()&&"chrome-extension:"!==Pr()&&void 0===t.connection||t.onLine?this.b?this.c:this.a:Math.min(5e3,this.a)};var qr,zr={};function Kr(t){zr[t]||(zr[t]=!0,"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(t))}try{var Gr={};Object.defineProperty(Gr,"abcd",{configurable:!0,enumerable:!0,value:1}),Object.defineProperty(Gr,"abcd",{configurable:!0,enumerable:!0,value:2}),qr=2==Gr.abcd}catch(Kt){qr=!1}function Wr(t,e,n){qr?Object.defineProperty(t,e,{configurable:!0,enumerable:!0,value:n}):t[e]=n}function Xr(t,e){if(e)for(var n in e)e.hasOwnProperty(n)&&Wr(t,n,e[n])}function $r(t){var e={};return Xr(e,t),e}function Jr(t){var e=t;if("object"==typeof t&&null!=t)for(var n in e="length"in t?[]:{},t)Wr(e,n,Jr(t[n]));return e}function Yr(t){var e=t&&(t[ni]?"phone":null);if(!(e&&t&&t[ei]))throw new T("internal-error","Internal assert: invalid MultiFactorInfo object");Wr(this,"uid",t[ei]),Wr(this,"displayName",t[Qr]||null);var n=null;t[ti]&&(n=new Date(t[ti]).toUTCString()),Wr(this,"enrollmentTime",n),Wr(this,"factorId",e)}function Zr(t){try{var e=new ri(t)}catch(t){e=null}return e}Yr.prototype.v=function(){return{uid:this.uid,displayName:this.displayName,factorId:this.factorId,enrollmentTime:this.enrollmentTime}};var Qr="displayName",ti="enrolledAt",ei="mfaEnrollmentId",ni="phoneInfo";function ri(t){Yr.call(this,t),Wr(this,"phoneNumber",t[ni])}function ii(t){var e={},n=t[ui],r=t[hi],i=t[li];if(t=Zr(t[ci]),!i||i!=ai&&i!=si&&!n||i==si&&!r||i==oi&&!t)throw Error("Invalid checkActionCode response!");i==si?(e[pi]=n||null,e[vi]=n||null,e[fi]=r):(e[pi]=r||null,e[vi]=r||null,e[fi]=n||null),e[di]=t||null,Wr(this,gi,i),Wr(this,mi,Jr(e))}E(ri,Yr),ri.prototype.v=function(){var t=ri.Za.v.call(this);return t.phoneNumber=this.phoneNumber,t};var oi="REVERT_SECOND_FACTOR_ADDITION",ai="EMAIL_SIGNIN",si="VERIFY_AND_CHANGE_EMAIL",ui="email",ci="mfaInfo",hi="newEmail",li="requestType",fi="email",pi="fromEmail",di="multiFactorInfo",vi="previousEmail",mi="data",gi="operation";function bi(t){var e=Mn(t=Fn(t),yi)||null,n=Mn(t,wi)||null,r=Mn(t,Ii)||null;if(r=r&&Ti[r]||null,!e||!n||!r)throw new T("argument-error",yi+", "+wi+"and "+Ii+" are required in a valid action code URL.");Xr(this,{apiKey:e,operation:r,code:n,continueUrl:Mn(t,_i)||null,languageCode:Mn(t,xi)||null,tenantId:Mn(t,Ei)||null})}var yi="apiKey",wi="oobCode",_i="continueUrl",xi="languageCode",Ii="mode",Ei="tenantId",Ti={recoverEmail:"RECOVER_EMAIL",resetPassword:"PASSWORD_RESET",revertSecondFactorAddition:oi,signIn:ai,verifyAndChangeEmail:si,verifyEmail:"VERIFY_EMAIL"};function Si(t){try{return new bi(t)}catch(t){return null}}function ki(t){var e=t[Ci];if(void 0===e)throw new T("missing-continue-uri");if("string"!=typeof e||"string"==typeof e&&!e.length)throw new T("invalid-continue-uri");this.h=e,this.b=this.a=null,this.g=!1;var n=t[Ai];if(n&&"object"==typeof n){e=n[Di];var r=n[Ri];if(n=n[Li],"string"==typeof e&&e.length){if(this.a=e,void 0!==r&&"boolean"!=typeof r)throw new T("argument-error",Ri+" property must be a boolean when specified.");if(this.g=!!r,void 0!==n&&("string"!=typeof n||"string"==typeof n&&!n.length))throw new T("argument-error",Li+" property must be a non empty string when specified.");this.b=n||null}else{if(void 0!==e)throw new T("argument-error",Di+" property must be a non empty string when specified.");if(void 0!==r||void 0!==n)throw new T("missing-android-pkg-name")}}else if(void 0!==n)throw new T("argument-error",Ai+" property must be a non null object when specified.");if(this.f=null,(e=t[Pi])&&"object"==typeof e){if("string"==typeof(e=e[ji])&&e.length)this.f=e;else if(void 0!==e)throw new T("argument-error",ji+" property must be a non empty string when specified.")}else if(void 0!==e)throw new T("argument-error",Pi+" property must be a non null object when specified.");if(void 0!==(e=t[Oi])&&"boolean"!=typeof e)throw new T("argument-error",Oi+" property must be a boolean when specified.");if(this.c=!!e,void 0!==(t=t[Ni])&&("string"!=typeof t||"string"==typeof t&&!t.length))throw new T("argument-error",Ni+" property must be a non empty string when specified.");this.i=t||null}var Ai="android",Ni="dynamicLinkDomain",Oi="handleCodeInApp",Pi="iOS",Ci="url",Ri="installApp",Li="minimumVersion",Di="packageName",ji="bundleId";function Mi(t){var e={};for(var n in e.continueUrl=t.h,e.canHandleCodeInApp=t.c,(e.androidPackageName=t.a)&&(e.androidMinimumVersion=t.b,e.androidInstallApp=t.g),e.iOSBundleId=t.f,e.dynamicLinkDomain=t.i,e)null===e[n]&&delete e[n];return e}var Fi=null;function Ui(t){var e="";return function(t,e){function n(e){for(;r<t.length;){var n=t.charAt(r++),i=Fi[n];if(null!=i)return i;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return e}!function(){if(!Fi){Fi={};for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),e=["+/=","+/","-_=","-_.","-_"],n=0;5>n;n++)for(var r=t.concat(e[n].split("")),i=0;i<r.length;i++){var o=r[i];void 0===Fi[o]&&(Fi[o]=i)}}}();for(var r=0;;){var i=n(-1),o=n(0),a=n(64),s=n(64);if(64===s&&-1===i)break;e(i<<2|o>>4),64!=a&&(e(o<<4&240|a>>2),64!=s&&e(a<<6&192|s))}}(t,(function(t){e+=String.fromCharCode(t)})),e}function Vi(t){var e=Bi(t);if(!(e&&e.sub&&e.iss&&e.aud&&e.exp))throw Error("Invalid JWT");this.g=t,this.c=e.exp,this.h=e.sub,I(),this.a=e.provider_id||e.firebase&&e.firebase.sign_in_provider||null,this.f=e.firebase&&e.firebase.tenant||null,this.b=!!e.is_anonymous||"anonymous"==this.a}function Hi(t){try{return new Vi(t)}catch(t){return null}}function Bi(t){if(!t)return null;if(3!=(t=t.split(".")).length)return null;for(var e=(4-(t=t[1]).length%4)%4,n=0;n<e;n++)t+=".";try{return JSON.parse(Ui(t))}catch(t){}return null}Vi.prototype.S=function(){return this.f},Vi.prototype.i=function(){return this.b},Vi.prototype.toString=function(){return this.g};var qi="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),zi=["client_id","response_type","scope","redirect_uri","state"],Ki={kd:{Ha:"locale",ta:700,sa:600,ea:"facebook.com",Va:zi},md:{Ha:null,ta:500,sa:750,ea:"github.com",Va:zi},nd:{Ha:"hl",ta:515,sa:680,ea:"google.com",Va:zi},td:{Ha:"lang",ta:485,sa:705,ea:"twitter.com",Va:qi},gd:{Ha:"locale",ta:600,sa:600,ea:"apple.com",Va:[]}};function Gi(t){for(var e in Ki)if(Ki[e].ea==t)return Ki[e];return null}function Wi(t){var e={};e["facebook.com"]=Zi,e["google.com"]=to,e["github.com"]=Qi,e["twitter.com"]=eo;var n=t&&t[$i];try{if(n)return e[n]?new e[n](t):new Yi(t);if(void 0!==t[Xi])return new Ji(t)}catch(t){}return null}var Xi="idToken",$i="providerId";function Ji(t){var e=t[$i];if(!e&&t[Xi]){var n=Hi(t[Xi]);n&&n.a&&(e=n.a)}if(!e)throw Error("Invalid additional user info!");"anonymous"!=e&&"custom"!=e||(e=null),n=!1,void 0!==t.isNewUser?n=!!t.isNewUser:"identitytoolkit#SignupNewUserResponse"===t.kind&&(n=!0),Wr(this,"providerId",e),Wr(this,"isNewUser",n)}function Yi(t){Ji.call(this,t),Wr(this,"profile",Jr((t=Dr(t.rawUserInfo||"{}"))||{}))}function Zi(t){if(Yi.call(this,t),"facebook.com"!=this.providerId)throw Error("Invalid provider ID!")}function Qi(t){if(Yi.call(this,t),"github.com"!=this.providerId)throw Error("Invalid provider ID!");Wr(this,"username",this.profile&&this.profile.login||null)}function to(t){if(Yi.call(this,t),"google.com"!=this.providerId)throw Error("Invalid provider ID!")}function eo(t){if(Yi.call(this,t),"twitter.com"!=this.providerId)throw Error("Invalid provider ID!");Wr(this,"username",t.screenName||null)}function no(t){var e=Fn(t),n=Mn(e,"link"),r=Mn(Fn(n),"link");return e=Mn(e,"deep_link_id"),Mn(Fn(e),"link")||e||r||n||t}function ro(t,e){if(!t&&!e)throw new T("internal-error","Internal assert: no raw session string available");if(t&&e)throw new T("internal-error","Internal assert: unable to determine the session type");this.a=t||null,this.b=e||null,this.type=this.a?io:oo}E(Yi,Ji),E(Zi,Yi),E(Qi,Yi),E(to,Yi),E(eo,Yi);var io="enroll",oo="signin";function ao(){}function so(t,e){return t.then((function(t){if(t[$a]){var n=Hi(t[$a]);if(!n||e!=n.h)throw new T("user-mismatch");return t}throw new T("user-mismatch")})).o((function(t){throw t&&t.code&&t.code==A+"user-not-found"?new T("user-mismatch"):t}))}function uo(t,e){if(!e)throw new T("internal-error","failed to construct a credential");this.a=e,Wr(this,"providerId",t),Wr(this,"signInMethod",t)}function co(t){return{pendingToken:t.a,requestUri:"http://localhost"}}function ho(t){if(t&&t.providerId&&t.signInMethod&&0==t.providerId.indexOf("saml.")&&t.pendingToken)try{return new uo(t.providerId,t.pendingToken)}catch(t){}return null}function lo(t,e,n){if(this.a=null,e.idToken||e.accessToken)e.idToken&&Wr(this,"idToken",e.idToken),e.accessToken&&Wr(this,"accessToken",e.accessToken),e.nonce&&!e.pendingToken&&Wr(this,"nonce",e.nonce),e.pendingToken&&(this.a=e.pendingToken);else{if(!e.oauthToken||!e.oauthTokenSecret)throw new T("internal-error","failed to construct a credential");Wr(this,"accessToken",e.oauthToken),Wr(this,"secret",e.oauthTokenSecret)}Wr(this,"providerId",t),Wr(this,"signInMethod",n)}function fo(t){var e={};return t.idToken&&(e.id_token=t.idToken),t.accessToken&&(e.access_token=t.accessToken),t.secret&&(e.oauth_token_secret=t.secret),e.providerId=t.providerId,t.nonce&&!t.a&&(e.nonce=t.nonce),e={postBody:Jn(e).toString(),requestUri:"http://localhost"},t.a&&(delete e.postBody,e.pendingToken=t.a),e}function po(t){if(t&&t.providerId&&t.signInMethod){var e={idToken:t.oauthIdToken,accessToken:t.oauthTokenSecret?null:t.oauthAccessToken,oauthTokenSecret:t.oauthTokenSecret,oauthToken:t.oauthTokenSecret&&t.oauthAccessToken,nonce:t.nonce,pendingToken:t.pendingToken};try{return new lo(t.providerId,e,t.signInMethod)}catch(t){}}return null}function vo(t,e){this.Oc=e||[],Xr(this,{providerId:t,isOAuthProvider:!0}),this.Fb={},this.lb=(Gi(t)||{}).Ha||null,this.kb=null}function mo(t){if("string"!=typeof t||0!=t.indexOf("saml."))throw new T("argument-error",'SAML provider IDs must be prefixed with "saml."');vo.call(this,t,[])}function go(t){vo.call(this,t,zi),this.a=[]}function bo(){go.call(this,"facebook.com")}function yo(t){if(!t)throw new T("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return v(t)&&(e=t.accessToken),(new bo).credential({accessToken:e})}function wo(){go.call(this,"github.com")}function _o(t){if(!t)throw new T("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return v(t)&&(e=t.accessToken),(new wo).credential({accessToken:e})}function xo(){go.call(this,"google.com"),this.Aa("profile")}function Io(t,e){var n=t;return v(t)&&(n=t.idToken,e=t.accessToken),(new xo).credential({idToken:n,accessToken:e})}function Eo(){vo.call(this,"twitter.com",qi)}function To(t,e){var n=t;if(v(n)||(n={oauthToken:t,oauthTokenSecret:e}),!n.oauthToken||!n.oauthTokenSecret)throw new T("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new lo("twitter.com",n,"twitter.com")}function So(t,e,n){this.a=t,this.f=e,Wr(this,"providerId","password"),Wr(this,"signInMethod",n===Ao.EMAIL_LINK_SIGN_IN_METHOD?Ao.EMAIL_LINK_SIGN_IN_METHOD:Ao.EMAIL_PASSWORD_SIGN_IN_METHOD)}function ko(t){return t&&t.email&&t.password?new So(t.email,t.password,t.signInMethod):null}function Ao(){Xr(this,{providerId:"password",isOAuthProvider:!1})}function No(t,e){if(!(e=Oo(e)))throw new T("argument-error","Invalid email link!");return new So(t,e.code,Ao.EMAIL_LINK_SIGN_IN_METHOD)}function Oo(t){return(t=Si(t=no(t)))&&t.operation===ai?t:null}function Po(t){if(!(t.bb&&t.ab||t.Ja&&t.da))throw new T("internal-error");this.a=t,Wr(this,"providerId","phone"),this.ea="phone",Wr(this,"signInMethod","phone")}function Co(t){if(t&&"phone"===t.providerId&&(t.verificationId&&t.verificationCode||t.temporaryProof&&t.phoneNumber)){var e={};return q(["verificationId","verificationCode","temporaryProof","phoneNumber"],(function(n){t[n]&&(e[n]=t[n])})),new Po(e)}return null}function Ro(t){return t.a.Ja&&t.a.da?{temporaryProof:t.a.Ja,phoneNumber:t.a.da}:{sessionInfo:t.a.bb,code:t.a.ab}}function Lo(t){try{this.a=t||r.a.auth()}catch(t){throw new T("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().")}Xr(this,{providerId:"phone",isOAuthProvider:!1})}function Do(t,e){if(!t)throw new T("missing-verification-id");if(!e)throw new T("missing-verification-code");return new Po({bb:t,ab:e})}function jo(t){if(t.temporaryProof&&t.phoneNumber)return new Po({Ja:t.temporaryProof,da:t.phoneNumber});var e=t&&t.providerId;if(!e||"password"===e)return null;var n=t&&t.oauthAccessToken,r=t&&t.oauthTokenSecret,i=t&&t.nonce,o=t&&t.oauthIdToken,a=t&&t.pendingToken;try{switch(e){case"google.com":return Io(o,n);case"facebook.com":return yo(n);case"github.com":return _o(n);case"twitter.com":return To(n,r);default:return n||r||o||a?a?0==e.indexOf("saml.")?new uo(e,a):new lo(e,{pendingToken:a,idToken:t.oauthIdToken,accessToken:t.oauthAccessToken},e):new go(e).credential({idToken:o,accessToken:n,rawNonce:i}):null}}catch(t){return null}}function Mo(t){if(!t.isOAuthProvider)throw new T("invalid-oauth-provider")}function Fo(t,e,n,r,i,o,a){if(this.c=t,this.b=e||null,this.g=n||null,this.f=r||null,this.i=o||null,this.h=a||null,this.a=i||null,!this.g&&!this.a)throw new T("invalid-auth-event");if(this.g&&this.a)throw new T("invalid-auth-event");if(this.g&&!this.f)throw new T("invalid-auth-event")}function Uo(t){return(t=t||{}).type?new Fo(t.type,t.eventId,t.urlResponse,t.sessionId,t.error&&S(t.error),t.postBody,t.tenantId):null}function Vo(){this.b=null,this.a=[]}ro.prototype.Fa=function(){return this.a?ke(this.a):ke(this.b)},ro.prototype.v=function(){return this.type==io?{multiFactorSession:{idToken:this.a}}:{multiFactorSession:{pendingCredential:this.b}}},ao.prototype.ia=function(){},ao.prototype.b=function(){},ao.prototype.c=function(){},ao.prototype.v=function(){},uo.prototype.ia=function(t){return vs(t,co(this))},uo.prototype.b=function(t,e){var n=co(this);return n.idToken=e,ms(t,n)},uo.prototype.c=function(t,e){return so(gs(t,co(this)),e)},uo.prototype.v=function(){return{providerId:this.providerId,signInMethod:this.signInMethod,pendingToken:this.a}},lo.prototype.ia=function(t){return vs(t,fo(this))},lo.prototype.b=function(t,e){var n=fo(this);return n.idToken=e,ms(t,n)},lo.prototype.c=function(t,e){return so(gs(t,fo(this)),e)},lo.prototype.v=function(){var t={providerId:this.providerId,signInMethod:this.signInMethod};return this.idToken&&(t.oauthIdToken=this.idToken),this.accessToken&&(t.oauthAccessToken=this.accessToken),this.secret&&(t.oauthTokenSecret=this.secret),this.nonce&&(t.nonce=this.nonce),this.a&&(t.pendingToken=this.a),t},vo.prototype.Ia=function(t){return this.Fb=dt(t),this},E(mo,vo),E(go,vo),go.prototype.Aa=function(t){return W(this.a,t)||this.a.push(t),this},go.prototype.Nb=function(){return Y(this.a)},go.prototype.credential=function(t,e){var n;if(!(n=v(t)?{idToken:t.idToken||null,accessToken:t.accessToken||null,nonce:t.rawNonce||null}:{idToken:t||null,accessToken:e||null}).idToken&&!n.accessToken)throw new T("argument-error","credential failed: must provide the ID token and/or the access token.");return new lo(this.providerId,n,this.providerId)},E(bo,go),Wr(bo,"PROVIDER_ID","facebook.com"),Wr(bo,"FACEBOOK_SIGN_IN_METHOD","facebook.com"),E(wo,go),Wr(wo,"PROVIDER_ID","github.com"),Wr(wo,"GITHUB_SIGN_IN_METHOD","github.com"),E(xo,go),Wr(xo,"PROVIDER_ID","google.com"),Wr(xo,"GOOGLE_SIGN_IN_METHOD","google.com"),E(Eo,vo),Wr(Eo,"PROVIDER_ID","twitter.com"),Wr(Eo,"TWITTER_SIGN_IN_METHOD","twitter.com"),So.prototype.ia=function(t){return this.signInMethod==Ao.EMAIL_LINK_SIGN_IN_METHOD?Zs(t,Ts,{email:this.a,oobCode:this.f}):Zs(t,Ws,{email:this.a,password:this.f})},So.prototype.b=function(t,e){return this.signInMethod==Ao.EMAIL_LINK_SIGN_IN_METHOD?Zs(t,Ss,{idToken:e,email:this.a,oobCode:this.f}):Zs(t,Us,{idToken:e,email:this.a,password:this.f})},So.prototype.c=function(t,e){return so(this.ia(t),e)},So.prototype.v=function(){return{email:this.a,password:this.f,signInMethod:this.signInMethod}},Xr(Ao,{PROVIDER_ID:"password"}),Xr(Ao,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"}),Xr(Ao,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"}),Po.prototype.ia=function(t){return t.cb(Ro(this))},Po.prototype.b=function(t,e){var n=Ro(this);return n.idToken=e,Zs(t,$s,n)},Po.prototype.c=function(t,e){var n=Ro(this);return n.operation="REAUTH",so(t=Zs(t,Js,n),e)},Po.prototype.v=function(){var t={providerId:"phone"};return this.a.bb&&(t.verificationId=this.a.bb),this.a.ab&&(t.verificationCode=this.a.ab),this.a.Ja&&(t.temporaryProof=this.a.Ja),this.a.da&&(t.phoneNumber=this.a.da),t},Lo.prototype.cb=function(t,e){var n=this.a.b;return ke(e.verify()).then((function(r){if("string"!=typeof r)throw new T("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(e.type){case"recaptcha":var i=v(t)?t.session:null,o=v(t)?t.phoneNumber:t;return(i&&i.type==io?i.Fa().then((function(t){return function(t,e){return Zs(t,Hs,e).then((function(t){return t.phoneSessionInfo.sessionInfo}))}(n,{idToken:t,phoneEnrollmentInfo:{phoneNumber:o,recaptchaToken:r}})})):i&&i.type==oo?i.Fa().then((function(e){return function(t,e){return Zs(t,Bs,e).then((function(t){return t.phoneResponseInfo.sessionInfo}))}(n,{mfaPendingCredential:e,mfaEnrollmentId:t.multiFactorHint&&t.multiFactorHint.uid||t.multiFactorUid,phoneSignInInfo:{recaptchaToken:r}})})):function(t,e){return Zs(t,Ms,e)}(n,{phoneNumber:o,recaptchaToken:r})).then((function(t){return"function"==typeof e.reset&&e.reset(),t}),(function(t){throw"function"==typeof e.reset&&e.reset(),t}));default:throw new T("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.')}}))},Xr(Lo,{PROVIDER_ID:"phone"}),Xr(Lo,{PHONE_SIGN_IN_METHOD:"phone"}),Fo.prototype.getUid=function(){var t=[];return t.push(this.c),this.b&&t.push(this.b),this.f&&t.push(this.f),this.h&&t.push(this.h),t.join("-")},Fo.prototype.S=function(){return this.h},Fo.prototype.v=function(){return{type:this.c,eventId:this.b,urlResponse:this.g,sessionId:this.f,postBody:this.i,tenantId:this.h,error:this.a&&this.a.v()}};var Ho,Bo=null;function qo(t){var e="unauthorized-domain",n=void 0,r=Fn(t);t=r.b,"chrome-extension"==(r=r.f)?n=Ht("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):"http"==r||"https"==r?n=Ht("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):e="operation-not-supported-in-this-environment",T.call(this,e,n)}function zo(t,e,n){T.call(this,t,n),(t=e||{}).Gb&&Wr(this,"email",t.Gb),t.da&&Wr(this,"phoneNumber",t.da),t.credential&&Wr(this,"credential",t.credential),t.Wb&&Wr(this,"tenantId",t.Wb)}function Ko(t){if(t.code){var e=t.code||"";0==e.indexOf(A)&&(e=e.substring(A.length));var n={credential:jo(t),Wb:t.tenantId};if(t.email)n.Gb=t.email;else if(t.phoneNumber)n.da=t.phoneNumber;else if(!n.credential)return new T(e,t.message||void 0);return new zo(e,n,t.message)}return null}function Go(){}function Wo(t){return t.c||(t.c=t.b())}function Xo(){}function $o(t){if(!t.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var e=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],n=0;n<e.length;n++){var r=e[n];try{return new ActiveXObject(r),t.f=r}catch(t){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed")}return t.f}function Jo(){}function Yo(){this.a=new XDomainRequest,this.readyState=0,this.onreadystatechange=null,this.responseType=this.responseText=this.response="",this.status=-1,this.statusText="",this.a.onload=_(this.oc,this),this.a.onerror=_(this.Pb,this),this.a.onprogress=_(this.pc,this),this.a.ontimeout=_(this.tc,this)}function Zo(t,e){t.readyState=e,t.onreadystatechange&&t.onreadystatechange()}function Qo(t,e,n){this.reset(t,e,n,void 0,void 0)}E(qo,T),E(zo,T),zo.prototype.v=function(){var t={code:this.code,message:this.message};this.email&&(t.email=this.email),this.phoneNumber&&(t.phoneNumber=this.phoneNumber),this.tenantId&&(t.tenantId=this.tenantId);var e=this.credential&&this.credential.v();return e&&mt(t,e),t},zo.prototype.toJSON=function(){return this.v()},Go.prototype.c=null,E(Xo,Go),Xo.prototype.a=function(){var t=$o(this);return t?new ActiveXObject(t):new XMLHttpRequest},Xo.prototype.b=function(){var t={};return $o(this)&&(t[0]=!0,t[1]=!0),t},Ho=new Xo,E(Jo,Go),Jo.prototype.a=function(){var t=new XMLHttpRequest;if("withCredentials"in t)return t;if("undefined"!=typeof XDomainRequest)return new Yo;throw Error("Unsupported browser")},Jo.prototype.b=function(){return{}},(e=Yo.prototype).open=function(t,e,n){if(null!=n&&!n)throw Error("Only async requests are supported.");this.a.open(t,e)},e.send=function(t){if(t){if("string"!=typeof t)throw Error("Only string data is supported");this.a.send(t)}else this.a.send()},e.abort=function(){this.a.abort()},e.setRequestHeader=function(){},e.getResponseHeader=function(t){return"content-type"==t.toLowerCase()?this.a.contentType:""},e.oc=function(){this.status=200,this.response=this.responseText=this.a.responseText,Zo(this,4)},e.Pb=function(){this.status=500,this.response=this.responseText="",Zo(this,4)},e.tc=function(){this.Pb()},e.pc=function(){this.status=200,Zo(this,1)},e.getAllResponseHeaders=function(){return"content-type: "+this.a.contentType},Qo.prototype.a=null;function ta(t){this.f=t,this.b=this.c=this.a=null}function ea(t,e){this.name=t,this.value=e}Qo.prototype.reset=function(t,e,n,r,i){"number"==typeof i||0,r||I(),delete this.a},ea.prototype.toString=function(){return this.name};var na=new ea("SEVERE",1e3),ra=new ea("WARNING",900),ia=new ea("CONFIG",700),oa=new ea("FINE",500);ta.prototype.log=function(t,e,n){if(t.value>=function t(e){return e.c?e.c:e.a?t(e.a):(D("Root logger has no level set."),null)}(this).value)for(d(e)&&(e=e()),t=new Qo(t,String(e),this.f),n&&(t.a=n),n=this;n;)n=n.a};var aa={},sa=null;function ua(t){var e;if(sa||(sa=new ta(""),aa[""]=sa,sa.c=ia),!(e=aa[t])){e=new ta(t);var n=t.lastIndexOf("."),r=t.substr(n+1);(n=ua(t.substr(0,n))).b||(n.b={}),n.b[r]=e,e.a=n,aa[t]=e}return e}function ca(t,e){t&&t.log(oa,e,void 0)}function ha(t){this.f=t}function la(t){wn.call(this),this.s=t,this.readyState=fa,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.i=new Headers,this.b=null,this.m="GET",this.g="",this.a=!1,this.h=ua("goog.net.FetchXmlHttp"),this.l=this.c=this.f=null}E(ha,Go),ha.prototype.a=function(){return new la(this.f)},ha.prototype.b=function(t){return function(){return t}}({}),E(la,wn);var fa=0;function pa(t){t.c.read().then(t.nc.bind(t)).catch(t.Sa.bind(t))}function da(t,e){e&&t.f&&(t.status=t.f.status,t.statusText=t.f.statusText),t.readyState=4,t.f=null,t.c=null,t.l=null,va(t)}function va(t){t.onreadystatechange&&t.onreadystatechange.call(t)}function ma(t){wn.call(this),this.headers=new An,this.D=t||null,this.c=!1,this.B=this.a=null,this.h=this.P=this.l="",this.f=this.O=this.i=this.N=!1,this.g=0,this.s=null,this.m=ga,this.w=this.R=!1}(e=la.prototype).open=function(t,e){if(this.readyState!=fa)throw this.abort(),Error("Error reopening a connection");this.m=t,this.g=e,this.readyState=1,va(this)},e.send=function(t){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var e={headers:this.i,method:this.m,credentials:void 0,cache:void 0};t&&(e.body=t),this.s.fetch(new Request(this.g,e)).then(this.sc.bind(this),this.Sa.bind(this))},e.abort=function(){this.response=this.responseText="",this.i=new Headers,this.status=0,this.c&&this.c.cancel("Request was aborted."),1<=this.readyState&&this.a&&4!=this.readyState&&(this.a=!1,da(this,!1)),this.readyState=fa},e.sc=function(t){this.a&&(this.f=t,this.b||(this.b=t.headers,this.readyState=2,va(this)),this.a&&(this.readyState=3,va(this),this.a&&("arraybuffer"===this.responseType?t.arrayBuffer().then(this.qc.bind(this),this.Sa.bind(this)):void 0!==u.ReadableStream&&"body"in t?(this.response=this.responseText="",this.c=t.body.getReader(),this.l=new TextDecoder,pa(this)):t.text().then(this.rc.bind(this),this.Sa.bind(this)))))},e.nc=function(t){if(this.a){var e=this.l.decode(t.value?t.value:new Uint8Array(0),{stream:!t.done});e&&(this.response=this.responseText+=e),t.done?da(this,!0):va(this),3==this.readyState&&pa(this)}},e.rc=function(t){this.a&&(this.response=this.responseText=t,da(this,!0))},e.qc=function(t){this.a&&(this.response=t,da(this,!0))},e.Sa=function(t){var e=this.h;e&&e.log(ra,"Failed to fetch url "+this.g,t instanceof Error?t:Error(t)),this.a&&da(this,!0)},e.setRequestHeader=function(t,e){this.i.append(t,e)},e.getResponseHeader=function(t){return this.b?this.b.get(t.toLowerCase())||"":((t=this.h)&&t.log(ra,"Attempting to get response header but no headers have been received for url: "+this.g,void 0),"")},e.getAllResponseHeaders=function(){if(!this.b){var t=this.h;return t&&t.log(ra,"Attempting to get all response headers but no headers have been received for url: "+this.g,void 0),""}t=[];for(var e=this.b.entries(),n=e.next();!n.done;)n=n.value,t.push(n[0]+": "+n[1]),n=e.next();return t.join("\r\n")},E(ma,wn);var ga="";ma.prototype.b=ua("goog.net.XhrIo");var ba=/^https?$/i,ya=["POST","PUT"];function wa(t,e,n,r,i){if(t.a)throw Error("[goog.net.XhrIo] Object is active with another request="+t.l+"; newUri="+e);n=n?n.toUpperCase():"GET",t.l=e,t.h="",t.P=n,t.N=!1,t.c=!0,t.a=t.D?t.D.a():Ho.a(),t.B=t.D?Wo(t.D):Wo(Ho),t.a.onreadystatechange=_(t.Sb,t);try{ca(t.b,Na(t,"Opening Xhr")),t.O=!0,t.a.open(n,String(e),!0),t.O=!1}catch(e){return ca(t.b,Na(t,"Error opening Xhr: "+e.message)),void xa(t,e)}e=r||"";var o=new An(t.headers);i&&function(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(p(t)||"string"==typeof t)q(t,e,void 0);else for(var n=kn(t),r=Sn(t),i=r.length,o=0;o<i;o++)e.call(void 0,r[o],n&&n[o],t)}(i,(function(t,e){o.set(e,t)})),i=function(t){t:{for(var e=_a,n=t.length,r="string"==typeof t?t.split(""):t,i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t)){e=i;break t}e=-1}return 0>e?null:"string"==typeof t?t.charAt(e):t[e]}(o.X()),r=u.FormData&&e instanceof u.FormData,!W(ya,n)||i||r||o.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),o.forEach((function(t,e){this.a.setRequestHeader(e,t)}),t),t.m&&(t.a.responseType=t.m),"withCredentials"in t.a&&t.a.withCredentials!==t.R&&(t.a.withCredentials=t.R);try{Sa(t),0<t.g&&(t.w=function(t){return Wt&&ie(9)&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(t.a),ca(t.b,Na(t,"Will abort after "+t.g+"ms if incomplete, xhr2 "+t.w)),t.w?(t.a.timeout=t.g,t.a.ontimeout=_(t.Ka,t)):t.s=En(t.Ka,t.g,t)),ca(t.b,Na(t,"Sending request")),t.i=!0,t.a.send(e),t.i=!1}catch(e){ca(t.b,Na(t,"Send error: "+e.message)),xa(t,e)}}function _a(t){return"content-type"==t.toLowerCase()}function xa(t,e){t.c=!1,t.a&&(t.f=!0,t.a.abort(),t.f=!1),t.h=e,Ia(t),Ta(t)}function Ia(t){t.N||(t.N=!0,t.dispatchEvent("complete"),t.dispatchEvent("error"))}function Ea(t){if(t.c&&void 0!==s)if(t.B[1]&&4==ka(t)&&2==Aa(t))ca(t.b,Na(t,"Local request error detected and ignored"));else if(t.i&&4==ka(t))En(t.Sb,0,t);else if(t.dispatchEvent("readystatechange"),4==ka(t)){ca(t.b,Na(t,"Request complete")),t.c=!1;try{var e,n=Aa(t);t:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var r=!0;break t;default:r=!1}if(!(e=r)){var i;if(i=0===n){var o=String(t.l).match(Pn)[1]||null;if(!o&&u.self&&u.self.location){var a=u.self.location.protocol;o=a.substr(0,a.length-1)}i=!ba.test(o?o.toLowerCase():"")}e=i}if(e)t.dispatchEvent("complete"),t.dispatchEvent("success");else{try{var c=2<ka(t)?t.a.statusText:""}catch(e){ca(t.b,"Can not get status: "+e.message),c=""}t.h=c+" ["+Aa(t)+"]",Ia(t)}}finally{Ta(t)}}}function Ta(t,e){if(t.a){Sa(t);var n=t.a,r=t.B[0]?l:null;t.a=null,t.B=null,e||t.dispatchEvent("ready");try{n.onreadystatechange=r}catch(e){(t=t.b)&&t.log(na,"Problem encountered resetting onreadystatechange: "+e.message,void 0)}}}function Sa(t){t.a&&t.w&&(t.a.ontimeout=null),t.s&&(u.clearTimeout(t.s),t.s=null)}function ka(t){return t.a?t.a.readyState:0}function Aa(t){try{return 2<ka(t)?t.a.status:-1}catch(t){return-1}}function Na(t,e){return e+" ["+t.P+" "+t.l+" "+Aa(t)+"]"}function Oa(t){var e=Ha;this.g=[],this.w=e,this.s=t||null,this.f=this.a=!1,this.c=void 0,this.u=this.B=this.i=!1,this.h=0,this.b=null,this.l=0}function Pa(t,e,n){t.a=!0,t.c=n,t.f=!e,Da(t)}function Ca(t){if(t.a){if(!t.u)throw new ja(t);t.u=!1}}function Ra(t,e,n,r){t.g.push([e,n,r]),t.a&&Da(t)}function La(t){return G(t.g,(function(t){return d(t[1])}))}function Da(t){if(t.h&&t.a&&La(t)){var e=t.h,n=Ua[e];n&&(u.clearTimeout(n.a),delete Ua[e]),t.h=0}t.b&&(t.b.l--,delete t.b),e=t.c;for(var r=n=!1;t.g.length&&!t.i;){var i=t.g.shift(),o=i[0],a=i[1];if(i=i[2],o=t.f?a:o)try{var s=o.call(i||t.s,e);void 0!==s&&(t.f=t.f&&(s==e||s instanceof Error),t.c=e=s),(C(e)||"function"==typeof u.Promise&&e instanceof u.Promise)&&(r=!0,t.i=!0)}catch(r){e=r,t.f=!0,La(t)||(n=!0)}}t.c=e,r&&(s=_(t.m,t,!0),r=_(t.m,t,!1),e instanceof Oa?(Ra(e,s,r),e.B=!0):e.then(s,r)),n&&(e=new Fa(e),Ua[e.a]=e,t.h=e.a)}function ja(){R.call(this)}function Ma(){R.call(this)}function Fa(t){this.a=u.setTimeout(_(this.c,this),0),this.b=t}(e=ma.prototype).Ka=function(){void 0!==s&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",ca(this.b,Na(this,this.h)),this.dispatchEvent("timeout"),this.abort(8))},e.abort=function(){this.a&&this.c&&(ca(this.b,Na(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),Ta(this))},e.Ba=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),Ta(this,!0)),ma.Za.Ba.call(this)},e.Sb=function(){this.wa||(this.O||this.i||this.f?Ea(this):this.Hc())},e.Hc=function(){Ea(this)},e.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.m){case ga:case"text":return this.a.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var t=this.b;return t&&t.log(na,"Response type "+this.m+" is not supported on this browser",void 0),null}catch(t){return ca(this.b,"Can not get response: "+t.message),null}},Oa.prototype.cancel=function(t){if(this.a)this.c instanceof Oa&&this.c.cancel();else{if(this.b){var e=this.b;delete this.b,t?e.cancel(t):(e.l--,0>=e.l&&e.cancel())}this.w?this.w.call(this.s,this):this.u=!0,this.a||(t=new Ma(this),Ca(this),Pa(this,!1,t))}},Oa.prototype.m=function(t,e){this.i=!1,Pa(this,t,e)},Oa.prototype.then=function(t,e,n){var r,i,o=new we((function(t,e){r=t,i=e}));return Ra(this,r,(function(t){t instanceof Ma?o.cancel():i(t)})),o.then(t,e,n)},Oa.prototype.$goog_Thenable=!0,E(ja,R),ja.prototype.message="Deferred has already fired",ja.prototype.name="AlreadyCalledError",E(Ma,R),Ma.prototype.message="Deferred was canceled",Ma.prototype.name="CanceledError",Fa.prototype.c=function(){throw delete Ua[this.a],this.b};var Ua={};function Va(t){var e={},n=e.document||document,r=Et(t).toString(),i=fe(document,"SCRIPT"),o={Tb:i,Ka:void 0},a=new Oa(o),s=null,l=null!=e.timeout?e.timeout:5e3;return 0<l&&(s=window.setTimeout((function(){Ba(i,!0);var t=new Ka(za,"Timeout reached for loading script "+r);Ca(a),Pa(a,!1,t)}),l),o.Ka=s),i.onload=i.onreadystatechange=function(){i.readyState&&"loaded"!=i.readyState&&"complete"!=i.readyState||(Ba(i,e.ud||!1,s),Ca(a),Pa(a,!0,null))},i.onerror=function(){Ba(i,!0,s);var t=new Ka(qa,"Error while loading script "+r);Ca(a),Pa(a,!1,t)},mt(o=e.attributes||{},{type:"text/javascript",charset:"UTF-8"}),se(i,o),function(t,e){gt(t,"HTMLScriptElement"),t.src=Et(e),null===h&&(h=(e=(e=u.document).querySelector&&e.querySelector("script[nonce]"))&&(e=e.nonce||e.getAttribute("nonce"))&&c.test(e)?e:""),(e=h)&&t.setAttribute("nonce",e)}(i,t),function(t){var e;return(e=(t||document).getElementsByTagName("HEAD"))&&0!=e.length?e[0]:t.documentElement}(n).appendChild(i),a}function Ha(){if(this&&this.Tb){var t=this.Tb;t&&"SCRIPT"==t.tagName&&Ba(t,!0,this.Ka)}}function Ba(t,e,n){null!=n&&u.clearTimeout(n),t.onload=l,t.onerror=l,t.onreadystatechange=l,e&&window.setTimeout((function(){t&&t.parentNode&&t.parentNode.removeChild(t)}),0)}var qa=0,za=1;function Ka(t,e){var n="Jsloader error (code #"+t+")";e&&(n+=": "+e),R.call(this,n),this.code=t}function Ga(t){this.f=t}function Wa(t,e,n){if(this.c=t,t=e||{},this.u=t.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token",this.m=t.secureTokenTimeout||Ja,this.g=dt(t.secureTokenHeaders||Ya),this.h=t.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",this.l=t.identityPlatformEndpoint||"https://identitytoolkit.googleapis.com/v2/",this.i=t.firebaseTimeout||Za,this.a=dt(t.firebaseHeaders||Qa),n&&(this.a["X-Client-Version"]=n,this.g["X-Client-Version"]=n),n="Node"==yr(),!(n=u.XMLHttpRequest||n&&r.a.INTERNAL.node&&r.a.INTERNAL.node.XMLHttpRequest)&&!br())throw new T("internal-error","The XMLHttpRequest compatibility library was not found.");this.f=void 0,br()?this.f=new ha(self):wr()?this.f=new Ga(n):this.f=new Jo,this.b=null}E(Ka,R),E(Ga,Go),Ga.prototype.a=function(){return new this.f},Ga.prototype.b=function(){return{}};var Xa,$a="idToken",Ja=new Ur(3e4,6e4),Ya={"Content-Type":"application/x-www-form-urlencoded"},Za=new Ur(3e4,6e4),Qa={"Content-Type":"application/json"};function ts(t,e){e?t.a["X-Firebase-Locale"]=e:delete t.a["X-Firebase-Locale"]}function es(t,e){e?(t.a["X-Client-Version"]=e,t.g["X-Client-Version"]=e):(delete t.a["X-Client-Version"],delete t.g["X-Client-Version"])}function ns(t,e,n,r,i,o,a){(function(){var t=Sr();return!((t=Ir(t)!=xr?null:(t=t.match(/\sChrome\/(\d+)/i))&&2==t.length?parseInt(t[1],10):null)&&30>t)&&(!Wt||!ne||9<ne)})()||br()?t=_(t.w,t):(Xa||(Xa=new we((function(t,e){!function(t,e){if(((window.gapi||{}).client||{}).request)t();else{u[is]=function(){((window.gapi||{}).client||{}).request?t():e(Error("CORS_UNSUPPORTED"))},function(t,e){Ra(t,null,e,void 0)}(Va(Tt(rs,{onload:is})),(function(){e(Error("CORS_UNSUPPORTED"))}))}}(t,e)}))),t=_(t.s,t)),t(e,n,r,i,o,a)}Wa.prototype.S=function(){return this.b},Wa.prototype.w=function(t,e,n,r,i,o){if(br()&&(void 0===u.fetch||void 0===u.Headers||void 0===u.Request))throw new T("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var a=new ma(this.f);if(o){a.g=Math.max(0,o);var s=setTimeout((function(){a.dispatchEvent("timeout")}),o)}_n(a,"complete",(function(){s&&clearTimeout(s);var t=null;try{t=JSON.parse(function(t){try{return t.a?t.a.responseText:""}catch(e){return ca(t.b,"Can not get responseText: "+e.message),""}}(this))||null}catch(e){t=null}e&&e(t)})),xn(a,"ready",(function(){s&&clearTimeout(s),ze(this)})),xn(a,"timeout",(function(){s&&clearTimeout(s),ze(this),e&&e(null)})),wa(a,t,n,r,i)};var rs=new bt(_t,"https://apis.google.com/js/client.js?onload=%{onload}"),is="__fcb"+Math.floor(1e6*Math.random()).toString();function os(t,e,n,r,i,o,a){var s=Fn(e+n);jn(s,"key",t.c),a&&jn(s,"cb",I().toString());var u="GET"==r;if(u)for(var c in i)i.hasOwnProperty(c)&&jn(s,c,i[c]);return new we((function(e,n){ns(t,s.toString(),(function(t){t?t.error?n(tu(t,o||{})):e(t):n(new T("network-request-failed"))}),r,u?void 0:nr(Lr(i)),t.a,t.i.get())}))}function as(t){if("string"!=typeof(t=t.email)||!dr.test(t))throw new T("invalid-email")}function ss(t){"email"in t&&as(t)}function us(t){if(!t[$a]){if(t.mfaPendingCredential)throw new T("multi-factor-auth-required",null,dt(t));throw new T("internal-error")}}function cs(t){if(t.phoneNumber||t.temporaryProof){if(!t.phoneNumber||!t.temporaryProof)throw new T("internal-error")}else{if(!t.sessionInfo)throw new T("missing-verification-id");if(!t.code)throw new T("missing-verification-code")}}Wa.prototype.s=function(t,e,n,r,i){var o=this;Xa.then((function(){window.gapi.client.setApiKey(o.c);var a=window.gapi.auth.getToken();window.gapi.auth.setToken(null),window.gapi.client.request({path:t,method:n,body:r,headers:i,authType:"none",callback:function(t){window.gapi.auth.setToken(a),e&&e(t)}})})).o((function(t){e&&e({error:{message:t&&t.message||"CORS_UNSUPPORTED"}})}))},Wa.prototype.vb=function(){return Zs(this,Vs,{})},Wa.prototype.xb=function(t,e){return Zs(this,Fs,{idToken:t,email:e})},Wa.prototype.yb=function(t,e){return Zs(this,Us,{idToken:t,password:e})};var hs={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};function ls(t){if(!t.phoneVerificationInfo)throw new T("internal-error");if(!t.phoneVerificationInfo.sessionInfo)throw new T("missing-verification-id");if(!t.phoneVerificationInfo.code)throw new T("missing-verification-code")}function fs(t){if(!t.requestUri||!t.sessionId&&!t.postBody&&!t.pendingToken)throw new T("internal-error")}function ps(t,e){return e.oauthIdToken&&e.providerId&&0==e.providerId.indexOf("oidc.")&&!e.pendingToken&&(t.sessionId?e.nonce=t.sessionId:t.postBody&&(Zn(t=new Xn(t.postBody),"nonce")&&(e.nonce=t.get("nonce")))),e}function ds(t){var e=null;if(t.needConfirmation?(t.code="account-exists-with-different-credential",e=Ko(t)):"FEDERATED_USER_ID_ALREADY_LINKED"==t.errorMessage?(t.code="credential-already-in-use",e=Ko(t)):"EMAIL_EXISTS"==t.errorMessage?(t.code="email-already-in-use",e=Ko(t)):t.errorMessage&&(e=Qs(t.errorMessage)),e)throw e;us(t)}function vs(t,e){return e.returnIdpCredential=!0,Zs(t,qs,e)}function ms(t,e){return e.returnIdpCredential=!0,Zs(t,Ks,e)}function gs(t,e){return e.returnIdpCredential=!0,e.autoCreate=!1,Zs(t,zs,e)}function bs(t){if(!t.oobCode)throw new T("invalid-action-code")}(e=Wa.prototype).zb=function(t,e){var n={idToken:t},r=[];return ft(hs,(function(t,i){var o=e[i];null===o?r.push(t):i in e&&(n[i]=o)})),r.length&&(n.deleteAttribute=r),Zs(this,Fs,n)},e.rb=function(t,e){return mt(t={requestType:"PASSWORD_RESET",email:t},e),Zs(this,Rs,t)},e.sb=function(t,e){return mt(t={requestType:"EMAIL_SIGNIN",email:t},e),Zs(this,Os,t)},e.qb=function(t,e){return mt(t={requestType:"VERIFY_EMAIL",idToken:t},e),Zs(this,Ps,t)},e.Ab=function(t,e,n){return mt(t={requestType:"VERIFY_AND_CHANGE_EMAIL",idToken:t,newEmail:e},n),Zs(this,Cs,t)},e.cb=function(t){return Zs(this,Xs,t)},e.jb=function(t,e){return Zs(this,js,{oobCode:t,newPassword:e})},e.Pa=function(t){return Zs(this,ws,{oobCode:t})},e.fb=function(t){return Zs(this,ys,{oobCode:t})};var ys={endpoint:"setAccountInfo",A:bs,Y:"email",C:!0},ws={endpoint:"resetPassword",A:bs,G:function(t){var e=t.requestType;if(!e||!t.email&&"EMAIL_SIGNIN"!=e&&"VERIFY_AND_CHANGE_EMAIL"!=e)throw new T("internal-error")},C:!0},_s={endpoint:"signupNewUser",A:function(t){if(as(t),!t.password)throw new T("weak-password")},G:us,U:!0,C:!0},xs={endpoint:"createAuthUri",C:!0},Is={endpoint:"deleteAccount",M:["idToken"]},Es={endpoint:"setAccountInfo",M:["idToken","deleteProvider"],A:function(t){if("array"!=f(t.deleteProvider))throw new T("internal-error")}},Ts={endpoint:"emailLinkSignin",M:["email","oobCode"],A:as,G:us,U:!0,C:!0},Ss={endpoint:"emailLinkSignin",M:["idToken","email","oobCode"],A:as,G:us,U:!0},ks={endpoint:"accounts/mfaEnrollment:finalize",M:["idToken","phoneVerificationInfo"],A:ls,G:us,C:!0,La:!0},As={endpoint:"accounts/mfaSignIn:finalize",M:["mfaPendingCredential","phoneVerificationInfo"],A:ls,G:us,C:!0,La:!0},Ns={endpoint:"getAccountInfo"},Os={endpoint:"getOobConfirmationCode",M:["requestType"],A:function(t){if("EMAIL_SIGNIN"!=t.requestType)throw new T("internal-error");as(t)},Y:"email",C:!0},Ps={endpoint:"getOobConfirmationCode",M:["idToken","requestType"],A:function(t){if("VERIFY_EMAIL"!=t.requestType)throw new T("internal-error")},Y:"email",C:!0},Cs={endpoint:"getOobConfirmationCode",M:["idToken","newEmail","requestType"],A:function(t){if("VERIFY_AND_CHANGE_EMAIL"!=t.requestType)throw new T("internal-error")},Y:"email",C:!0},Rs={endpoint:"getOobConfirmationCode",M:["requestType"],A:function(t){if("PASSWORD_RESET"!=t.requestType)throw new T("internal-error");as(t)},Y:"email",C:!0},Ls={hb:!0,endpoint:"getProjectConfig",Rb:"GET"},Ds={hb:!0,endpoint:"getRecaptchaParam",Rb:"GET",G:function(t){if(!t.recaptchaSiteKey)throw new T("internal-error")}},js={endpoint:"resetPassword",A:bs,Y:"email",C:!0},Ms={endpoint:"sendVerificationCode",M:["phoneNumber","recaptchaToken"],Y:"sessionInfo",C:!0},Fs={endpoint:"setAccountInfo",M:["idToken"],A:ss,U:!0},Us={endpoint:"setAccountInfo",M:["idToken"],A:function(t){if(ss(t),!t.password)throw new T("weak-password")},G:us,U:!0},Vs={endpoint:"signupNewUser",G:us,U:!0,C:!0},Hs={endpoint:"accounts/mfaEnrollment:start",M:["idToken","phoneEnrollmentInfo"],A:function(t){if(!t.phoneEnrollmentInfo)throw new T("internal-error");if(!t.phoneEnrollmentInfo.phoneNumber)throw new T("missing-phone-number");if(!t.phoneEnrollmentInfo.recaptchaToken)throw new T("missing-app-credential")},G:function(t){if(!t.phoneSessionInfo||!t.phoneSessionInfo.sessionInfo)throw new T("internal-error")},C:!0,La:!0},Bs={endpoint:"accounts/mfaSignIn:start",M:["mfaPendingCredential","mfaEnrollmentId","phoneSignInInfo"],A:function(t){if(!t.phoneSignInInfo||!t.phoneSignInInfo.recaptchaToken)throw new T("missing-app-credential")},G:function(t){if(!t.phoneResponseInfo||!t.phoneResponseInfo.sessionInfo)throw new T("internal-error")},C:!0,La:!0},qs={endpoint:"verifyAssertion",A:fs,Wa:ps,G:ds,U:!0,C:!0},zs={endpoint:"verifyAssertion",A:fs,Wa:ps,G:function(t){if(t.errorMessage&&"USER_NOT_FOUND"==t.errorMessage)throw new T("user-not-found");if(t.errorMessage)throw Qs(t.errorMessage);us(t)},U:!0,C:!0},Ks={endpoint:"verifyAssertion",A:function(t){if(fs(t),!t.idToken)throw new T("internal-error")},Wa:ps,G:ds,U:!0},Gs={endpoint:"verifyCustomToken",A:function(t){if(!t.token)throw new T("invalid-custom-token")},G:us,U:!0,C:!0},Ws={endpoint:"verifyPassword",A:function(t){if(as(t),!t.password)throw new T("wrong-password")},G:us,U:!0,C:!0},Xs={endpoint:"verifyPhoneNumber",A:cs,G:us,C:!0},$s={endpoint:"verifyPhoneNumber",A:function(t){if(!t.idToken)throw new T("internal-error");cs(t)},G:function(t){if(t.temporaryProof)throw t.code="credential-already-in-use",Ko(t);us(t)}},Js={Eb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",A:cs,G:us,C:!0},Ys={endpoint:"accounts/mfaEnrollment:withdraw",M:["idToken","mfaEnrollmentId"],G:function(t){if(!!t[$a]^!!t.refreshToken)throw new T("internal-error")},C:!0,La:!0};function Zs(t,e,n){if(!function(t,e){if(!e||!e.length)return!0;if(!t)return!1;for(var n=0;n<e.length;n++){var r=t[e[n]];if(null==r||""===r)return!1}return!0}(n,e.M))return Ae(new T("internal-error"));var r,i=!!e.La,o=e.Rb||"POST";return ke(n).then(e.A).then((function(){return e.U&&(n.returnSecureToken=!0),e.C&&t.b&&void 0===n.tenantId&&(n.tenantId=t.b),os(t,i?t.l:t.h,e.endpoint,o,n,e.Eb,e.hb||!1)})).then((function(t){return r=t,e.Wa?e.Wa(n,r):r})).then(e.G).then((function(){if(!e.Y)return r;if(!(e.Y in r))throw new T("internal-error");return r[e.Y]}))}function Qs(t){return tu({error:{errors:[{message:t}],code:400,message:t}})}function tu(t,e){var n=(t.error&&t.error.errors&&t.error.errors[0]||{}).reason||"",r={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(n=r[n]?new T(r[n]):null)return n;for(var i in n=t.error&&t.error.message||"",mt(r={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_OR_INVALID_NONCE:"missing-or-invalid-nonce",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",INVALID_PROVIDER_ID:"invalid-provider-id",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",REJECTED_CREDENTIAL:"rejected-credential",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_DYNAMIC_LINK_DOMAIN:"invalid-dynamic-link-domain",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash",UNSUPPORTED_TENANT_OPERATION:"unsupported-tenant-operation",INVALID_TENANT_ID:"invalid-tenant-id",TENANT_ID_MISMATCH:"tenant-id-mismatch",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",EMAIL_CHANGE_NEEDS_VERIFICATION:"email-change-needs-verification",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",UNSUPPORTED_FIRST_FACTOR:"unsupported-first-factor",UNVERIFIED_EMAIL:"unverified-email"},e||{}),e=(e=n.match(/^[^\s]+\s*:\s*([\s\S]*)$/))&&1<e.length?e[1]:void 0,r)if(0===n.indexOf(i))return new T(r[i],e);return!e&&t&&(e=Rr(t)),new T("internal-error",e)}function eu(t){this.b=t,this.a=null,this.nb=function(t){return(ou||(ou=new we((function(t,e){function n(){Fr(),kr("gapi.load")("gapi.iframes",{callback:t,ontimeout:function(){Fr(),e(Error("Network Error"))},timeout:ru.get()})}if(kr("gapi.iframes.Iframe"))t();else if(kr("gapi.load"))n();else{var r="__iframefcb"+Math.floor(1e6*Math.random()).toString();u[r]=function(){kr("gapi.load")?n():e(Error("Network Error"))},ke(Va(r=Tt(nu,{onload:r}))).o((function(){e(Error("Network Error"))}))}})).o((function(t){throw ou=null,t})))).then((function(){return new we((function(e,n){kr("gapi.iframes.getContext")().open({where:document.body,url:t.b,messageHandlersFilter:kr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},(function(r){function i(){clearTimeout(o),e()}t.a=r,t.a.restyle({setHideOnLeave:!1});var o=setTimeout((function(){n(Error("Network Error"))}),iu.get());r.ping(i).then(i,(function(){n(Error("Network Error"))}))}))}))}))}(this)}var nu=new bt(_t,"https://apis.google.com/js/api.js?onload=%{onload}"),ru=new Ur(3e4,6e4),iu=new Ur(5e3,15e3),ou=null;function au(t,e,n){this.i=t,this.g=e,this.h=n,this.f=null,this.a=Un(this.i,"/__/auth/iframe"),jn(this.a,"apiKey",this.g),jn(this.a,"appName",this.h),this.b=null,this.c=[]}function su(t,e,n,r,i){this.s=t,this.m=e,this.c=n,this.u=r,this.i=this.g=this.l=null,this.a=i,this.h=this.f=null}function uu(t){try{return r.a.app(t).auth().Ea()}catch(t){return[]}}function cu(t,e,n,r,i){this.u=t,this.f=e,this.b=n,this.c=r||null,this.h=i||null,this.m=this.s=this.w=null,this.g=[],this.l=this.a=null}function hu(t){var e=ur();return function(t){return Zs(t,Ls,{}).then((function(t){return t.authorizedDomains||[]}))}(t).then((function(t){t:{var n=Fn(e),r=n.f;n=n.b;for(var i=0;i<t.length;i++){var o=t[i],a=n,s=r;if(0==o.indexOf("chrome-extension://")?a=Fn(o).b==a&&"chrome-extension"==s:"http"!=s&&"https"!=s?a=!1:pr.test(o)?a=a==o:(o=o.split(".").join("\\."),a=new RegExp("^(.+\\."+o+"|"+o+")$","i").test(a)),a){t=!0;break t}}t=!1}if(!t)throw new qo(ur())}))}function lu(t){return t.l||(t.l=vr().then((function(){if(!t.s){var e=t.c,n=t.h,r=uu(t.b),i=new au(t.u,t.f,t.b);i.f=e,i.b=n,i.c=Y(r||[]),t.s=i.toString()}t.i=new eu(t.s),function(t){if(!t.i)throw Error("IfcHandler must be initialized!");!function(t,e){t.nb.then((function(){t.a.register("authEvent",e,kr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}(t.i,(function(e){var n={};if(e&&e.authEvent){var r=!1;for(e=Uo(e.authEvent),n=0;n<t.g.length;n++)r=t.g[n](e)||r;return(n={}).status=r?"ACK":"ERROR",ke(n)}return n.status="ERROR",ke(n)}))}(t)}))),t.l}function fu(t){return t.m||(t.w=t.c?Tr(t.c,uu(t.b)):null,t.m=new Wa(t.f,P(t.h),t.w)),t.m}function pu(t,e,n,r,i,o,a,s,u,c,h){return(t=new su(t,e,n,r,i)).l=o,t.g=a,t.i=s,t.b=dt(u||null),t.f=c,t.ub(h).toString()}function du(t){if(this.a=t||r.a.INTERNAL.reactNative&&r.a.INTERNAL.reactNative.AsyncStorage,!this.a)throw new T("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage"}function vu(t){this.b=t,this.a={},this.f=_(this.c,this)}au.prototype.toString=function(){return this.f?jn(this.a,"v",this.f):Yn(this.a.a,"v"),this.b?jn(this.a,"eid",this.b):Yn(this.a.a,"eid"),this.c.length?jn(this.a,"fw",this.c.join(",")):Yn(this.a.a,"fw"),this.a.toString()},su.prototype.ub=function(t){return this.h=t,this},su.prototype.toString=function(){var t=Un(this.s,"/__/auth/handler");if(jn(t,"apiKey",this.m),jn(t,"appName",this.c),jn(t,"authType",this.u),this.a.isOAuthProvider){var e=this.a;try{var n=r.a.app(this.c).auth().ja()}catch(t){n=null}for(var i in e.kb=n,jn(t,"providerId",this.a.providerId),n=Lr((e=this.a).Fb))n[i]=n[i].toString();i=e.Oc,n=dt(n);for(var o=0;o<i.length;o++){var a=i[o];a in n&&delete n[a]}e.lb&&e.kb&&!n[e.lb]&&(n[e.lb]=e.kb),pt(n)||jn(t,"customParameters",Rr(n))}if("function"==typeof this.a.Nb&&((e=this.a.Nb()).length&&jn(t,"scopes",e.join(","))),this.l?jn(t,"redirectUrl",this.l):Yn(t.a,"redirectUrl"),this.g?jn(t,"eventId",this.g):Yn(t.a,"eventId"),this.i?jn(t,"v",this.i):Yn(t.a,"v"),this.b)for(var s in this.b)this.b.hasOwnProperty(s)&&!Mn(t,s)&&jn(t,s,this.b[s]);return this.h?jn(t,"tid",this.h):Yn(t.a,"tid"),this.f?jn(t,"eid",this.f):Yn(t.a,"eid"),(s=uu(this.c)).length&&jn(t,"fw",s.join(",")),t.toString()},(e=cu.prototype).Lb=function(t,e,n){var r=new T("popup-closed-by-user"),i=new T("web-storage-unsupported"),o=this,a=!1;return this.ka().then((function(){(function(t){var e={type:"webStorageSupport"};return lu(t).then((function(){return function(t,e){return t.nb.then((function(){return new we((function(n){t.a.send(e.type,e,n,kr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}))}(t.i,e)})).then((function(t){if(t&&t.length&&void 0!==t[0].webStorageSupport)return t[0].webStorageSupport;throw Error()}))})(o).then((function(n){n||(t&&lr(t),e(i),a=!0)}))})).o((function(){})).then((function(){if(!a)return function(t){return new we((function(e){return function n(){Tn(2e3).then((function(){if(t&&!t.closed)return n();e()}))}()}))}(t)})).then((function(){if(!a)return Tn(n).then((function(){e(r)}))}))},e.Ub=function(){var t=Sr();return!Cr(t)&&!Mr(t)},e.Qb=function(){return!1},e.Jb=function(t,e,n,r,i,o,a,s){if(!t)return Ae(new T("popup-blocked"));if(a&&!Cr())return this.ka().o((function(e){lr(t),i(e)})),r(),ke();this.a||(this.a=hu(fu(this)));var u=this;return this.a.then((function(){var e=u.ka().o((function(e){throw lr(t),i(e),e}));return r(),e})).then((function(){(Mo(n),a)||cr(pu(u.u,u.f,u.b,e,n,null,o,u.c,void 0,u.h,s),t)})).o((function(t){throw"auth/network-request-failed"==t.code&&(u.a=null),t}))},e.Kb=function(t,e,n,r){this.a||(this.a=hu(fu(this)));var i=this;return this.a.then((function(){Mo(e),cr(pu(i.u,i.f,i.b,t,e,ur(),n,i.c,void 0,i.h,r))})).o((function(t){throw"auth/network-request-failed"==t.code&&(i.a=null),t}))},e.ka=function(){var t=this;return lu(this).then((function(){return t.i.nb})).o((function(){throw t.a=null,new T("network-request-failed")}))},e.Xb=function(){return!0},e.Ca=function(t){this.g.push(t)},e.Qa=function(t){$(this.g,(function(e){return e==t}))},(e=du.prototype).get=function(t){return ke(this.a.getItem(t)).then((function(t){return t&&Dr(t)}))},e.set=function(t,e){return ke(this.a.setItem(t,Rr(e)))},e.T=function(t){return ke(this.a.removeItem(t))},e.ba=function(){},e.ha=function(){};var mu,gu=[];function bu(t,e,n){pt(t.a)&&t.b.addEventListener("message",t.f),void 0===t.a[e]&&(t.a[e]=[]),t.a[e].push(n)}function yu(t){this.a=t}function wu(t){this.c=t,this.b=!1,this.a=[]}function _u(t,e,n,r){var i,o,a,s,u=n||{},c=null;if(t.b)return Ae(Error("connection_unavailable"));var h=r?800:50,l="undefined"!=typeof MessageChannel?new MessageChannel:null;return new we((function(n,r){l?(i=Math.floor(Math.random()*Math.pow(10,20)).toString(),l.port1.start(),a=setTimeout((function(){r(Error("unsupported_event"))}),h),c={messageChannel:l,onMessage:o=function(t){t.data.eventId===i&&("ack"===t.data.status?(clearTimeout(a),s=setTimeout((function(){r(Error("timeout"))}),3e3)):"done"===t.data.status?(clearTimeout(s),void 0!==t.data.response?n(t.data.response):r(Error("unknown_error"))):(clearTimeout(a),clearTimeout(s),r(Error("invalid_response"))))}},t.a.push(c),l.port1.addEventListener("message",o),t.c.postMessage({eventType:e,eventId:i,data:u},[l.port2])):r(Error("connection_unavailable"))})).then((function(e){return xu(t,c),e})).o((function(e){throw xu(t,c),e}))}function xu(t,e){if(e){var n=e.messageChannel,r=e.onMessage;n&&(n.port1.removeEventListener("message",r),n.port1.close()),$(t.a,(function(t){return t==e}))}}function Iu(){if(!Su())throw new T("web-storage-unsupported");this.c={},this.a=[],this.b=0,this.u=u.indexedDB,this.type="indexedDB",this.g=this.l=this.f=this.i=null,this.s=!1,this.h=null;var t=this;br()&&self?(this.l=function(){var t=br()?self:null;if(q(gu,(function(n){n.b==t&&(e=n)})),!e){var e=new vu(t);gu.push(e)}return e}(),bu(this.l,"keyChanged",(function(e,n){return Pu(t).then((function(e){return 0<e.length&&q(t.a,(function(t){t(e)})),{keyProcessed:W(e,n.key)}}))})),bu(this.l,"ping",(function(){return ke(["keyChanged"])}))):function(){var t=u.navigator;return t&&t.serviceWorker?ke().then((function(){return t.serviceWorker.ready})).then((function(t){return t.active||null})).o((function(){return null})):ke(null)}().then((function(e){(t.h=e)&&(t.g=new wu(new yu(e)),_u(t.g,"ping",null,!0).then((function(e){e[0].fulfilled&&W(e[0].value,"keyChanged")&&(t.s=!0)})).o((function(){})))}))}function Eu(t){return new we((function(e,n){var r=t.u.open("firebaseLocalStorageDb",1);r.onerror=function(t){try{t.preventDefault()}catch(t){}n(Error(t.target.error))},r.onupgradeneeded=function(t){t=t.target.result;try{t.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"})}catch(t){n(t)}},r.onsuccess=function(r){(r=r.target.result).objectStoreNames.contains("firebaseLocalStorage")?e(r):function(t){return new we((function(e,n){var r=t.u.deleteDatabase("firebaseLocalStorageDb");r.onsuccess=function(){e()},r.onerror=function(t){n(Error(t.target.error))}}))}(t).then((function(){return Eu(t)})).then((function(t){e(t)})).o((function(t){n(t)}))}}))}function Tu(t){return t.m||(t.m=Eu(t)),t.m}function Su(){try{return!!u.indexedDB}catch(t){return!1}}function ku(t){return t.objectStore("firebaseLocalStorage")}function Au(t,e){return t.transaction(["firebaseLocalStorage"],e?"readwrite":"readonly")}function Nu(t){return new we((function(e,n){t.onsuccess=function(t){t&&t.target?e(t.target.result):e()},t.onerror=function(t){n(t.target.error)}}))}function Ou(t,e){return t.g&&t.h&&function(){var t=u.navigator;return t&&t.serviceWorker&&t.serviceWorker.controller||null}()===t.h?_u(t.g,"keyChanged",{key:e},t.s).then((function(){})).o((function(){})):ke()}function Pu(t){return Tu(t).then((function(t){var e=ku(Au(t,!1));return e.getAll?Nu(e.getAll()):new we((function(t,n){var r=[],i=e.openCursor();i.onsuccess=function(e){(e=e.target.result)?(r.push(e.value),e.continue()):t(r)},i.onerror=function(t){n(t.target.error)}}))})).then((function(e){var n={},r=[];if(0==t.b){for(r=0;r<e.length;r++)n[e[r].fbase_key]=e[r].value;r=function t(e,n){var r,i=[];for(r in e)r in n?typeof e[r]!=typeof n[r]?i.push(r):"object"==typeof e[r]&&null!=e[r]&&null!=n[r]?0<t(e[r],n[r]).length&&i.push(r):e[r]!==n[r]&&i.push(r):i.push(r);for(r in n)r in e||i.push(r);return i}(t.c,n),t.c=n}return r}))}function Cu(t){t.i&&t.i.cancel("STOP_EVENT"),t.f&&(clearTimeout(t.f),t.f=null)}function Ru(t){var e=this,n=null;this.a=[],this.type="indexedDB",this.c=t,this.b=ke().then((function(){if(Su()){var t=jr(),r="__sak"+t;return mu||(mu=new Iu),(n=mu).set(r,t).then((function(){return n.get(r)})).then((function(e){if(e!==t)throw Error("indexedDB not supported!");return n.T(r)})).then((function(){return n})).o((function(){return e.c}))}return e.c})).then((function(t){return e.type=t.type,t.ba((function(t){q(e.a,(function(e){e(t)}))})),t}))}function Lu(){this.a={},this.type="inMemory"}function Du(){if(!function(){var t="Node"==yr();if(!(t=ju()||t&&r.a.INTERNAL.node&&r.a.INTERNAL.node.localStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==yr())throw new T("internal-error","The LocalStorage compatibility library was not found.");throw new T("web-storage-unsupported")}this.a=ju()||r.a.INTERNAL.node.localStorage,this.type="localStorage"}function ju(){try{var t=u.localStorage,e=jr();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}function Mu(){this.type="nullStorage"}function Fu(){if(!function(){var t="Node"==yr();if(!(t=Uu()||t&&r.a.INTERNAL.node&&r.a.INTERNAL.node.sessionStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==yr())throw new T("internal-error","The SessionStorage compatibility library was not found.");throw new T("web-storage-unsupported")}this.a=Uu()||r.a.INTERNAL.node.sessionStorage,this.type="sessionStorage"}function Uu(){try{var t=u.sessionStorage,e=jr();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}function Vu(){var t={};t.Browser=qu,t.Node=zu,t.ReactNative=Ku,t.Worker=Gu,this.a=t[yr()]}vu.prototype.c=function(t){var e=t.data.eventType,n=t.data.eventId,r=this.a[e];if(r&&0<r.length){t.ports[0].postMessage({status:"ack",eventId:n,eventType:e,response:null});var i=[];q(r,(function(e){i.push(ke().then((function(){return e(t.origin,t.data.data)})))})),Oe(i).then((function(r){var i=[];q(r,(function(t){i.push({fulfilled:t.Mb,value:t.value,reason:t.reason?t.reason.message:void 0})})),q(i,(function(t){for(var e in t)void 0===t[e]&&delete t[e]})),t.ports[0].postMessage({status:"done",eventId:n,eventType:e,response:i})}))}},yu.prototype.postMessage=function(t,e){this.a.postMessage(t,e)},wu.prototype.close=function(){for(;0<this.a.length;)xu(this,this.a[0]);this.b=!0},(e=Iu.prototype).set=function(t,e){var n,r=!1,i=this;return Tu(this).then((function(e){return Nu((e=ku(Au(n=e,!0))).get(t))})).then((function(o){var a=ku(Au(n,!0));return o?(o.value=e,Nu(a.put(o))):(i.b++,r=!0,(o={}).fbase_key=t,o.value=e,Nu(a.add(o)))})).then((function(){return i.c[t]=e,Ou(i,t)})).ma((function(){r&&i.b--}))},e.get=function(t){return Tu(this).then((function(e){return Nu(ku(Au(e,!1)).get(t))})).then((function(t){return t&&t.value}))},e.T=function(t){var e=!1,n=this;return Tu(this).then((function(r){return e=!0,n.b++,Nu(ku(Au(r,!0)).delete(t))})).then((function(){return delete n.c[t],Ou(n,t)})).ma((function(){e&&n.b--}))},e.ba=function(t){0==this.a.length&&function(t){Cu(t),function e(){t.f=setTimeout((function(){t.i=Pu(t).then((function(e){0<e.length&&q(t.a,(function(t){t(e)}))})).then((function(){e()})).o((function(t){"STOP_EVENT"!=t.message&&e()}))}),800)}()}(this),this.a.push(t)},e.ha=function(t){$(this.a,(function(e){return e==t})),0==this.a.length&&Cu(this)},(e=Ru.prototype).get=function(t){return this.b.then((function(e){return e.get(t)}))},e.set=function(t,e){return this.b.then((function(n){return n.set(t,e)}))},e.T=function(t){return this.b.then((function(e){return e.T(t)}))},e.ba=function(t){this.a.push(t)},e.ha=function(t){$(this.a,(function(e){return e==t}))},(e=Lu.prototype).get=function(t){return ke(this.a[t])},e.set=function(t,e){return this.a[t]=e,ke()},e.T=function(t){return delete this.a[t],ke()},e.ba=function(){},e.ha=function(){},(e=Du.prototype).get=function(t){var e=this;return ke().then((function(){return Dr(e.a.getItem(t))}))},e.set=function(t,e){var n=this;return ke().then((function(){var r=Rr(e);null===r?n.T(t):n.a.setItem(t,r)}))},e.T=function(t){var e=this;return ke().then((function(){e.a.removeItem(t)}))},e.ba=function(t){u.window&&un(u.window,"storage",t)},e.ha=function(t){u.window&&ln(u.window,"storage",t)},(e=Mu.prototype).get=function(){return ke(null)},e.set=function(){return ke()},e.T=function(){return ke()},e.ba=function(){},e.ha=function(){},(e=Fu.prototype).get=function(t){var e=this;return ke().then((function(){return Dr(e.a.getItem(t))}))},e.set=function(t,e){var n=this;return ke().then((function(){var r=Rr(e);null===r?n.T(t):n.a.setItem(t,r)}))},e.T=function(t){var e=this;return ke().then((function(){e.a.removeItem(t)}))},e.ba=function(){},e.ha=function(){};var Hu,Bu,qu={F:Du,$a:Fu},zu={F:Du,$a:Fu},Ku={F:du,$a:Mu},Gu={F:Du,$a:Mu},Wu={od:"local",NONE:"none",qd:"session"};function Xu(){var t=!(Mr(Sr())||!gr()),e=Cr(),n=Ar();this.m=t,this.h=e,this.l=n,this.a={},Hu||(Hu=new Vu),t=Hu;try{this.g=!sr()&&Br()||!u.indexedDB?new t.a.F:new Ru(br()?new Lu:new t.a.F)}catch(t){this.g=new Lu,this.h=!0}try{this.i=new t.a.$a}catch(t){this.i=new Lu}this.u=new Lu,this.f=_(this.Vb,this),this.b={}}function $u(){return Bu||(Bu=new Xu),Bu}function Ju(t,e){switch(e){case"session":return t.i;case"none":return t.u;default:return t.g}}function Yu(t,e){return"firebase:"+t.name+(e?":"+e:"")}function Zu(t,e,n){return n=Yu(e,n),"local"==e.F&&(t.b[n]=null),Ju(t,e.F).T(n)}function Qu(t){t.c&&(clearInterval(t.c),t.c=null)}function tc(t){this.a=t,this.b=$u()}(e=Xu.prototype).get=function(t,e){return Ju(this,t.F).get(Yu(t,e))},e.set=function(t,e,n){var r=Yu(t,n),i=this,o=Ju(this,t.F);return o.set(r,e).then((function(){return o.get(r)})).then((function(e){"local"==t.F&&(i.b[r]=e)}))},e.addListener=function(t,e,n){t=Yu(t,e),this.l&&(this.b[t]=u.localStorage.getItem(t)),pt(this.a)&&(Ju(this,"local").ba(this.f),this.h||(sr()||!Br())&&u.indexedDB||!this.l||function(t){Qu(t),t.c=setInterval((function(){for(var e in t.a){var n=u.localStorage.getItem(e),r=t.b[e];n!=r&&(t.b[e]=n,n=new Je({type:"storage",key:e,target:window,oldValue:r,newValue:n,a:!0}),t.Vb(n))}}),1e3)}(this)),this.a[t]||(this.a[t]=[]),this.a[t].push(n)},e.removeListener=function(t,e,n){t=Yu(t,e),this.a[t]&&($(this.a[t],(function(t){return t==n})),0==this.a[t].length&&delete this.a[t]),pt(this.a)&&(Ju(this,"local").ha(this.f),Qu(this))},e.Vb=function(t){if(t&&t.f){var e=t.a.key;if(null==e)for(var n in this.a){var r=this.b[n];void 0===r&&(r=null);var i=u.localStorage.getItem(n);i!==r&&(this.b[n]=i,this.ib(n))}else if(0==e.indexOf("firebase:")&&this.a[e]){if(void 0!==t.a.a?Ju(this,"local").ha(this.f):Qu(this),this.m)if(n=u.localStorage.getItem(e),(r=t.a.newValue)!==n)null!==r?u.localStorage.setItem(e,r):u.localStorage.removeItem(e);else if(this.b[e]===r&&void 0===t.a.a)return;var o=this;n=function(){void 0===t.a.a&&o.b[e]===u.localStorage.getItem(e)||(o.b[e]=u.localStorage.getItem(e),o.ib(e))},Wt&&ne&&10==ne&&u.localStorage.getItem(e)!==t.a.newValue&&t.a.newValue!==t.a.oldValue?setTimeout(n,10):n()}}else q(t,_(this.ib,this))},e.ib=function(t){this.a[t]&&q(this.a[t],(function(t){t()}))};var ec,nc={name:"authEvent",F:"local"};function rc(){this.a=$u()}function ic(t,e){this.b=oc,this.f=u.Uint8Array?new Uint8Array(this.b):Array(this.b),this.g=this.c=0,this.a=[],this.i=t,this.h=e,this.l=u.Int32Array?new Int32Array(64):Array(64),void 0===ec&&(ec=u.Int32Array?new Int32Array(fc):fc),this.reset()}E(ic,(function(){this.b=-1}));for(var oc=64,ac=oc-1,sc=[],uc=0;uc<ac;uc++)sc[uc]=0;var cc=J(128,sc);function hc(t){for(var e=t.f,n=t.l,r=0,i=0;i<e.length;)n[r++]=e[i]<<24|e[i+1]<<16|e[i+2]<<8|e[i+3],i=4*r;for(e=16;64>e;e++){i=0|n[e-15],r=0|n[e-2];var o=(0|n[e-16])+((i>>>7|i<<25)^(i>>>18|i<<14)^i>>>3)|0,a=(0|n[e-7])+((r>>>17|r<<15)^(r>>>19|r<<13)^r>>>10)|0;n[e]=o+a|0}r=0|t.a[0],i=0|t.a[1];var s=0|t.a[2],u=0|t.a[3],c=0|t.a[4],h=0|t.a[5],l=0|t.a[6];for(o=0|t.a[7],e=0;64>e;e++){var f=((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+(r&i^r&s^i&s)|0;a=(o=o+((c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7))|0)+((a=(a=c&h^~c&l)+(0|ec[e])|0)+(0|n[e])|0)|0,o=l,l=h,h=c,c=u+a|0,u=s,s=i,i=r,r=a+f|0}t.a[0]=t.a[0]+r|0,t.a[1]=t.a[1]+i|0,t.a[2]=t.a[2]+s|0,t.a[3]=t.a[3]+u|0,t.a[4]=t.a[4]+c|0,t.a[5]=t.a[5]+h|0,t.a[6]=t.a[6]+l|0,t.a[7]=t.a[7]+o|0}function lc(t,e,n){void 0===n&&(n=e.length);var r=0,i=t.c;if("string"==typeof e)for(;r<n;)t.f[i++]=e.charCodeAt(r++),i==t.b&&(hc(t),i=0);else{if(!p(e))throw Error("message must be string or array");for(;r<n;){var o=e[r++];if(!("number"==typeof o&&0<=o&&255>=o&&o==(0|o)))throw Error("message must be a byte array");t.f[i++]=o,i==t.b&&(hc(t),i=0)}}t.c=i,t.g+=n}ic.prototype.reset=function(){this.g=this.c=0,this.a=u.Int32Array?new Int32Array(this.h):Y(this.h)};var fc=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function pc(){ic.call(this,8,dc)}E(pc,ic);var dc=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function vc(t,e,n,r,i){this.u=t,this.i=e,this.l=n,this.m=r||null,this.s=i||null,this.h=e+":"+n,this.w=new rc,this.g=new tc(this.h),this.f=null,this.b=[],this.a=this.c=null}function mc(t){return new T("invalid-cordova-configuration",t)}function gc(t){var e=new pc;lc(e,t),t=[];var n=8*e.g;56>e.c?lc(e,cc,56-e.c):lc(e,cc,e.b-(e.c-56));for(var r=63;56<=r;r--)e.f[r]=255&n,n/=256;for(hc(e),r=n=0;r<e.i;r++)for(var i=24;0<=i;i-=8)t[n++]=e.a[r]>>i&255;return function(t){return K(t,(function(t){return 1<(t=t.toString(16)).length?t:"0"+t})).join("")}(t)}function bc(t,e){for(var n=0;n<t.b.length;n++)try{t.b[n](e)}catch(t){}}function yc(t){return t.f||(t.f=t.ka().then((function(){return new we((function(e){t.Ca((function n(r){return e(r),t.Qa(n),!1})),function(t){function e(e){r=!0,i&&i.cancel(),wc(t).then((function(r){var i=n;if(r&&e&&e.url){var o=null;-1!=(i=no(e.url)).indexOf("/__/auth/callback")&&(o=(o="object"==typeof(o=Dr(Mn(o=Fn(i),"firebaseError")||null))?S(o):null)?new Fo(r.c,r.b,null,null,o,null,r.S()):new Fo(r.c,r.b,i,r.f,null,null,r.S())),i=o||n}bc(t,i)}))}var n=new Fo("unknown",null,null,null,new T("no-auth-event")),r=!1,i=Tn(500).then((function(){return wc(t).then((function(){r||bc(t,n)}))})),o=u.handleOpenURL;u.handleOpenURL=function(t){if(0==t.toLowerCase().indexOf(kr("BuildInfo.packageName",u).toLowerCase()+"://")&&e({url:t}),"function"==typeof o)try{o(t)}catch(t){console.error(t)}},Bo||(Bo=new Vo),function(t){var e=Bo;e.a.push(t),e.b||(e.b=function(t){for(var n=0;n<e.a.length;n++)e.a[n](t)},"function"==typeof(t=kr("universalLinks.subscribe",u))&&t(null,e.b))}(e)}(t)}))}))),t.f}function wc(t){var e=null;return function(t){return t.b.get(nc,t.a).then((function(t){return Uo(t)}))}(t.g).then((function(n){return e=n,Zu((n=t.g).b,nc,n.a)})).then((function(){return e}))}function _c(t){this.a=t,this.b=$u()}(e=vc.prototype).ka=function(){return this.Ga?this.Ga:this.Ga=(mr(void 0)?vr().then((function(){return new we((function(t,e){var n=u.document,r=setTimeout((function(){e(Error("Cordova framework is not ready."))}),1e3);n.addEventListener("deviceready",(function(){clearTimeout(r),t()}),!1)}))})):Ae(Error("Cordova must run in an Android or iOS file scheme."))).then((function(){if("function"!=typeof kr("universalLinks.subscribe",u))throw mc("cordova-universal-links-plugin-fix is not installed");if(void 0===kr("BuildInfo.packageName",u))throw mc("cordova-plugin-buildinfo is not installed");if("function"!=typeof kr("cordova.plugins.browsertab.openUrl",u))throw mc("cordova-plugin-browsertab is not installed");if("function"!=typeof kr("cordova.InAppBrowser.open",u))throw mc("cordova-plugin-inappbrowser is not installed")}),(function(){throw new T("cordova-not-ready")}))},e.Lb=function(t,e){return e(new T("operation-not-supported-in-this-environment")),ke()},e.Jb=function(){return Ae(new T("operation-not-supported-in-this-environment"))},e.Xb=function(){return!1},e.Ub=function(){return!0},e.Qb=function(){return!0},e.Kb=function(t,e,n,r){if(this.c)return Ae(new T("redirect-operation-pending"));var i=this,o=u.document,a=null,s=null,c=null,h=null;return this.c=ke().then((function(){return Mo(e),yc(i)})).then((function(){return function(t,e,n,r,i){var o=function(){for(var t=20,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}(),a=new Fo(e,r,null,o,new T("no-auth-event"),null,i),s=kr("BuildInfo.packageName",u);if("string"!=typeof s)throw new T("invalid-cordova-configuration");var c=kr("BuildInfo.displayName",u),h={};if(Sr().toLowerCase().match(/iphone|ipad|ipod/))h.ibi=s;else{if(!Sr().toLowerCase().match(/android/))return Ae(new T("operation-not-supported-in-this-environment"));h.apn=s}c&&(h.appDisplayName=c),o=gc(o),h.sessionId=o;var l=pu(t.u,t.i,t.l,e,n,null,r,t.m,h,t.s,i);return t.ka().then((function(){var e=t.h;return t.w.a.set(nc,a.v(),e)})).then((function(){var e=kr("cordova.plugins.browsertab.isAvailable",u);if("function"!=typeof e)throw new T("invalid-cordova-configuration");var n=null;e((function(e){if(e){if("function"!=typeof(n=kr("cordova.plugins.browsertab.openUrl",u)))throw new T("invalid-cordova-configuration");n(l)}else{if("function"!=typeof(n=kr("cordova.InAppBrowser.open",u)))throw new T("invalid-cordova-configuration");e=Sr(),t.a=n(l,e.match(/(iPad|iPhone|iPod).*OS 7_\d/i)||e.match(/(iPad|iPhone|iPod).*OS 8_\d/i)?"_blank":"_system","location=yes")}}))}))}(i,t,e,n,r)})).then((function(){return new we((function(t,e){s=function(){var e=kr("cordova.plugins.browsertab.close",u);return t(),"function"==typeof e&&e(),i.a&&"function"==typeof i.a.close&&(i.a.close(),i.a=null),!1},i.Ca(s),c=function(){a||(a=Tn(2e3).then((function(){e(new T("redirect-cancelled-by-user"))})))},h=function(){Vr()&&c()},o.addEventListener("resume",c,!1),Sr().toLowerCase().match(/android/)||o.addEventListener("visibilitychange",h,!1)})).o((function(t){return wc(i).then((function(){throw t}))}))})).ma((function(){c&&o.removeEventListener("resume",c,!1),h&&o.removeEventListener("visibilitychange",h,!1),a&&a.cancel(),s&&i.Qa(s),i.c=null}))},e.Ca=function(t){this.b.push(t),yc(this).o((function(e){"auth/invalid-cordova-configuration"===e.code&&(e=new Fo("unknown",null,null,null,new T("no-auth-event")),t(e))}))},e.Qa=function(t){$(this.b,(function(e){return e==t}))};var xc={name:"pendingRedirect",F:"session"};function Ic(t){return Zu(t.b,xc,t.a)}function Ec(t,e,n){this.i={},this.w=0,this.D=t,this.u=e,this.m=n,this.h=[],this.f=!1,this.l=_(this.s,this),this.b=new Fc,this.B=new qc,this.g=new _c(this.u+":"+this.m),this.c={},this.c.unknown=this.b,this.c.signInViaRedirect=this.b,this.c.linkViaRedirect=this.b,this.c.reauthViaRedirect=this.b,this.c.signInViaPopup=this.B,this.c.linkViaPopup=this.B,this.c.reauthViaPopup=this.B,this.a=Tc(this.D,this.u,this.m,k)}function Tc(t,e,n,i){var o=r.a.SDK_VERSION||null;return mr()?new vc(t,e,n,o,i):new cu(t,e,n,o,i)}function Sc(t){t.f||(t.f=!0,t.a.Ca(t.l));var e=t.a;return t.a.ka().o((function(n){throw t.a==e&&t.reset(),n}))}function kc(t){t.a.Ub()&&Sc(t).o((function(e){var n=new Fo("unknown",null,null,null,new T("operation-not-supported-in-this-environment"));Rc(e)&&t.s(n)})),t.a.Qb()||Uc(t.b)}function Ac(t,e){W(t.h,e)||t.h.push(e),t.f||function(t){return t.b.get(xc,t.a).then((function(t){return"pending"==t}))}(t.g).then((function(e){e?Ic(t.g).then((function(){Sc(t).o((function(e){var n=new Fo("unknown",null,null,null,new T("operation-not-supported-in-this-environment"));Rc(e)&&t.s(n)}))})):kc(t)})).o((function(){kc(t)}))}function Nc(t,e){$(t.h,(function(t){return t==e}))}Ec.prototype.reset=function(){this.f=!1,this.a.Qa(this.l),this.a=Tc(this.D,this.u,this.m),this.i={}},Ec.prototype.s=function(t){if(!t)throw new T("invalid-auth-event");if(6e5<=I()-this.w&&(this.i={},this.w=0),t&&t.getUid()&&this.i.hasOwnProperty(t.getUid()))return!1;for(var e=!1,n=0;n<this.h.length;n++){var r=this.h[n];if(r.Cb(t.c,t.b)){(e=this.c[t.c])&&(e.h(t,r),t&&(t.f||t.b)&&(this.i[t.getUid()]=!0,this.w=I())),e=!0;break}}return Uc(this.b),e};var Oc=new Ur(2e3,1e4),Pc=new Ur(3e4,6e4);function Cc(t,e,n,r,i,o,a){return t.a.Jb(e,n,r,(function(){t.f||(t.f=!0,t.a.Ca(t.l))}),(function(){t.reset()}),i,o,a)}function Rc(t){return!(!t||"auth/cordova-not-ready"!=t.code)}function Lc(t,e,n,r,i){var o;return function(t){return t.b.set(xc,"pending",t.a)}(t.g).then((function(){return t.a.Kb(e,n,r,i).o((function(e){if(Rc(e))throw new T("operation-not-supported-in-this-environment");return o=e,Ic(t.g).then((function(){throw o}))})).then((function(){return t.a.Xb()?new we((function(){})):Ic(t.g).then((function(){return t.pa()})).then((function(){})).o((function(){}))}))}))}function Dc(t,e,n,r,i){return t.a.Lb(r,(function(t){e.la(n,null,t,i)}),Oc.get())}Ec.prototype.pa=function(){return this.b.pa()};var jc={};function Mc(t,e,n){var r=e+":"+n;return jc[r]||(jc[r]=new Ec(t,e,n)),jc[r]}function Fc(){this.b=null,this.f=[],this.c=[],this.a=null,this.i=this.g=!1}function Uc(t){t.g||(t.g=!0,Bc(t,!1,null,null))}function Vc(t){t.g&&!t.i&&Bc(t,!1,null,null)}function Hc(t,e){if(t.b=function(){return ke(e)},t.f.length)for(var n=0;n<t.f.length;n++)t.f[n](e)}function Bc(t,e,n,r){e?r?function(t,e){if(t.b=function(){return Ae(e)},t.c.length)for(var n=0;n<t.c.length;n++)t.c[n](e)}(t,r):Hc(t,n):Hc(t,{user:null}),t.f=[],t.c=[]}function qc(){}function zc(){this.Bb=!1,Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.Bb},set:function(t){this.Bb=t},enumerable:!1})}function Kc(t,e){this.a=e,Wr(this,"verificationId",t)}function Gc(t,e,n,r){return new Lo(t).cb(e,n).then((function(t){return new Kc(t,r)}))}function Wc(t){var e=Bi(t);if(!(e&&e.exp&&e.auth_time&&e.iat))throw new T("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");Xr(this,{token:t,expirationTime:Hr(1e3*e.exp),authTime:Hr(1e3*e.auth_time),issuedAtTime:Hr(1e3*e.iat),signInProvider:e.firebase&&e.firebase.sign_in_provider?e.firebase.sign_in_provider:null,signInSecondFactor:e.firebase&&e.firebase.sign_in_second_factor?e.firebase.sign_in_second_factor:null,claims:e})}function Xc(t,e,n){var r=e&&e[Jc];if(!r)throw new T("argument-error","Internal assert: Invalid MultiFactorResolver");this.a=t,this.f=dt(e),this.g=n,this.c=new ro(null,r),this.b=[];var i=this;q(e[$c]||[],(function(t){(t=Zr(t))&&i.b.push(t)})),Wr(this,"auth",this.a),Wr(this,"session",this.c),Wr(this,"hints",this.b)}Fc.prototype.reset=function(){this.b=null,this.a&&(this.a.cancel(),this.a=null)},Fc.prototype.h=function(t,e){if(t){this.reset(),this.g=!0;var n=t.c,r=t.b,i=t.a&&"auth/web-storage-unsupported"==t.a.code,o=t.a&&"auth/operation-not-supported-in-this-environment"==t.a.code;this.i=!(!i&&!o),"unknown"!=n||i||o?t.a?(Bc(this,!0,null,t.a),ke()):e.Da(n,r)?function(t,e,n){n=n.Da(e.c,e.b);var r=e.g,i=e.f,o=e.i,a=e.S(),s=!!e.c.match(/Redirect$/);n(r,i,a,o).then((function(e){Bc(t,s,e,null)})).o((function(e){Bc(t,s,null,e)}))}(this,t,e):Ae(new T("invalid-auth-event")):(Bc(this,!1,null,null),ke())}else Ae(new T("invalid-auth-event"))},Fc.prototype.pa=function(){var t=this;return new we((function(e,n){t.b?t.b().then(e,n):(t.f.push(e),t.c.push(n),function(t){var e=new T("timeout");t.a&&t.a.cancel(),t.a=Tn(Pc.get()).then((function(){t.b||(t.g=!0,Bc(t,!0,null,e))}))}(t))}))},qc.prototype.h=function(t,e){if(t){var n=t.c,r=t.b;t.a?(e.la(t.c,null,t.a,t.b),ke()):e.Da(n,r)?function(t,e){var n=t.b,r=t.c;e.Da(r,n)(t.g,t.f,t.S(),t.i).then((function(t){e.la(r,t,null,n)})).o((function(t){e.la(r,null,t,n)}))}(t,e):Ae(new T("invalid-auth-event"))}else Ae(new T("invalid-auth-event"))},Kc.prototype.confirm=function(t){return t=Do(this.verificationId,t),this.a(t)};var $c="mfaInfo",Jc="mfaPendingCredential";function Yc(t,e,n,r){T.call(this,"multi-factor-auth-required",r,e),this.b=new Xc(t,e,n),Wr(this,"resolver",this.b)}function Zc(t,e,n){if(t&&v(t.serverResponse)&&"auth/multi-factor-auth-required"===t.code)try{return new Yc(e,t.serverResponse,n,t.message)}catch(t){}return null}function Qc(){}function th(t){Wr(this,"factorId",t.ea),this.a=t}function eh(t){if(th.call(this,t),this.a.ea!=Lo.PROVIDER_ID)throw new T("argument-error","firebase.auth.PhoneMultiFactorAssertion requires a valid firebase.auth.PhoneAuthCredential")}function nh(t,e){for(var n in $e.call(this,t),e)this[n]=e[n]}function rh(t,e){this.a=t,this.b=[],this.c=_(this.wc,this),un(this.a,"userReloaded",this.c);var n=[];e&&e.multiFactor&&e.multiFactor.enrolledFactors&&q(e.multiFactor.enrolledFactors,(function(t){var e=null,r={};if(t){t.uid&&(r[ei]=t.uid),t.displayName&&(r[Qr]=t.displayName),t.enrollmentTime&&(r[ti]=new Date(t.enrollmentTime).toISOString()),t.phoneNumber&&(r[ni]=t.phoneNumber);try{e=new ri(r)}catch(t){}t=e}else t=null;t&&n.push(t)})),ih(this,n)}function ih(t,e){t.b=e,Wr(t,"enrolledFactors",e)}function oh(t,e,n){if(this.h=t,this.i=e,this.g=n,this.c=3e4,this.f=96e4,this.b=null,this.a=this.c,this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!")}function ah(t){this.c=t,this.b=this.a=null}function sh(t){return t.b&&1e3*t.b.c||0}function uh(t,e){var n=e.refreshToken;t.b=Hi(e[$a]||""),t.a=n}function ch(t,e){return function(t,e){return new we((function(n,r){"refresh_token"==e.grant_type&&e.refresh_token||"authorization_code"==e.grant_type&&e.code?ns(t,t.u+"?key="+encodeURIComponent(t.c),(function(t){t?t.error?r(tu(t)):t.access_token&&t.refresh_token?n(t):r(new T("internal-error")):r(new T("network-request-failed"))}),"POST",Jn(e).toString(),t.g,t.m.get()):r(new T("internal-error"))}))}(t.c,e).then((function(e){return t.b=Hi(e.access_token),t.a=e.refresh_token,{accessToken:t.b.toString(),refreshToken:t.a}})).o((function(e){throw"auth/user-token-expired"==e.code&&(t.a=null),e}))}function hh(t,e){this.a=t||null,this.b=e||null,Xr(this,{lastSignInTime:Hr(e||null),creationTime:Hr(t||null)})}function lh(t,e,n,r,i,o){Xr(this,{uid:t,displayName:r||null,photoURL:i||null,email:n||null,phoneNumber:o||null,providerId:e})}function fh(t,e,n){this.N=[],this.l=t.apiKey,this.m=t.appName,this.s=t.authDomain||null,t=r.a.SDK_VERSION?Tr(r.a.SDK_VERSION):null,this.a=new Wa(this.l,P(k),t),this.b=new ah(this.a),yh(this,e[$a]),uh(this.b,e),Wr(this,"refreshToken",this.b.a),xh(this,n||{}),wn.call(this),this.P=!1,this.s&&Nr()&&(this.i=Mc(this.s,this.l,this.m)),this.R=[],this.h=null,this.B=function(t){return new oh((function(){return t.I(!0)}),(function(t){return!(!t||"auth/network-request-failed"!=t.code)}),(function(){var e=sh(t.b)-I()-3e5;return 0<e?e:0}))}(this),this.Z=_(this.Ma,this);var i=this;this.oa=null,this.za=function(t){i.va(t.g)},this.aa=null,this.W=[],this.ya=function(t){dh(i,t.c)},this.$=null,this.O=new rh(this,n),Wr(this,"multiFactor",this.O)}function ph(t,e){t.aa&&ln(t.aa,"languageCodeChanged",t.za),(t.aa=e)&&un(e,"languageCodeChanged",t.za)}function dh(t,e){t.W=e,es(t.a,r.a.SDK_VERSION?Tr(r.a.SDK_VERSION,t.W):null)}function vh(t,e){t.$&&ln(t.$,"frameworkChanged",t.ya),(t.$=e)&&un(e,"frameworkChanged",t.ya)}function mh(t){try{return r.a.app(t.m).auth()}catch(e){throw new T("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+t.m+"'!")}}function gh(t){t.D||t.B.b||(t.B.start(),ln(t,"tokenChanged",t.Z),un(t,"tokenChanged",t.Z))}function bh(t){ln(t,"tokenChanged",t.Z),t.B.stop()}function yh(t,e){t.xa=e,Wr(t,"_lat",e)}function wh(t){for(var e=[],n=0;n<t.R.length;n++)e.push(t.R[n](t));return Oe(e).then((function(){return t}))}function _h(t){t.i&&!t.P&&(t.P=!0,Ac(t.i,t))}function xh(t,e){Xr(t,{uid:e.uid,displayName:e.displayName||null,photoURL:e.photoURL||null,email:e.email||null,emailVerified:e.emailVerified||!1,phoneNumber:e.phoneNumber||null,isAnonymous:e.isAnonymous||!1,tenantId:e.tenantId||null,metadata:new hh(e.createdAt,e.lastLoginAt),providerData:[]}),t.a.b=t.tenantId}function Ih(){}function Eh(t){return ke().then((function(){if(t.D)throw new T("app-deleted")}))}function Th(t){return K(t.providerData,(function(t){return t.providerId}))}function Sh(t,e){e&&(kh(t,e.providerId),t.providerData.push(e))}function kh(t,e){$(t.providerData,(function(t){return t.providerId==e}))}function Ah(t,e,n){("uid"!=e||n)&&t.hasOwnProperty(e)&&Wr(t,e,n)}function Nh(t,e){t!=e&&(Xr(t,{uid:e.uid,displayName:e.displayName,photoURL:e.photoURL,email:e.email,emailVerified:e.emailVerified,phoneNumber:e.phoneNumber,isAnonymous:e.isAnonymous,tenantId:e.tenantId,providerData:[]}),e.metadata?Wr(t,"metadata",function(t){return new hh(t.a,t.b)}(e.metadata)):Wr(t,"metadata",new hh),q(e.providerData,(function(e){Sh(t,e)})),function(t,e){t.b=e.b,t.a=e.a}(t.b,e.b),Wr(t,"refreshToken",t.b.a),ih(t.O,e.O.b))}function Oh(t){return t.I().then((function(e){var n=t.isAnonymous;return function(t,e){return Zs(t.a,Ns,{idToken:e}).then(_(t.Ic,t))}(t,e).then((function(){return n||Ah(t,"isAnonymous",!1),e}))}))}function Ph(t,e){e[$a]&&t.xa!=e[$a]&&(uh(t.b,e),t.dispatchEvent(new nh("tokenChanged")),yh(t,e[$a]),Ah(t,"refreshToken",t.b.a))}function Ch(t,e){return Oh(t).then((function(){if(W(Th(t),e))return wh(t).then((function(){throw new T("provider-already-linked")}))}))}function Rh(t,e,n){return $r({user:t,credential:jo(e),additionalUserInfo:e=Wi(e),operationType:n})}function Lh(t,e){return Ph(t,e),t.reload().then((function(){return t}))}function Dh(t,e,n,i,o){if(!Nr())return Ae(new T("operation-not-supported-in-this-environment"));if(t.h&&!o)return Ae(t.h);var a=Gi(n.providerId),s=jr(t.uid+":::"),u=null;(!Cr()||gr())&&t.s&&n.isOAuthProvider&&(u=pu(t.s,t.l,t.m,e,n,null,s,r.a.SDK_VERSION||null,null,null,t.tenantId));var c=fr(u,a&&a.ta,a&&a.sa);return i=i().then((function(){if(Mh(t),!o)return t.I().then((function(){}))})).then((function(){return Cc(t.i,c,e,n,s,!!u,t.tenantId)})).then((function(){return new we((function(n,r){t.la(e,null,new T("cancelled-popup-request"),t.g||null),t.f=n,t.w=r,t.g=s,t.c=Dc(t.i,t,e,c,s)}))})).then((function(t){return c&&lr(c),t?$r(t):null})).o((function(t){throw c&&lr(c),t})),Fh(t,i,o)}function jh(t,e,n,r,i){if(!Nr())return Ae(new T("operation-not-supported-in-this-environment"));if(t.h&&!i)return Ae(t.h);var o=null,a=jr(t.uid+":::");return r=r().then((function(){if(Mh(t),!i)return t.I().then((function(){}))})).then((function(){return t.fa=a,wh(t)})).then((function(e){return t.ga&&(e=(e=t.ga).b.set(Hh,t.v(),e.a)),e})).then((function(){return Lc(t.i,e,n,a,t.tenantId)})).o((function(e){if(o=e,t.ga)return Bh(t.ga);throw o})).then((function(){if(o)throw o})),Fh(t,r,i)}function Mh(t){if(!t.i||!t.P){if(t.i&&!t.P)throw new T("internal-error");throw new T("auth-domain-config-required")}}function Fh(t,e,n){var r=function(t,e,n){return t.h&&!n?(e.cancel(),Ae(t.h)):e.o((function(e){throw!e||"auth/user-disabled"!=e.code&&"auth/user-token-expired"!=e.code||(t.h||t.dispatchEvent(new nh("userInvalidated")),t.h=e),e}))}(t,e,n);return t.N.push(r),r.ma((function(){X(t.N,r)})),r.o((function(e){var n=null;throw e&&"auth/multi-factor-auth-required"===e.code&&(n=Zc(e.v(),mh(t),_(t.hc,t))),n||e}))}function Uh(t){if(!t.apiKey)return null;var e={apiKey:t.apiKey,authDomain:t.authDomain,appName:t.appName},n={};if(!t.stsTokenManager||!t.stsTokenManager.accessToken)return null;n[$a]=t.stsTokenManager.accessToken,n.refreshToken=t.stsTokenManager.refreshToken||null;var r=new fh(e,n,t);return t.providerData&&q(t.providerData,(function(t){t&&Sh(r,$r(t))})),t.redirectEventId&&(r.fa=t.redirectEventId),r}function Vh(t){this.a=t,this.b=$u()}Xc.prototype.Pc=function(t){var e=this;return t.ob(this.a.b,this.c).then((function(t){var n=dt(e.f);return delete n[$c],delete n[Jc],mt(n,t),e.g(n)}))},E(Yc,T),Qc.prototype.ob=function(t,e,n){return e.type==io?function(t,e,n,r){return n.Fa().then((function(n){return n={idToken:n},void 0!==r&&(n.displayName=r),mt(n,{phoneVerificationInfo:Ro(t.a)}),Zs(e,ks,n)}))}(this,t,e,n):function(t,e,n){return n.Fa().then((function(n){return mt(n={mfaPendingCredential:n},{phoneVerificationInfo:Ro(t.a)}),Zs(e,As,n)}))}(this,t,e)},E(th,Qc),E(eh,th),E(nh,$e),(e=rh.prototype).wc=function(t){ih(this,function(t){var e=[];return q(t.mfaInfo||[],(function(t){(t=Zr(t))&&e.push(t)})),e}(t.ed))},e.Ob=function(){return this.a.I().then((function(t){return new ro(t,null)}))},e.dc=function(t,e){var n=this,r=this.a.a;return this.Ob().then((function(n){return t.ob(r,n,e)})).then((function(t){return Ph(n.a,t),n.a.reload()}))},e.$c=function(t){var e=this,n="string"==typeof t?t:t.uid,r=this.a.a;return this.a.I().then((function(t){return Zs(r,Ys,{idToken:t,mfaEnrollmentId:n})})).then((function(t){var r=z(e.b,(function(t){return t.uid!=n}));return ih(e,r),Ph(e.a,t),e.a.reload().o((function(t){if("auth/user-token-expired"!=t.code)throw t}))}))},e.v=function(){return{multiFactor:{enrolledFactors:K(this.b,(function(t){return t.v()}))}}},oh.prototype.start=function(){this.a=this.c,function t(e,n){e.stop(),e.b=Tn(function(t,e){return e?(t.a=t.c,t.g()):(e=t.a,t.a*=2,t.a>t.f&&(t.a=t.f),e)}(e,n)).then((function(){return function(){var t=u.document,e=null;return Vr()||!t?ke():new we((function(n){e=function(){Vr()&&(t.removeEventListener("visibilitychange",e,!1),n())},t.addEventListener("visibilitychange",e,!1)})).o((function(n){throw t.removeEventListener("visibilitychange",e,!1),n}))}()})).then((function(){return e.h()})).then((function(){t(e,!0)})).o((function(n){e.i(n)&&t(e,!1)}))}(this,!0)},oh.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null)},ah.prototype.v=function(){return{apiKey:this.c.c,refreshToken:this.a,accessToken:this.b&&this.b.toString(),expirationTime:sh(this)}},ah.prototype.getToken=function(t){return t=!!t,this.b&&!this.a?Ae(new T("user-token-expired")):t||!this.b||I()>sh(this)-3e4?this.a?ch(this,{grant_type:"refresh_token",refresh_token:this.a}):ke(null):ke({accessToken:this.b.toString(),refreshToken:this.a})},hh.prototype.v=function(){return{lastLoginAt:this.b,createdAt:this.a}},E(fh,wn),fh.prototype.va=function(t){this.oa=t,ts(this.a,t)},fh.prototype.ja=function(){return this.oa},fh.prototype.Ea=function(){return Y(this.W)},fh.prototype.Ma=function(){this.B.b&&(this.B.stop(),this.B.start())},Wr(fh.prototype,"providerId","firebase"),(e=fh.prototype).reload=function(){var t=this;return Fh(this,Eh(this).then((function(){return Oh(t).then((function(){return wh(t)})).then(Ih)})))},e.mc=function(t){return this.I(t).then((function(t){return new Wc(t)}))},e.I=function(t){var e=this;return Fh(this,Eh(this).then((function(){return e.b.getToken(t)})).then((function(t){if(!t)throw new T("internal-error");return t.accessToken!=e.xa&&(yh(e,t.accessToken),e.dispatchEvent(new nh("tokenChanged"))),Ah(e,"refreshToken",t.refreshToken),t.accessToken})))},e.Ic=function(t){if(!(t=t.users)||!t.length)throw new T("internal-error");xh(this,{uid:(t=t[0]).localId,displayName:t.displayName,photoURL:t.photoUrl,email:t.email,emailVerified:!!t.emailVerified,phoneNumber:t.phoneNumber,lastLoginAt:t.lastLoginAt,createdAt:t.createdAt,tenantId:t.tenantId});for(var e=function(t){return(t=t.providerUserInfo)&&t.length?K(t,(function(t){return new lh(t.rawId,t.providerId,t.email,t.displayName,t.photoUrl,t.phoneNumber)})):[]}(t),n=0;n<e.length;n++)Sh(this,e[n]);Ah(this,"isAnonymous",!(this.email&&t.passwordHash||this.providerData&&this.providerData.length)),this.dispatchEvent(new nh("userReloaded",{ed:t}))},e.Jc=function(t){return Kr("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead."),this.pb(t)},e.pb=function(t){var e=this,n=null;return Fh(this,t.c(this.a,this.uid).then((function(t){return Ph(e,t),n=Rh(e,t,"reauthenticate"),e.h=null,e.reload()})).then((function(){return n})),!0)},e.Ac=function(t){return Kr("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead."),this.mb(t)},e.mb=function(t){var e=this,n=null;return Fh(this,Ch(this,t.providerId).then((function(){return e.I()})).then((function(n){return t.b(e.a,n)})).then((function(t){return n=Rh(e,t,"link"),Lh(e,t)})).then((function(){return n})))},e.Bc=function(t,e){var n=this;return Fh(this,Ch(this,"phone").then((function(){return Gc(mh(n),t,e,_(n.mb,n))})))},e.Kc=function(t,e){var n=this;return Fh(this,ke().then((function(){return Gc(mh(n),t,e,_(n.pb,n))})),!0)},e.xb=function(t){var e=this;return Fh(this,this.I().then((function(n){return e.a.xb(n,t)})).then((function(t){return Ph(e,t),e.reload()})))},e.cd=function(t){var e=this;return Fh(this,this.I().then((function(n){return t.b(e.a,n)})).then((function(t){return Ph(e,t),e.reload()})))},e.yb=function(t){var e=this;return Fh(this,this.I().then((function(n){return e.a.yb(n,t)})).then((function(t){return Ph(e,t),e.reload()})))},e.zb=function(t){if(void 0===t.displayName&&void 0===t.photoURL)return Eh(this);var e=this;return Fh(this,this.I().then((function(n){return e.a.zb(n,{displayName:t.displayName,photoUrl:t.photoURL})})).then((function(t){return Ph(e,t),Ah(e,"displayName",t.displayName||null),Ah(e,"photoURL",t.photoUrl||null),q(e.providerData,(function(t){"password"===t.providerId&&(Wr(t,"displayName",e.displayName),Wr(t,"photoURL",e.photoURL))})),wh(e)})).then(Ih))},e.ad=function(t){var e=this;return Fh(this,Oh(this).then((function(n){return W(Th(e),t)?function(t,e,n){return Zs(t,Es,{idToken:e,deleteProvider:n})}(e.a,n,[t]).then((function(t){var n={};return q(t.providerUserInfo||[],(function(t){n[t.providerId]=!0})),q(Th(e),(function(t){n[t]||kh(e,t)})),n[Lo.PROVIDER_ID]||Wr(e,"phoneNumber",null),wh(e)})):wh(e).then((function(){throw new T("no-such-provider")}))})))},e.delete=function(){var t=this;return Fh(this,this.I().then((function(e){return Zs(t.a,Is,{idToken:e})})).then((function(){t.dispatchEvent(new nh("userDeleted"))}))).then((function(){for(var e=0;e<t.N.length;e++)t.N[e].cancel("app-deleted");ph(t,null),vh(t,null),t.N=[],t.D=!0,bh(t),Wr(t,"refreshToken",null),t.i&&Nc(t.i,t)}))},e.Cb=function(t,e){return!!("linkViaPopup"==t&&(this.g||null)==e&&this.f||"reauthViaPopup"==t&&(this.g||null)==e&&this.f||"linkViaRedirect"==t&&(this.fa||null)==e||"reauthViaRedirect"==t&&(this.fa||null)==e)},e.la=function(t,e,n,r){"linkViaPopup"!=t&&"reauthViaPopup"!=t||r!=(this.g||null)||(n&&this.w?this.w(n):e&&!n&&this.f&&this.f(e),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.w)},e.Da=function(t,e){return"linkViaPopup"==t&&e==(this.g||null)?_(this.Hb,this):"reauthViaPopup"==t&&e==(this.g||null)?_(this.Ib,this):"linkViaRedirect"==t&&(this.fa||null)==e?_(this.Hb,this):"reauthViaRedirect"==t&&(this.fa||null)==e?_(this.Ib,this):null},e.Cc=function(t){var e=this;return Dh(this,"linkViaPopup",t,(function(){return Ch(e,t.providerId).then((function(){return wh(e)}))}),!1)},e.Lc=function(t){return Dh(this,"reauthViaPopup",t,(function(){return ke()}),!0)},e.Dc=function(t){var e=this;return jh(this,"linkViaRedirect",t,(function(){return Ch(e,t.providerId)}),!1)},e.Mc=function(t){return jh(this,"reauthViaRedirect",t,(function(){return ke()}),!0)},e.Hb=function(t,e,n,r){var i=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return Fh(this,this.I().then((function(n){return ms(i.a,{requestUri:t,postBody:r,sessionId:e,idToken:n})})).then((function(t){return o=Rh(i,t,"link"),Lh(i,t)})).then((function(){return o})))},e.Ib=function(t,e,n,r){var i=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return Fh(this,ke().then((function(){return so(gs(i.a,{requestUri:t,sessionId:e,postBody:r,tenantId:n}),i.uid)})).then((function(t){return o=Rh(i,t,"reauthenticate"),Ph(i,t),i.h=null,i.reload()})).then((function(){return o})),!0)},e.qb=function(t){var e=this,n=null;return Fh(this,this.I().then((function(e){return n=e,void 0===t||pt(t)?{}:Mi(new ki(t))})).then((function(t){return e.a.qb(n,t)})).then((function(t){if(e.email!=t)return e.reload()})).then((function(){})))},e.Ab=function(t,e){var n=this,r=null;return Fh(this,this.I().then((function(t){return r=t,void 0===e||pt(e)?{}:Mi(new ki(e))})).then((function(e){return n.a.Ab(r,t,e)})).then((function(t){if(n.email!=t)return n.reload()})).then((function(){})))},e.hc=function(t){var e=null,n=this;return Fh(this,t=so(ke(t),n.uid).then((function(t){return e=Rh(n,t,"reauthenticate"),Ph(n,t),n.h=null,n.reload()})).then((function(){return e})),!0)},e.toJSON=function(){return this.v()},e.v=function(){var t={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,tenantId:this.tenantId,providerData:[],apiKey:this.l,appName:this.m,authDomain:this.s,stsTokenManager:this.b.v(),redirectEventId:this.fa||null};return this.metadata&&mt(t,this.metadata.v()),q(this.providerData,(function(e){t.providerData.push(function(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&(n[e]=t[e]);return n}(e))})),mt(t,this.O.v()),t};var Hh={name:"redirectUser",F:"session"};function Bh(t){return Zu(t.b,Hh,t.a)}function qh(t){this.a=t,this.b=$u(),this.c=null,this.f=function(t){var e=Gh("local"),n=Gh("session"),r=Gh("none");return function(t,e,n){var r=Yu(e,n),i=Ju(t,e.F);return t.get(e,n).then((function(o){var a=null;try{a=Dr(u.localStorage.getItem(r))}catch(t){}if(a&&!o)return u.localStorage.removeItem(r),t.set(e,a,n);a&&o&&"localStorage"!=i.type&&u.localStorage.removeItem(r)}))}(t.b,e,t.a).then((function(){return t.b.get(n,t.a)})).then((function(i){return i?n:t.b.get(r,t.a).then((function(n){return n?r:t.b.get(e,t.a).then((function(n){return n?e:t.b.get(Kh,t.a).then((function(t){return t?Gh(t):e}))}))}))})).then((function(e){return t.c=e,zh(t,e.F)})).o((function(){t.c||(t.c=e)}))}(this),this.b.addListener(Gh("local"),this.a,_(this.g,this))}function zh(t,e){var n,r=[];for(n in Wu)Wu[n]!==e&&r.push(Zu(t.b,Gh(Wu[n]),t.a));return r.push(Zu(t.b,Kh,t.a)),function(t){return new we((function(e,n){var r=t.length,i=[];if(r)for(var o=function(t,n){r--,i[t]=n,0==r&&e(i)},a=function(t){n(t)},s=0;s<t.length;s++)Ne(t[s],x(o,s),a);else e(i)}))}(r)}qh.prototype.g=function(){var t=this,e=Gh("local");Jh(this,(function(){return ke().then((function(){return t.c&&"local"!=t.c.F?t.b.get(e,t.a):null})).then((function(n){if(n)return zh(t,"local").then((function(){t.c=e}))}))}))};var Kh={name:"persistence",F:"session"};function Gh(t){return{name:"authUser",F:t}}function Wh(t,e){return Jh(t,(function(){return t.b.set(t.c,e.v(),t.a)}))}function Xh(t){return Jh(t,(function(){return Zu(t.b,t.c,t.a)}))}function $h(t,e){return Jh(t,(function(){return t.b.get(t.c,t.a).then((function(t){return t&&e&&(t.authDomain=e),Uh(t||{})}))}))}function Jh(t,e){return t.f=t.f.then(e,e),t.f}function Yh(t){if(this.l=!1,Wr(this,"settings",new zc),Wr(this,"app",t),!ol(this).options||!ol(this).options.apiKey)throw new T("invalid-api-key");t=r.a.SDK_VERSION?Tr(r.a.SDK_VERSION):null,this.b=new Wa(ol(this).options&&ol(this).options.apiKey,P(k),t),this.P=[],this.m=[],this.O=[],this.$b=r.a.INTERNAL.createSubscribe(_(this.xc,this)),this.W=void 0,this.ac=r.a.INTERNAL.createSubscribe(_(this.yc,this)),rl(this,null),this.i=new qh(ol(this).options.apiKey+":"+ol(this).name),this.B=new Vh(ol(this).options.apiKey+":"+ol(this).name),this.Z=cl(this,function(t){var e=ol(t).options.authDomain,n=function(t){var e=function(t,e){return t.b.get(Hh,t.a).then((function(t){return t&&e&&(t.authDomain=e),Uh(t||{})}))}(t.B,ol(t).options.authDomain).then((function(e){return(t.D=e)&&(e.ga=t.B),Bh(t.B)}));return cl(t,e)}(t).then((function(){return $h(t.i,e)})).then((function(e){return e?(e.ga=t.B,t.D&&(t.D.fa||null)==(e.fa||null)?e:e.reload().then((function(){return Wh(t.i,e).then((function(){return e}))})).o((function(n){return"auth/network-request-failed"==n.code?e:Xh(t.i)}))):null})).then((function(e){rl(t,e||null)}));return cl(t,n)}(this)),this.h=cl(this,function(t){return t.Z.then((function(){return el(t)})).o((function(){})).then((function(){if(!t.l)return t.oa()})).o((function(){})).then((function(){if(!t.l){t.aa=!0;var e=t.i;e.b.addListener(Gh("local"),e.a,t.oa)}}))}(this)),this.aa=!1,this.oa=_(this.Xc,this),this.Ma=_(this.ca,this),this.xa=_(this.jc,this),this.ya=_(this.uc,this),this.za=_(this.vc,this),this.a=null,function(t){var e=ol(t).options.authDomain,n=ol(t).options.apiKey;e&&Nr()&&(t.Zb=t.Z.then((function(){if(!t.l){if(t.a=Mc(e,n,ol(t).name),Ac(t.a,t),al(t)&&_h(al(t)),t.D){_h(t.D);var r=t.D;r.va(t.ja()),ph(r,t),dh(r=t.D,t.N),vh(r,t),t.D=null}return t.a}})))}(this),this.INTERNAL={},this.INTERNAL.delete=_(this.delete,this),this.INTERNAL.logFramework=_(this.Ec,this),this.s=0,wn.call(this),function(t){Object.defineProperty(t,"lc",{get:function(){return this.ja()},set:function(t){this.va(t)},enumerable:!1}),t.$=null,Object.defineProperty(t,"ti",{get:function(){return this.S()},set:function(t){this.ub(t)},enumerable:!1}),t.R=null}(this),this.N=[]}function Zh(t){$e.call(this,"languageCodeChanged"),this.g=t}function Qh(t){$e.call(this,"frameworkChanged"),this.c=t}function tl(t){return t.Zb||Ae(new T("auth-domain-config-required"))}function el(t){if(!Nr())return Ae(new T("operation-not-supported-in-this-environment"));var e=tl(t).then((function(){return t.a.pa()})).then((function(t){return t?$r(t):null}));return cl(t,e)}function nl(t,e){var n={};return n.apiKey=ol(t).options.apiKey,n.authDomain=ol(t).options.authDomain,n.appName=ol(t).name,t.Z.then((function(){return function(t,e,n,r){var i=new fh(t,e);return n&&(i.ga=n),r&&dh(i,r),i.reload().then((function(){return i}))}(n,e,t.B,t.Ea())})).then((function(e){return al(t)&&e.uid==al(t).uid?(Nh(al(t),e),t.ca(e)):(rl(t,e),_h(e),t.ca(e))})).then((function(){ul(t)}))}function rl(t,e){al(t)&&(function(t,e){$(t.R,(function(t){return t==e}))}(al(t),t.Ma),ln(al(t),"tokenChanged",t.xa),ln(al(t),"userDeleted",t.ya),ln(al(t),"userInvalidated",t.za),bh(al(t))),e&&(e.R.push(t.Ma),un(e,"tokenChanged",t.xa),un(e,"userDeleted",t.ya),un(e,"userInvalidated",t.za),0<t.s&&gh(e)),Wr(t,"currentUser",e),e&&(e.va(t.ja()),ph(e,t),dh(e,t.N),vh(e,t))}function il(t,e){var n=null,r=null;return cl(t,e.then((function(e){return n=jo(e),r=Wi(e),nl(t,e)}),(function(e){var n=null;throw e&&"auth/multi-factor-auth-required"===e.code&&(n=Zc(e.v(),t,_(t.ic,t))),n||e})).then((function(){return $r({user:al(t),credential:n,additionalUserInfo:r,operationType:"signIn"})})))}function ol(t){return t.app}function al(t){return t.currentUser}function sl(t){return al(t)&&al(t)._lat||null}function ul(t){if(t.aa){for(var e=0;e<t.m.length;e++)t.m[e]&&t.m[e](sl(t));if(t.W!==t.getUid()&&t.O.length)for(t.W=t.getUid(),e=0;e<t.O.length;e++)t.O[e]&&t.O[e](sl(t))}}function cl(t,e){return t.P.push(e),e.ma((function(){X(t.P,e)})),e}function hl(){}function ll(){this.a={},this.b=1e12}qh.prototype.tb=function(t){var e=null,n=this;return function(t){var e=new T("invalid-persistence-type"),n=new T("unsupported-persistence-type");t:{for(r in Wu)if(Wu[r]==t){var r=!0;break t}r=!1}if(!r||"string"!=typeof t)throw e;switch(yr()){case"ReactNative":if("session"===t)throw n;break;case"Node":if("none"!==t)throw n;break;default:if(!Ar()&&"none"!==t)throw n}}(t),Jh(this,(function(){return t!=n.c.F?n.b.get(n.c,n.a).then((function(r){return e=r,zh(n,t)})).then((function(){if(n.c=Gh(t),e)return n.b.set(n.c,e,n.a)})):ke()}))},E(Yh,wn),E(Zh,$e),E(Qh,$e),(e=Yh.prototype).tb=function(t){return cl(this,t=this.i.tb(t))},e.va=function(t){this.$===t||this.l||(this.$=t,ts(this.b,this.$),this.dispatchEvent(new Zh(this.ja())))},e.ja=function(){return this.$},e.dd=function(){var t=u.navigator;this.va(t&&(t.languages&&t.languages[0]||t.language||t.userLanguage)||null)},e.Ec=function(t){this.N.push(t),es(this.b,r.a.SDK_VERSION?Tr(r.a.SDK_VERSION,this.N):null),this.dispatchEvent(new Qh(this.N))},e.Ea=function(){return Y(this.N)},e.ub=function(t){this.R===t||this.l||(this.R=t,this.b.b=this.R)},e.S=function(){return this.R},e.toJSON=function(){return{apiKey:ol(this).options.apiKey,authDomain:ol(this).options.authDomain,appName:ol(this).name,currentUser:al(this)&&al(this).v()}},e.Cb=function(t,e){switch(t){case"unknown":case"signInViaRedirect":return!0;case"signInViaPopup":return this.g==e&&!!this.f;default:return!1}},e.la=function(t,e,n,r){"signInViaPopup"==t&&this.g==r&&(n&&this.w?this.w(n):e&&!n&&this.f&&this.f(e),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.w)},e.Da=function(t,e){return"signInViaRedirect"==t||"signInViaPopup"==t&&this.g==e&&this.f?_(this.gc,this):null},e.gc=function(t,e,n,r){var i=this,o={requestUri:t,postBody:r,sessionId:e,tenantId:n};return this.c&&(this.c.cancel(),this.c=null),i.Z.then((function(){return il(i,vs(i.b,o))}))},e.Vc=function(t){if(!Nr())return Ae(new T("operation-not-supported-in-this-environment"));var e=this,n=Gi(t.providerId),i=jr(),o=null;(!Cr()||gr())&&ol(this).options.authDomain&&t.isOAuthProvider&&(o=pu(ol(this).options.authDomain,ol(this).options.apiKey,ol(this).name,"signInViaPopup",t,null,i,r.a.SDK_VERSION||null,null,null,this.S()));var a=fr(o,n&&n.ta,n&&n.sa);return cl(this,n=tl(this).then((function(n){return Cc(n,a,"signInViaPopup",t,i,!!o,e.S())})).then((function(){return new we((function(t,n){e.la("signInViaPopup",null,new T("cancelled-popup-request"),e.g),e.f=t,e.w=n,e.g=i,e.c=Dc(e.a,e,"signInViaPopup",a,i)}))})).then((function(t){return a&&lr(a),t?$r(t):null})).o((function(t){throw a&&lr(a),t})))},e.Wc=function(t){if(!Nr())return Ae(new T("operation-not-supported-in-this-environment"));var e=this;return cl(this,tl(this).then((function(){return function(t){return Jh(t,(function(){return t.b.set(Kh,t.c.F,t.a)}))}(e.i)})).then((function(){return Lc(e.a,"signInViaRedirect",t,void 0,e.S())})))},e.pa=function(){var t=this;return el(this).then((function(e){return t.a&&Vc(t.a.b),e})).o((function(e){throw t.a&&Vc(t.a.b),e}))},e.bd=function(t){if(!t)return Ae(new T("null-user"));if(this.R!=t.tenantId)return Ae(new T("tenant-id-mismatch"));var e=this,n={};n.apiKey=ol(this).options.apiKey,n.authDomain=ol(this).options.authDomain,n.appName=ol(this).name;var r=function(t,e,n,r){var i=t.b,o={};return o[$a]=i.b&&i.b.toString(),o.refreshToken=i.a,e=new fh(e||{apiKey:t.l,authDomain:t.s,appName:t.m},o),n&&(e.ga=n),r&&dh(e,r),Nh(e,t),e}(t,n,e.B,e.Ea());return cl(this,this.h.then((function(){if(ol(e).options.apiKey!=t.l)return r.reload()})).then((function(){return al(e)&&t.uid==al(e).uid?(Nh(al(e),t),e.ca(t)):(rl(e,r),_h(r),e.ca(r))})).then((function(){ul(e)})))},e.wb=function(){var t=this;return cl(this,this.h.then((function(){return t.a&&Vc(t.a.b),al(t)?(rl(t,null),Xh(t.i).then((function(){ul(t)}))):ke()})))},e.Xc=function(){var t=this;return $h(this.i,ol(this).options.authDomain).then((function(e){if(!t.l){var n;if(n=al(t)&&e){n=al(t).uid;var r=e.uid;n=null!=n&&""!==n&&null!=r&&""!==r&&n==r}if(n)return Nh(al(t),e),al(t).I();(al(t)||e)&&(rl(t,e),e&&(_h(e),e.ga=t.B),t.a&&Ac(t.a,t),ul(t))}}))},e.ca=function(t){return Wh(this.i,t)},e.jc=function(){ul(this),this.ca(al(this))},e.uc=function(){this.wb()},e.vc=function(){this.wb()},e.ic=function(t){var e=this;return this.h.then((function(){return il(e,ke(t))}))},e.xc=function(t){var e=this;this.addAuthTokenListener((function(){t.next(al(e))}))},e.yc=function(t){var e=this;!function(t,e){t.O.push(e),cl(t,t.h.then((function(){!t.l&&W(t.O,e)&&t.W!==t.getUid()&&(t.W=t.getUid(),e(sl(t)))})))}(this,(function(){t.next(al(e))}))},e.Gc=function(t,e,n){var r=this;return this.aa&&Promise.resolve().then((function(){d(t)?t(al(r)):d(t.next)&&t.next(al(r))})),this.$b(t,e,n)},e.Fc=function(t,e,n){var r=this;return this.aa&&Promise.resolve().then((function(){r.W=r.getUid(),d(t)?t(al(r)):d(t.next)&&t.next(al(r))})),this.ac(t,e,n)},e.kc=function(t){var e=this;return cl(this,this.h.then((function(){return al(e)?al(e).I(t).then((function(t){return{accessToken:t}})):null})))},e.Rc=function(t){var e=this;return this.h.then((function(){return il(e,Zs(e.b,Gs,{token:t}))})).then((function(t){var n=t.user;return Ah(n,"isAnonymous",!1),e.ca(n),t}))},e.Sc=function(t,e){var n=this;return this.h.then((function(){return il(n,Zs(n.b,Ws,{email:t,password:e}))}))},e.cc=function(t,e){var n=this;return this.h.then((function(){return il(n,Zs(n.b,_s,{email:t,password:e}))}))},e.Ya=function(t){var e=this;return this.h.then((function(){return il(e,t.ia(e.b))}))},e.Qc=function(t){return Kr("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead."),this.Ya(t)},e.vb=function(){var t=this;return this.h.then((function(){var e=al(t);if(e&&e.isAnonymous){var n=$r({providerId:null,isNewUser:!1});return $r({user:e,credential:null,additionalUserInfo:n,operationType:"signIn"})}return il(t,t.b.vb()).then((function(e){var n=e.user;return Ah(n,"isAnonymous",!0),t.ca(n),e}))}))},e.getUid=function(){return al(this)&&al(this).uid||null},e.bc=function(t){this.addAuthTokenListener(t),this.s++,0<this.s&&al(this)&&gh(al(this))},e.Nc=function(t){var e=this;q(this.m,(function(n){n==t&&e.s--})),0>this.s&&(this.s=0),0==this.s&&al(this)&&bh(al(this)),this.removeAuthTokenListener(t)},e.addAuthTokenListener=function(t){var e=this;this.m.push(t),cl(this,this.h.then((function(){e.l||W(e.m,t)&&t(sl(e))})))},e.removeAuthTokenListener=function(t){$(this.m,(function(e){return e==t}))},e.delete=function(){this.l=!0;for(var t=0;t<this.P.length;t++)this.P[t].cancel("app-deleted");return this.P=[],this.i&&(t=this.i).b.removeListener(Gh("local"),t.a,this.oa),this.a&&(Nc(this.a,this),Vc(this.a.b)),Promise.resolve()},e.fc=function(t){return cl(this,function(t,e){return Zs(t,xs,{identifier:e,continueUri:Or()?ur():"http://localhost"}).then((function(t){return t.signinMethods||[]}))}(this.b,t))},e.zc=function(t){return!!Oo(t)},e.sb=function(t,e){var n=this;return cl(this,ke().then((function(){var t=new ki(e);if(!t.c)throw new T("argument-error",Oi+" must be true when sending sign in link to email");return Mi(t)})).then((function(e){return n.b.sb(t,e)})).then((function(){})))},e.fd=function(t){return this.Pa(t).then((function(t){return t.data.email}))},e.jb=function(t,e){return cl(this,this.b.jb(t,e).then((function(){})))},e.Pa=function(t){return cl(this,this.b.Pa(t).then((function(t){return new ii(t)})))},e.fb=function(t){return cl(this,this.b.fb(t).then((function(){})))},e.rb=function(t,e){var n=this;return cl(this,ke().then((function(){return void 0===e||pt(e)?{}:Mi(new ki(e))})).then((function(e){return n.b.rb(t,e)})).then((function(){})))},e.Uc=function(t,e){return cl(this,Gc(this,t,e,_(this.Ya,this)))},e.Tc=function(t,e){var n=this;return cl(this,ke().then((function(){var r=e||ur(),i=No(t,r);if(!(r=Oo(r)))throw new T("argument-error","Invalid email link!");if(r.tenantId!==n.S())throw new T("tenant-id-mismatch");return n.Ya(i)})))},hl.prototype.render=function(){},hl.prototype.reset=function(){},hl.prototype.getResponse=function(){},hl.prototype.execute=function(){};var fl=null;function pl(t,e){return(e=dl(e))&&t.a[e]||null}function dl(t){return(t=void 0===t?1e12:t)?t.toString():null}function vl(t,e){this.g=!1,this.c=e,this.a=this.b=null,this.h="invisible"!==this.c.size,this.f=ae(t);var n=this;this.i=function(){n.execute()},this.h?this.execute():un(this.f,"click",this.i)}function ml(t){if(t.g)throw Error("reCAPTCHA mock was already deleted!")}function gl(){}function bl(){}ll.prototype.render=function(t,e){return this.a[this.b.toString()]=new vl(t,e),this.b++},ll.prototype.reset=function(t){var e=pl(this,t);t=dl(t),e&&t&&(e.delete(),delete this.a[t])},ll.prototype.getResponse=function(t){return(t=pl(this,t))?t.getResponse():null},ll.prototype.execute=function(t){(t=pl(this,t))&&t.execute()},vl.prototype.getResponse=function(){return ml(this),this.b},vl.prototype.execute=function(){ml(this);var t=this;this.a||(this.a=setTimeout((function(){t.b=function(){for(var t=50,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}();var e=t.c.callback,n=t.c["expired-callback"];if(e)try{e(t.b)}catch(t){}t.a=setTimeout((function(){if(t.a=null,t.b=null,n)try{n()}catch(t){}t.h&&t.execute()}),6e4)}),500))},vl.prototype.delete=function(){ml(this),this.g=!0,clearTimeout(this.a),this.a=null,ln(this.f,"click",this.i)},Wr(gl,"FACTOR_ID","phone"),bl.prototype.g=function(){return fl||(fl=new ll),ke(fl)},bl.prototype.c=function(){};var yl=null;function wl(){this.b=u.grecaptcha?1/0:0,this.f=null,this.a="__rcb"+Math.floor(1e6*Math.random()).toString()}var _l=new bt(_t,"https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),xl=new Ur(3e4,6e4);wl.prototype.g=function(t){var e=this;return new we((function(n,r){var i=setTimeout((function(){r(new T("network-request-failed"))}),xl.get());!u.grecaptcha||t!==e.f&&!e.b?(u[e.a]=function(){if(u.grecaptcha){e.f=t;var o=u.grecaptcha.render;u.grecaptcha.render=function(t,n){return t=o(t,n),e.b++,t},clearTimeout(i),n(u.grecaptcha)}else clearTimeout(i),r(new T("internal-error"));delete u[e.a]},ke(Va(Tt(_l,{onload:e.a,hl:t||""}))).o((function(){clearTimeout(i),r(new T("internal-error","Unable to load external reCAPTCHA dependencies!"))}))):(clearTimeout(i),n(u.grecaptcha))}))},wl.prototype.c=function(){this.b--};var Il=null;function El(t,e,n,r,i,o,a){if(Wr(this,"type","recaptcha"),this.c=this.f=null,this.D=!1,this.u=e,this.g=null,a?(yl||(yl=new bl),a=yl):(Il||(Il=new wl),a=Il),this.m=a,this.a=n||{theme:"light",type:"image"},this.h=[],this.a[kl])throw new T("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");if(this.i="invisible"===this.a[Al],!u.document)throw new T("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");if(!ae(e)||!this.i&&ae(e).hasChildNodes())throw new T("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.s=new Wa(t,o||null,i||null),this.w=r||function(){return null};var s=this;this.l=[];var c=this.a[Tl];this.a[Tl]=function(t){if(Nl(s,t),"function"==typeof c)c(t);else if("string"==typeof c){var e=kr(c,u);"function"==typeof e&&e(t)}};var h=this.a[Sl];this.a[Sl]=function(){if(Nl(s,null),"function"==typeof h)h();else if("string"==typeof h){var t=kr(h,u);"function"==typeof t&&t()}}}var Tl="callback",Sl="expired-callback",kl="sitekey",Al="size";function Nl(t,e){for(var n=0;n<t.l.length;n++)try{t.l[n](e)}catch(t){}}function Ol(t,e){return t.h.push(e),e.ma((function(){X(t.h,e)})),e}function Pl(t){if(t.D)throw new T("internal-error","RecaptchaVerifier instance has been destroyed.")}function Cl(t,e,n){var i=!1;try{this.b=n||r.a.app()}catch(t){throw new T("argument-error","No firebase.app.App instance is currently initialized.")}if(!this.b.options||!this.b.options.apiKey)throw new T("invalid-api-key");n=this.b.options.apiKey;var o=this,a=null;try{a=this.b.auth().Ea()}catch(t){}try{i=this.b.auth().settings.appVerificationDisabledForTesting}catch(t){}a=r.a.SDK_VERSION?Tr(r.a.SDK_VERSION,a):null,El.call(this,n,t,e,(function(){try{var t=o.b.auth().ja()}catch(e){t=null}return t}),a,P(k),i)}function Rl(t,e,n,r){t:{n=Array.prototype.slice.call(n);for(var i=0,o=!1,a=0;a<e.length;a++)if(e[a].optional)o=!0;else{if(o)throw new T("internal-error","Argument validator encountered a required argument after an optional argument.");i++}if(o=e.length,n.length<i||o<n.length)r="Expected "+(i==o?1==i?"1 argument":i+" arguments":i+"-"+o+" arguments")+" but got "+n.length+".";else{for(i=0;i<n.length;i++)if(o=e[i].optional&&void 0===n[i],!e[i].K(n[i])&&!o){if(e=e[i],0>i||i>=Ll.length)throw new T("internal-error","Argument validator received an unsupported number of arguments.");n=Ll[i],r=(r?"":n+" argument ")+(e.name?'"'+e.name+'" ':"")+"must be "+e.J+".";break t}r=null}}if(r)throw new T("argument-error",t+" failed: "+r)}(e=El.prototype).Ga=function(){var t=this;return this.f?this.f:this.f=Ol(this,ke().then((function(){if(Or()&&!br())return vr();throw new T("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.")})).then((function(){return t.m.g(t.w())})).then((function(e){return t.g=e,Zs(t.s,Ds,{})})).then((function(e){t.a[kl]=e.recaptchaSiteKey})).o((function(e){throw t.f=null,e})))},e.render=function(){Pl(this);var t=this;return Ol(this,this.Ga().then((function(){if(null===t.c){var e=t.u;if(!t.i){var n=ae(e);e=function(t,e,n){var r=arguments,i=document,o=String(r[0]),a=r[1];if(!oe&&a&&(a.name||a.type)){if(o=["<",o],a.name&&o.push(' name="',Bt(a.name),'"'),a.type){o.push(' type="',Bt(a.type),'"');var s={};mt(s,a),delete s.type,a=s}o.push(">"),o=o.join("")}return o=fe(i,o),a&&("string"==typeof a?o.className=a:Array.isArray(a)?o.className=a.join(" "):se(o,a)),2<r.length&&le(i,o,r),o}("DIV"),n.appendChild(e)}t.c=t.g.render(e,t.a)}return t.c})))},e.verify=function(){Pl(this);var t=this;return Ol(this,this.render().then((function(e){return new we((function(n){var r=t.g.getResponse(e);if(r)n(r);else{var i=function(e){e&&(function(t,e){$(t.l,(function(t){return t==e}))}(t,i),n(e))};t.l.push(i),t.i&&t.g.execute(t.c)}}))})))},e.reset=function(){Pl(this),null!==this.c&&this.g.reset(this.c)},e.clear=function(){Pl(this),this.D=!0,this.m.c();for(var t=0;t<this.h.length;t++)this.h[t].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){t=ae(this.u);for(var e;e=t.firstChild;)t.removeChild(e)}},E(Cl,El);var Ll="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function Dl(t,e){return{name:t||"",J:"a valid string",optional:!!e,K:function(t){return"string"==typeof t}}}function jl(t,e){return{name:t||"",J:"a boolean",optional:!!e,K:function(t){return"boolean"==typeof t}}}function Ml(t,e){return{name:t||"",J:"a valid object",optional:!!e,K:v}}function Fl(t,e){return{name:t||"",J:"a function",optional:!!e,K:d}}function Ul(t,e){return{name:t||"",J:"null",optional:!!e,K:function(t){return null===t}}}function Vl(t){return{name:t?t+"Credential":"credential",J:t?"a valid "+t+" credential":"a valid credential",optional:!1,K:function(e){if(!e)return!1;var n=!t||e.providerId===t;return!(!e.ia||!n)}}}function Hl(t,e){return v(t)&&"string"==typeof t.type&&t.type===e&&d(t.Fa)}function Bl(t){return v(t)&&"string"==typeof t.uid}function ql(){return{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(t){return!(!t||"string"!=typeof t.type||!d(t.verify))}}}function zl(t,e,n,r){return{name:n||"",J:t.J+" or "+e.J,optional:!!r,K:function(n){return t.K(n)||e.K(n)}}}function Kl(t,e){for(var n in e){var r=e[n].name;t[r]=Xl(r,t[n],e[n].j)}}function Gl(t,e){for(var n in e){var r=e[n].name;r!==n&&Object.defineProperty(t,r,{get:x((function(t){return this[t]}),n),set:x((function(t,e,n,r){Rl(t,[n],[r],!0),this[e]=r}),r,n,e[n].gb),enumerable:!0})}}function Wl(t,e,n,r){t[e]=Xl(e,n,r)}function Xl(t,e,n){function r(){var t=Array.prototype.slice.call(arguments);return Rl(o,n,t),e.apply(this,t)}if(!n)return e;var i,o=function(t){return(t=t.split("."))[t.length-1]}(t);for(i in e)r[i]=e[i];for(i in e.prototype)r.prototype[i]=e.prototype[i];return r}Kl(Yh.prototype,{fb:{name:"applyActionCode",j:[Dl("code")]},Pa:{name:"checkActionCode",j:[Dl("code")]},jb:{name:"confirmPasswordReset",j:[Dl("code"),Dl("newPassword")]},cc:{name:"createUserWithEmailAndPassword",j:[Dl("email"),Dl("password")]},fc:{name:"fetchSignInMethodsForEmail",j:[Dl("email")]},pa:{name:"getRedirectResult",j:[]},zc:{name:"isSignInWithEmailLink",j:[Dl("emailLink")]},Fc:{name:"onAuthStateChanged",j:[zl(Ml(),Fl(),"nextOrObserver"),Fl("opt_error",!0),Fl("opt_completed",!0)]},Gc:{name:"onIdTokenChanged",j:[zl(Ml(),Fl(),"nextOrObserver"),Fl("opt_error",!0),Fl("opt_completed",!0)]},rb:{name:"sendPasswordResetEmail",j:[Dl("email"),zl(Ml("opt_actionCodeSettings",!0),Ul(null,!0),"opt_actionCodeSettings",!0)]},sb:{name:"sendSignInLinkToEmail",j:[Dl("email"),Ml("actionCodeSettings")]},tb:{name:"setPersistence",j:[Dl("persistence")]},Qc:{name:"signInAndRetrieveDataWithCredential",j:[Vl()]},vb:{name:"signInAnonymously",j:[]},Ya:{name:"signInWithCredential",j:[Vl()]},Rc:{name:"signInWithCustomToken",j:[Dl("token")]},Sc:{name:"signInWithEmailAndPassword",j:[Dl("email"),Dl("password")]},Tc:{name:"signInWithEmailLink",j:[Dl("email"),Dl("emailLink",!0)]},Uc:{name:"signInWithPhoneNumber",j:[Dl("phoneNumber"),ql()]},Vc:{name:"signInWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Wc:{name:"signInWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},bd:{name:"updateCurrentUser",j:[zl({name:"user",J:"an instance of Firebase User",optional:!1,K:function(t){return!!(t&&t instanceof fh)}},Ul(),"user")]},wb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[Dl(null,!0)]},dd:{name:"useDeviceLanguage",j:[]},fd:{name:"verifyPasswordResetCode",j:[Dl("code")]}}),Gl(Yh.prototype,{lc:{name:"languageCode",gb:zl(Dl(),Ul(),"languageCode")},ti:{name:"tenantId",gb:zl(Dl(),Ul(),"tenantId")}}),Yh.Persistence=Wu,Yh.Persistence.LOCAL="local",Yh.Persistence.SESSION="session",Yh.Persistence.NONE="none",Kl(fh.prototype,{delete:{name:"delete",j:[]},mc:{name:"getIdTokenResult",j:[jl("opt_forceRefresh",!0)]},I:{name:"getIdToken",j:[jl("opt_forceRefresh",!0)]},Ac:{name:"linkAndRetrieveDataWithCredential",j:[Vl()]},mb:{name:"linkWithCredential",j:[Vl()]},Bc:{name:"linkWithPhoneNumber",j:[Dl("phoneNumber"),ql()]},Cc:{name:"linkWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Dc:{name:"linkWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Jc:{name:"reauthenticateAndRetrieveDataWithCredential",j:[Vl()]},pb:{name:"reauthenticateWithCredential",j:[Vl()]},Kc:{name:"reauthenticateWithPhoneNumber",j:[Dl("phoneNumber"),ql()]},Lc:{name:"reauthenticateWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Mc:{name:"reauthenticateWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},reload:{name:"reload",j:[]},qb:{name:"sendEmailVerification",j:[zl(Ml("opt_actionCodeSettings",!0),Ul(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[Dl(null,!0)]},ad:{name:"unlink",j:[Dl("provider")]},xb:{name:"updateEmail",j:[Dl("email")]},yb:{name:"updatePassword",j:[Dl("password")]},cd:{name:"updatePhoneNumber",j:[Vl("phone")]},zb:{name:"updateProfile",j:[Ml("profile")]},Ab:{name:"verifyBeforeUpdateEmail",j:[Dl("email"),zl(Ml("opt_actionCodeSettings",!0),Ul(null,!0),"opt_actionCodeSettings",!0)]}}),Kl(ll.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),Kl(hl.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),Kl(we.prototype,{ma:{name:"finally"},o:{name:"catch"},then:{name:"then"}}),Gl(zc.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",gb:jl("appVerificationDisabledForTesting")}}),Kl(Kc.prototype,{confirm:{name:"confirm",j:[Dl("verificationCode")]}}),Wl(ao,"fromJSON",(function(t){t="string"==typeof t?JSON.parse(t):t;for(var e,n=[po,ko,Co,ho],r=0;r<n.length;r++)if(e=n[r](t))return e;return null}),[zl(Dl(),Ml(),"json")]),Wl(Ao,"credential",(function(t,e){return new So(t,e)}),[Dl("email"),Dl("password")]),Kl(So.prototype,{v:{name:"toJSON",j:[Dl(null,!0)]}}),Kl(bo.prototype,{Aa:{name:"addScope",j:[Dl("scope")]},Ia:{name:"setCustomParameters",j:[Ml("customOAuthParameters")]}}),Wl(bo,"credential",yo,[zl(Dl(),Ml(),"token")]),Wl(Ao,"credentialWithLink",No,[Dl("email"),Dl("emailLink")]),Kl(wo.prototype,{Aa:{name:"addScope",j:[Dl("scope")]},Ia:{name:"setCustomParameters",j:[Ml("customOAuthParameters")]}}),Wl(wo,"credential",_o,[zl(Dl(),Ml(),"token")]),Kl(xo.prototype,{Aa:{name:"addScope",j:[Dl("scope")]},Ia:{name:"setCustomParameters",j:[Ml("customOAuthParameters")]}}),Wl(xo,"credential",Io,[zl(Dl(),zl(Ml(),Ul()),"idToken"),zl(Dl(),Ul(),"accessToken",!0)]),Kl(Eo.prototype,{Ia:{name:"setCustomParameters",j:[Ml("customOAuthParameters")]}}),Wl(Eo,"credential",To,[zl(Dl(),Ml(),"token"),Dl("secret",!0)]),Kl(go.prototype,{Aa:{name:"addScope",j:[Dl("scope")]},credential:{name:"credential",j:[zl(Dl(),zl(Ml(),Ul()),"optionsOrIdToken"),zl(Dl(),Ul(),"accessToken",!0)]},Ia:{name:"setCustomParameters",j:[Ml("customOAuthParameters")]}}),Kl(lo.prototype,{v:{name:"toJSON",j:[Dl(null,!0)]}}),Kl(uo.prototype,{v:{name:"toJSON",j:[Dl(null,!0)]}}),Wl(Lo,"credential",Do,[Dl("verificationId"),Dl("verificationCode")]),Kl(Lo.prototype,{cb:{name:"verifyPhoneNumber",j:[zl(Dl(),{name:"phoneInfoOptions",J:"valid phone info options",optional:!1,K:function(t){return!!t&&(t.session&&t.phoneNumber?Hl(t.session,io)&&"string"==typeof t.phoneNumber:t.session&&t.multiFactorHint?Hl(t.session,oo)&&Bl(t.multiFactorHint):t.session&&t.multiFactorUid?Hl(t.session,oo)&&"string"==typeof t.multiFactorUid:!!t.phoneNumber&&"string"==typeof t.phoneNumber)}},"phoneInfoOptions"),ql()]}}),Kl(Po.prototype,{v:{name:"toJSON",j:[Dl(null,!0)]}}),Kl(T.prototype,{toJSON:{name:"toJSON",j:[Dl(null,!0)]}}),Kl(zo.prototype,{toJSON:{name:"toJSON",j:[Dl(null,!0)]}}),Kl(qo.prototype,{toJSON:{name:"toJSON",j:[Dl(null,!0)]}}),Kl(Yc.prototype,{toJSON:{name:"toJSON",j:[Dl(null,!0)]}}),Kl(Xc.prototype,{Pc:{name:"resolveSignIn",j:[{name:"multiFactorAssertion",J:"a valid multiFactorAssertion",optional:!1,K:function(t){return!!t&&!!t.ob}}]}}),Kl(rh.prototype,{Ob:{name:"getSession",j:[]},dc:{name:"enroll",j:[{name:"multiFactorAssertion",J:"a valid multiFactorAssertion",optional:!1,K:function(t){return!!t&&!!t.ob}},Dl("displayName",!0)]},$c:{name:"unenroll",j:[zl({name:"multiFactorInfo",J:"a valid multiFactorInfo",optional:!1,K:Bl},Dl(),"multiFactorInfoIdentifier")]}}),Kl(Cl.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}}),Wl(bi,"parseLink",Si,[Dl("link")]),Wl(gl,"assertion",(function(t){return new eh(t)}),[Vl("phone")]),function(){if(void 0===r.a||!r.a.INTERNAL||!r.a.INTERNAL.registerComponent)throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");var t={ActionCodeInfo:{Operation:{EMAIL_SIGNIN:ai,PASSWORD_RESET:"PASSWORD_RESET",RECOVER_EMAIL:"RECOVER_EMAIL",REVERT_SECOND_FACTOR_ADDITION:oi,VERIFY_AND_CHANGE_EMAIL:si,VERIFY_EMAIL:"VERIFY_EMAIL"}},Auth:Yh,AuthCredential:ao,Error:T};Wl(t,"EmailAuthProvider",Ao,[]),Wl(t,"FacebookAuthProvider",bo,[]),Wl(t,"GithubAuthProvider",wo,[]),Wl(t,"GoogleAuthProvider",xo,[]),Wl(t,"TwitterAuthProvider",Eo,[]),Wl(t,"OAuthProvider",go,[Dl("providerId")]),Wl(t,"SAMLAuthProvider",mo,[Dl("providerId")]),Wl(t,"PhoneAuthProvider",Lo,[{name:"auth",J:"an instance of Firebase Auth",optional:!0,K:function(t){return!!(t&&t instanceof Yh)}}]),Wl(t,"RecaptchaVerifier",Cl,[zl(Dl(),{name:"",J:"an HTML element",optional:!1,K:function(t){return!!(t&&t instanceof Element)}},"recaptchaContainer"),Ml("recaptchaParameters",!0),{name:"app",J:"an instance of Firebase App",optional:!0,K:function(t){return!!(t&&t instanceof r.a.app.App)}}]),Wl(t,"ActionCodeURL",bi,[]),Wl(t,"PhoneMultiFactorGenerator",gl,[]),r.a.INTERNAL.registerComponent({name:"auth",instanceFactory:function(t){return new Yh(t=t.getProvider("app").getImmediate())},multipleInstances:!1,serviceProps:t,instantiationMode:"LAZY",type:"PUBLIC"}),r.a.INTERNAL.registerComponent({name:"auth-internal",instanceFactory:function(t){return{getUid:_((t=t.getProvider("auth").getImmediate()).getUid,t),getToken:_(t.kc,t),addAuthTokenListener:_(t.bc,t),removeAuthTokenListener:_(t.Nc,t)}},multipleInstances:!1,instantiationMode:"LAZY",type:"PRIVATE"}),r.a.registerVersion("@firebase/auth","0.14.1"),r.a.INTERNAL.extendNamespace({User:fh})}()}).apply(void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})}).call(this,n(27))},,,,,,,,,,,,,,,function(t,e,n){var r=n(113),i=n(114);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[t.i,i,""]]);var o={insert:"head",singleton:!1},a=(r(i,o),i.locals?i.locals:{});t.exports=a},function(t,e,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),a=[];function s(t){for(var e=-1,n=0;n<a.length;n++)if(a[n].identifier===t){e=n;break}return e}function u(t,e){for(var n={},r=[],i=0;i<t.length;i++){var o=t[i],u=e.base?o[0]+e.base:o[0],c=n[u]||0,h="".concat(u," ").concat(c);n[u]=c+1;var l=s(h),f={css:o[1],media:o[2],sourceMap:o[3]};-1!==l?(a[l].references++,a[l].updater(f)):a.push({identifier:h,updater:m(f,e),references:1}),r.push(h)}return r}function c(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var a=o(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var h,l=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function f(t,e,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=l(e,i);else{var o=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}function p(t,e,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var d=null,v=0;function m(t,e){var n,r,i;if(e.singleton){var o=v++;n=d||(d=c(e)),r=f.bind(null,n,o,!1),i=f.bind(null,n,o,!0)}else n=c(e),r=p.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=i());var n=u(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var i=s(n[r]);a[i].references--}for(var o=u(t,e),c=0;c<n.length;c++){var h=s(n[c]);0===a[h].references&&(a[h].updater(),a.splice(h,1))}n=o}}}},function(t,e,n){(e=n(115)(!1)).push([t.i,'@media screen and (min-width: 1000px){.container{max-width:1248px;margin:auto}.container .row{display:flex;flex-direction:row;flex-wrap:wrap}.container .row .sm1{flex-basis:8.33333%;padding-right:12px;padding-left:12px}.container .row .sm2{flex-basis:16.66667%;padding-right:12px;padding-left:12px}.container .row .sm3{flex-basis:25%;padding-right:12px;padding-left:12px}.container .row .sm4{flex-basis:33.33333%;padding-right:12px;padding-left:12px}.container .row .sm5{flex-basis:41.66667%;padding-right:12px;padding-left:12px}.container .row .sm6{flex-basis:50%;padding-right:12px;padding-left:12px}.container .row .sm7{flex-basis:58.33333%;padding-right:12px;padding-left:12px}.container .row .sm8{flex-basis:66.66667%;padding-right:12px;padding-left:12px}.container .row .sm9{flex-basis:75%;padding-right:12px;padding-left:12px}.container .row .sm10{flex-basis:83.33333%;padding-right:12px;padding-left:12px}.container .row .sm11{flex-basis:91.66667%;padding-right:12px;padding-left:12px}.container .row .sm12{flex-basis:100%;padding-right:12px;padding-left:12px}.container .row.justify-center{justify-content:center}}@media screen and (min-width: 500px) and (max-width: 1000px){.container{width:calc(100vw - 64px);margin:auto}}@media screen and (max-width: 500px){.container{width:calc(100vw - 32px);margin:auto}}.page-header{display:grid;grid-template-columns:auto 1fr;grid-template-rows:auto auto auto;grid-template-areas:"logo toggle"\r "nav nav"\r "auth auth"}@media screen and (min-width: 1150px){.page-header{grid-template-rows:auto auto auto;grid-template-areas:"auth auth"\r "logo nav"}}.page-header__logo{grid-area:logo;padding:.5rem .5rem}@media screen and (min-width: 1150px){.page-header__logo{padding:0 1rem}}.page-header__logo .logo{width:64vw;max-width:280px}.page-header__nav{grid-area:nav}.page-header__sign-in{grid-area:auth;display:flex;justify-content:center}@media screen and (min-width: 1150px){.page-header__sign-in{justify-content:flex-end}}.page-header__toggle{grid-area:toggle;display:flex;justify-content:flex-end}@media screen and (min-width: 1150px){.page-header__toggle{display:none}}.page-header__btn--menu-toggle{max-width:64px;height:auto;display:flex;justify-content:center;align-items:center;border:none;background-color:transparent}.page-header__btn--menu-toggle.collapsed{background-color:#f0ede8}.page-header__btn--menu-toggle.collapsed .toggle-icon path.cross{display:block}.page-header__btn--menu-toggle.collapsed .toggle-icon path.burger{display:none}.page-header__btn--menu-toggle .toggle-icon path{stroke:#131614;stroke-width:12px}.page-header__btn--menu-toggle .toggle-icon path.burger{display:block}.page-header__btn--menu-toggle .toggle-icon path.cross{display:none}footer{background-color:#fff;border-top:1px solid #ddd;margin-top:88px;padding-top:28px}footer p,footer .list>span{font-size:16px;line-height:24px;margin:8px 0 32px}footer p span,footer .list>span span{margin-right:24px}footer p a,footer .list>span a{color:#9D9D9D}footer .partner-logos ul{list-style-type:none;padding:0px;display:flex}footer .partner-logos ul li{flex-grow:1;display:inline;position:relative}footer .partner-logos ul li img{height:50px}.white,.cta{color:white}.green{color:#25ac10}.dark-blue{color:#001489}.orange{color:#ff4e00}.black{color:black}.blue{color:#1e91d6}.bold{font-weight:bold}.bg-green,.cta{background-color:#25ac10}.bg-white{background-color:white}.transparent{background-color:transparent}.mb0{margin-bottom:0px}.mb12{margin-bottom:12px}.mb15{margin-bottom:15px}.mb40{margin-bottom:40px}.mb56{margin-bottom:56px}.mt16{margin-top:16px}.mt68{margin-top:56px}.mt72{margin-top:72px}.ml32{margin-left:32px}.ma0{margin:0}.pt32{padding-top:32px !important}.p-0{padding:0}.pt-0{padding-top:0}.pb-0{padding-bottom:0}.pl-0{padding-left:0}.pr-0{padding-right:0}.p-xs{padding:0.25rem}.pt-xs{padding-top:0.25rem}.pb-xs{padding-bottom:0.25rem}.pl-xs{padding-left:0.25rem}.pr-xs{padding-right:0.25rem}.p-sm{padding:0.5rem}.pt-sm{padding-top:0.5rem}.pb-sm{padding-bottom:0.5rem}.pl-sm{padding-left:0.5rem}.pr-sm{padding-right:0.5rem}.p-md{padding:1.6666rem}.pt-md{padding-top:1.6666rem}.pb-md{padding-bottom:1.6666rem}.pl-md{padding-left:1.6666rem}.pr-md{padding-right:1.6666rem}.p-lg{padding:2.2225rem}.pt-lg{padding-top:2.2225rem}.pb-lg{padding-bottom:2.2225rem}.pl-lg{padding-left:2.2225rem}.pr-lg{padding-right:2.2225rem}.p-xl{padding:2.778rem}.pt-xl{padding-top:2.778rem}.pb-xl{padding-bottom:2.778rem}.pl-xl{padding-left:2.778rem}.pr-xl{padding-right:2.778rem}.m-0{margin:0}.mt-0{margin-top:0}.mb-0{margin-bottom:0}.ml-0{margin-left:0}.mr-0{margin-right:0}.m-xs{margin:0.25rem}.mt-xs{margin-top:0.25rem}.mb-xs{margin-bottom:0.25rem}.ml-xs{margin-left:0.25rem}.mr-xs{margin-right:0.25rem}.m-sm{margin:0.5rem}.mt-sm{margin-top:0.5rem}.mb-sm{margin-bottom:0.5rem}.ml-sm{margin-left:0.5rem}.mr-sm{margin-right:0.5rem}.m-md{margin:1.6666rem}.mt-md{margin-top:1.6666rem}.mb-md{margin-bottom:1.6666rem}.ml-md{margin-left:1.6666rem}.mr-md{margin-right:1.6666rem}.m-lg{margin:2.2225rem}.mt-lg{margin-top:2.2225rem}.mb-lg{margin-bottom:2.2225rem}.ml-lg{margin-left:2.2225rem}.mr-lg{margin-right:2.2225rem}.m-xl{margin:2.778rem}.mt-xl{margin-top:2.778rem}.mb-xl{margin-bottom:2.778rem}.ml-xl{margin-left:2.778rem}.mr-xl{margin-right:2.778rem}input[type="date"]::-webkit-inner-spin-button{display:none;-webkit-appearance:none}.input label{position:absolute;top:-27px;left:0}.input input{width:240px;border:1px solid lightgrey;padding:0.25rem 10px 0.25rem;border-radius:5px}.input a.input__link{display:block;line-height:22px;color:var(--p-color);position:absolute;left:0;bottom:-22px}.stepper{display:flex;width:100%}.stepper__step{text-align:center;flex-basis:20%;opacity:0.3}.stepper__step--active{opacity:1}.stepper__step__text{color:#001489;font-size:18px;line-height:22px;letter-spacing:0.38px;font-weight:bold}@media screen and (max-width: 500px){.stepper__step__text{display:none}}.stepper__link{content:"";border-top:1px dashed #979797;height:0px;z-index:0;flex:1 1 0px}@media screen and (min-width: 500px){.stepper__link{margin:40px -40px}}@media screen and (max-width: 500px){.stepper__link{display:none}}form a{color:#51535b}form h5{font-size:27px;line-height:36px;margin:40px 0 0}form .error{display:none;color:red;position:absolute;left:0;bottom:-25px}form .input{width:100%;margin:64px 0 0}form .input label{font-weight:bold;font-size:18px;line-height:27px}form .input__hint{font-weight:normal;color:#51535b}form .input input,form .input select{width:100%;height:64px}form .input--separator{border:none;border-top:1px dashed #ddd;margin:0}form .input--radio{margin:20px 0}form .input--radio label{position:relative;margin:0;padding-left:40px;font-weight:normal;color:#51535b;top:0}form .input--radio label:hover{cursor:pointer}form .input--radio input:checked ~ .input--radio__radio{border:1px solid #1e91d6}form .input--radio input:checked ~ .input--radio__radio span{display:block;color:white;line-height:23px;background-color:#1e91d6}form .input--radio__radio{background-color:#fff;border:1px solid lightgrey;background-color:white;width:25px;height:25px;left:0px;top:0px;border-radius:13px;position:absolute;padding-top:5px;padding-left:5px}form .input--radio__radio span{display:none;text-align:center;width:13px;height:13px;border-radius:10px}form .input--checkbox{margin:20px 0}form .input--checkbox label{position:relative;margin:0;padding-left:40px;font-weight:normal;color:#51535b;top:0}form .input--checkbox label span.message{float:right;color:#1e91d6}form .input--checkbox label:hover{cursor:pointer}form .input--checkbox input:checked ~ .input--checkbox__checkbox{background-color:#1e91d6}form .input--checkbox input:checked ~ .input--checkbox__checkbox span{display:block;color:white;line-height:23px}form .input--checkbox__checkbox{background-color:#fff;border:1px solid lightgrey;background-color:white;width:25px;height:25px;left:0px;top:0px;border-radius:2px;position:absolute}form .input--checkbox__checkbox span{display:none;text-align:center}form .controls{text-align:right;margin-top:40px}form .btn{height:64px;border-radius:32px}form .btn--full-width{width:100%}form .expander{background-color:#eeebe5;margin-top:86px;padding:48px 0 56px;display:none}.login__fail-message{position:absolute;left:0;color:red;display:hidden;line-height:22px}.site-nav__items{background-color:#f0ede8;padding-top:1rem}.site-nav__item{list-style:none;padding:1rem;border-bottom:1px dashed #131614}.site-nav__link{color:#131614;text-decoration:none;transition:color 0.5s}.site-nav.collapsed{height:0;overflow:hidden}@media screen and (min-width: 1150px){.site-nav{display:flex;justify-content:flex-end;align-items:center}.site-nav.collapsed{height:auto}.site-nav__items{display:flex;flex-wrap:wrap;background-color:transparent;padding-top:0}.site-nav__item{padding:0.5rem 1rem;border:none}.site-nav__link:hover{text-decoration:underline;color:#1e91d6;transition:color 0.1s}}.collapsed.header-login{background-color:#f7f6f4}.collapsed .header-login__collapsed-nav{display:flex;justify-content:center}.collapsed .header-login__form{display:none}.collapsed .header-login__form-header{justify-content:space-between}@media screen and (min-width: 900px){.collapsed .header-login__collapsed-nav{display:none}.collapsed .header-login__form{display:flex}}.header-login{background-color:#f0ede8;width:100%}.header-login__collapsed-nav{display:none}.header-login .btn--close:before{font-size:0.75rem;line-height:1.333;color:#a0a0a0;margin-right:0.5rem;content:"Close"}.header-login__btn--toggle{background:transparent;border:none;display:flex;align-items:center}.header-login__btn--toggle .icon--close .bg{fill:#a0a0a0}.header-login__btn--toggle .icon--close .cross{stroke:white;stroke-width:12px}@media screen and (min-width: 900px){.header-login__btn--toggle .icon--close{display:none}}.header-login__form-header{display:flex;justify-content:space-between}.header-login__input{display:flex;flex-direction:column}.header-login__input label{font-size:0.889rem;line-height:1.333;font-weight:bold}.header-login__input input{width:240px;border:1px solid lightgrey;padding:0.25rem 10px 0.25rem;border-radius:5px}.header-login__input .link--forgot-pw{font-size:0.889rem;line-height:1.333;color:#131614;text-decoration:none;transition:color 0.5s}.header-login__input .link--forgot-pw:hover{text-decoration:underline;color:#1e91d6;transition:color 0.1s}.header-login__btn{align-self:center}.header-login .btn{font-size:1rem;line-height:1.333;padding:0.25rem 1rem}.header-login .btn--sign-up{white-space:nowrap}@media screen and (min-width: 900px){.header-login{display:flex;flex-wrap:wrap;justify-content:flex-end}.header-login__form-header{display:none}}.account__nav__item{list-style:none}.account__nav__item a{display:block;border:1px solid #ddd;border-radius:4px;margin-bottom:0.5rem;padding:0.5rem 1rem;color:#131614;font-weight:600;text-decoration:none}.account__nav__item a.selected{background-color:white}.mini-user-profile{display:flex;align-items:center}.mini-user-profile__avatar{max-width:100px}.mini-user-profile__user-name{display:block;font-size:1.5rem;line-height:1.333;font-weight:700;color:#1e91d6}.mini-user-profile__street-name{font-weight:bold}.user-avatar{max-width:100px;width:100%}.user-avatar__background{fill:#e8f4fb}.user-avatar__label{fill:#131614;font:32px sans-serif;text-anchor:middle}.account__header__logo{width:47vw;height:auto}@media screen and (min-width: 600px){.account__header__logo{width:auto;height:53px}}.account__header__user{height:50px;width:50px;border-radius:64px;background-color:rgba(30,145,214,0.101961);font-size:16px;line-height:50px;text-align:center;cursor:default}.account__header__user__wrapper{float:right}.account__header__wrapper{margin:auto;border-bottom:1px solid #ddd}.account__notifications{max-width:1248px}.account__notifications__wrapper{margin:auto}.account__body{display:grid;grid-template-columns:13rem 1fr}.notification__card{box-shadow:0 0 10px rgba(0,0,0,0.29);padding:30px 30px 30px 0px;width:100%;background-color:white;border-radius:4px;display:grid;grid-template-columns:170px 1fr;display:-ms-grid;-ms-grid-columns:170px 1fr}.notification__icon{height:55px;width:55px}.notification__icon__wrapper{margin:auto;grid-column:1;-ms-grid-column:1}.notification__title{color:#021587;font-size:1.333rem;line-height:1.333;font-weight:700}.notification__message{color:#51535b;font-size:1.333rem;line-height:1.333}.notification__close{height:10px;width:10px;margin-top:10px;margin-left:10px;position:relative}.notification__close__wrapper{top:10px;right:10px;width:30px;height:30px;background-color:#eef5ed;border-radius:50%;position:absolute;cursor:pointer;margin:auto}.profile__user-data{display:grid;grid-template-columns:repeat(2, minmax(200px, 1fr));grid-gap:1rem}.profile__user-data__item{min-width:10rem}.profile__user-data__item dd{font-weight:bold}.contact-preference__header{display:flex;align-items:center}.contact-preference__title{font-size:1rem;line-height:1.333;color:#131614}.contact-preference__options{display:flex;flex-wrap:wrap}.contact-preference__options .form-group{display:flex;flex-wrap:wrap}@media screen and (min-width: 600px){.contact-preference__options .form-group{margin:0 1.5rem}}.contact-preference__options .form-group label{cursor:pointer}.contact-preference__options .form-group input:checked+label{font-weight:bold}.profile-panel{background-color:white;border-radius:4px;border:1px solid #ddd;box-shadow:0 0 10px rgba(0,0,0,0.29)}.profile-panel__header{border-bottom:1px solid #ddd}.profile-panel__title{display:block;width:100%;font-size:1.5rem;line-height:1.333;font-weight:700;color:#001489}.profile-panel__divider{border:none;border-top:1px solid #ddd}.info-popup{width:24px;height:24px;position:relative;cursor:pointer;margin:0 0.5rem}.info-popup__icon{width:100%;height:auto}.info-popup__label{fill:#1e91d6;font:72px serif;font-weight:bold;text-anchor:middle}.info-popup__body{pointer-events:none;opacity:0;background-color:#e8f4fb;color:#131614;position:absolute;top:0%;left:0%;width:15rem;z-index:10;transform:translate(-50%, -50%);transition:opacity 0.2s;font-size:0.889rem;line-height:1.333}.info-popup__body.open{pointer-events:initial;cursor:pointer;opacity:1;box-shadow:0.1rem 0.1rem 3px rgba(0,0,0,0.15)}@media screen and (max-width: 1000px){.hero{display:flex;flex-direction:column}.hero>*{width:100%}.hero__img{width:100%}.hero>div:first-of-type{margin-bottom:32px}}@media screen and (min-width: 1000px){.hero>*{width:50%}}@media screen and (min-width: 1000px){.street-check>div{max-width:830px;margin:0 auto}.street-check h3{margin-top:40px;font-size:36px;line-height:48px}.street-check input{width:392px;font-size:18px;line-height:22px;padding:20px 32px}}@media screen and (min-width: 500px) and (max-width: 1000px){.street-check>div{text-align:center;max-width:500px;margin:0 auto}.street-check .postcode-input-button{display:grid;grid-template-columns:auto auto;grid-column-gap:16px}}@media screen and (max-width: 1000px){.street-check .align-center{justify-content:center}.street-check span{width:100%}.street-check p>span:first-of-type,.street-check .list>span>span:first-of-type{padding-bottom:5px}.street-check .ml32{margin-left:0}.street-check h3{margin-top:0;margin-bottom:16px;font-size:27px;line-height:36px}.street-check .input{margin-bottom:0}.street-check input{width:100%;font-size:14px;line-height:18px;padding:15px 24px}}.street-check .progress{display:inline-block;width:227px;height:3px;background-color:#eee;margin:0 10px;border-radius:5px}.street-check .progress .indicator{border-radius:5px;display:inline-block;width:15%;height:3px;background-color:#48a415}@media screen and (max-width: 500px){.street-check .progress{width:100%}}.street-check label{font-weight:bold}.street-check button{font-size:24px;line-height:29px;border-radius:32px;padding:17px 29px}@media screen and (min-width: 1000px){.street-check button{margin-left:24px}}@media screen and (max-width: 500px){.street-check button{width:100%;margin-top:16px}}@media screen and (max-width: 1000px){.step{display:flex}.step h4,.step h6{margin-top:0}.step>div:first-of-type{margin-right:16px;margin-top:8px}}@media screen and (max-width: 1000px){.help .sm4{margin-bottom:16px}}@media screen and (min-width: 1000px){.stats h2,.stats h4,.stats h6{margin:0}.stats p,.stats .list>span{font-size:24px;line-height:29px;margin:8px 0 4px}}@media screen and (max-width: 1000px){.stats{display:flex;justify-content:space-between;margin-left:auto;margin-right:auto;max-width:700px}}@media screen and (max-width: 500px){.stats h2,.stats h4,.stats h6{margin:0;font-size:21px;line-height:36px}.stats p,.stats .list>span{font-size:14px;line-height:18px;margin-top:1px}}.btn--sign-up{white-space:nowrap}.list>span{display:block;margin:16px 0}.list-item{margin:16px 0}@media screen and (max-width: 1000px){.list{text-align:left}.list>span{display:flex}.list>span>span{margin-right:13px}}*{font-family:"Montserrat", sans-serif;font-size:18px;line-height:27px;position:relative;box-sizing:border-box}html,body{background-color:#f7f6f4;margin:0}p,.list>span{font-size:18px;line-height:27px;color:#51535b}p.subtitle,.list>span.subtitle{font-size:24px;line-height:36px}h1,h2,h4,h6{color:#001489;font-size:56px;line-height:72px;letter-spacing:1px;font-weight:bold}h2,h4,h6{font-size:44px;line-height:56px;letter-spacing:0.5px;margin:0 0 22px}h4,h6{color:black;font-size:32px;line-height:44px;margin:15px 0}h6{font-size:18px;line-height:27px}.flex,.inline-flex{display:flex}.flex.align-center,.align-center.inline-flex{align-items:center}.inline-flex{display:inline-flex}.bold{font-weight:bold}.dnone{display:none}.logo{width:280px}.circle{margin:8px auto;display:block;background-color:#001489;color:white;display:flex;align-items:center;justify-content:center;z-index:1;font-weight:bold;border-radius:50%}@media screen and (min-width: 500px){.circle{font-size:32px;line-height:39px;height:64px;width:64px}}@media screen and (max-width: 500px){.circle{font-size:20px;line-height:24px;height:40px;width:40px}}.fab{display:flex;justify-content:center;align-items:center;background-color:#001489;color:white;border-radius:50%;font-weight:bold}@media screen and (max-width: 1000px){.fab{font-size:20px;line-height:24px;height:40px;width:40px}}@media screen and (min-width: 1000px){.fab{font-size:40px;line-height:49px;height:80px;width:80px}}.text-right{text-align:right}.text-center{text-align:center}.btn{border-radius:24px;border:2px solid transparent;font-size:18px;font-weight:bold;line-height:22px;letter-spacing:0.5px;padding:13px 40px;text-decoration:none}.btn.border-blue{border:2px solid #1e91d6}.btn.large{border-radius:32px;line-height:29px;padding:17px 112px 18px}@media screen and (max-width: 500px){.btn.large{width:100%}}.btn:hover{cursor:pointer}.btn .loader{display:none}.card{box-shadow:0 2px 10px 0 rgba(0,0,0,0.1);border-radius:5px;border:1px solid #dddddd;background-color:white}@media screen and (min-width: 1000px){.card{padding:24px}}@media screen and (max-width: 1000px){.card{padding:24px 16px}}@media screen and (max-width: 500px){.fill{width:100%}}.mdi-check{font-weight:bold}dl,dt,dd{margin:0}\n',""]),t.exports=e},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var i=(a=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(u," */")),o=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[n].concat(o).concat([i]).join("\n")}var a,s,u;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var s=0;s<t.length;s++){var u=[].concat(t[s]);r&&i[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),e.push(u))}},e}},function(t,e){function n(t){$(".info-popup__body",t.currentTarget).toggleClass("open")}$(".info-popup").each((function(){$(this).get(0).addEventListener("click",n)}))},function(t,e){var n=document.getElementById("site-nav-toggle");n&&n.addEventListener("click",(function(){$("#site-nav").toggleClass("collapsed"),$("#site-nav-toggle").toggleClass("collapsed")}));var r=document.querySelectorAll(".header-login__btn--toggle");$(r).each((function(){$(this).click((function(){$("#header-login").toggleClass("collapsed")}))}))},,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";n.r(e);n(38),n(35),n(48),n(93),n(50),n(112);var r=n(26);function i(t,e,n,r,i,o,a){try{var s=t[o](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,i)}var o=function(t){if(t)switch(t.code){case"auth/wrong-password":case"auth/user-not-found":return{success:!1,message:"Incorrect username or password provided, please try again"};default:return{success:!1,message:"An unexpected error occurred"}}},a=function(t,e){return t?e?"string"!=typeof t||"string"!=typeof e?{success:!1,message:"Please provide a valid email address"}:/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(t.toLowerCase())?{success:!0,message:""}:{success:!1,message:"Please provide a valid email address"}:{success:!1,message:"Please provide a password"}:{success:!1,message:"Please provide an email address"}};function s(t,e,n,r,i,o,a){try{var s=t[o](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,i)}var u={login:{login:function(){var t,e=(t=regeneratorRuntime.mark((function t(e,n){var i,s,u;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(i=a(e,n)).success){t.next=20;break}return t.prev=2,t.next=5,r.a.auth.signInWithEmailAndPassword(e,n);case 5:return s=t.sent,t.next=8,s.user.getIdToken();case 8:return u=t.sent,t.next=11,fetch("/api/auth",{method:"post",headers:{authorization:"Bearer ".concat(u),"content-type":"application/json"},body:JSON.stringify({token:u})});case 11:t.sent,window.location.href="/account",t.next=18;break;case 15:return t.prev=15,t.t0=t.catch(2),t.abrupt("return",o(t.t0));case 18:t.next=21;break;case 20:return t.abrupt("return",i);case 21:case"end":return t.stop()}}),t,null,[[2,15]])})),function(){var e=this,n=arguments;return new Promise((function(r,o){var a=t.apply(e,n);function s(t){i(a,r,o,s,u,"next",t)}function u(t){i(a,r,o,s,u,"throw",t)}s(void 0)}))});return function(t,n){return e.apply(this,arguments)}}()},notification:{closeNotification:function(){var t,e=(t=regeneratorRuntime.mark((function t(e){var n,r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e){t.next=2;break}throw Error("No notification id to close");case 2:return n={method:"PUT",body:JSON.stringify({Id:e})},r=fetch("/account/CloseNotification",n),$(".notification__card[data-notificationId='".concat(e,"']")).fadeOut(),t.next=7,r;case 7:case"end":return t.stop()}}),t)})),function(){var e=this,n=arguments;return new Promise((function(r,i){var o=t.apply(e,n);function a(t){s(o,r,i,a,u,"next",t)}function u(t){s(o,r,i,a,u,"throw",t)}a(void 0)}))});return function(t){return e.apply(this,arguments)}}()}};n(116),n(117);function c(t,e,n,r,i,o,a){try{var s=t[o](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,i)}function h(t){return function(){var e=this,n=arguments;return new Promise((function(r,i){var o=t.apply(e,n);function a(t){c(o,r,i,a,s,"next",t)}function s(t){c(o,r,i,a,s,"throw",t)}a(void 0)}))}}r.a.init({apiKey:"AIzaSyBcXGTnRXhFGq3fb6-ulyo-7qL8P0RIbqA",authDomain:"factor50-test.firebaseapp.com",databaseURL:"https://factor50-test.firebaseio.com",projectId:"factor50-test",storageBucket:"factor50-test.appspot.com",messagingSenderId:"1075949051901",appId:"1:1075949051901:web:1be61ff6f6de11c1934394"}),window.account=u,$((function(){$("#postcode_button").click((function(t){var e=this,n=$("#postcode").val();n&&($(this).width($(this).width()),$(this).height($(this).height()),$("#postcode_notcovered").hide(),$("#postcode_covered").hide(),$("#postcode_error").hide(),$(this).find(".text").hide(),$(this).find(".loader").show(),fetch("/api/postcode/".concat(n)).then((function(t){return t.json()})).then((function(t){t.addresses&&t.addresses.length?$("#postcode_covered").show():$("#postcode_notcovered").show()})).catch((function(t){$("#postcode_error").show()})).finally((function(){$(e).width(null),$(e).height(null),$(e).find(".text").show(),$(e).find(".loader").hide()})))})),$("#login-submit").click(h(regeneratorRuntime.mark((function t(){var e,n,r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,$("#login-submit")[0].disabled=!0,e=$("#email").val(),n=$("#password").val(),t.next=6,u.login.login(e,n);case 6:(r=t.sent).success||($("#login-fail-message").text(r.message),$("#login-submit")[0].disabled=!1);case 8:return t.prev=8,$("#login-submit")[0].disabled=!1,t.finish(8);case 11:case"end":return t.stop()}}),t,null,[[0,,8,11]])}))))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,